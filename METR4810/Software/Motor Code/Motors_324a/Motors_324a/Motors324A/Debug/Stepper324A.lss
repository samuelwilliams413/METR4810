
Stepper324A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000318  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010e  0080010e  000003ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cb9  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000542  00000000  00000000  00001235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001895  00000000  00000000  00001777  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  0000300c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000f8f8  00000000  00000000  00003280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000058c  00000000  00000000  00012b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00013104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f72  00000000  00000000  000131fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
   2:	00 00       	nop
   4:	56 c0       	rjmp	.+172    	; 0xb2 <__bad_interrupt>
   6:	00 00       	nop
   8:	54 c0       	rjmp	.+168    	; 0xb2 <__bad_interrupt>
   a:	00 00       	nop
   c:	52 c0       	rjmp	.+164    	; 0xb2 <__bad_interrupt>
   e:	00 00       	nop
  10:	50 c0       	rjmp	.+160    	; 0xb2 <__bad_interrupt>
  12:	00 00       	nop
  14:	4e c0       	rjmp	.+156    	; 0xb2 <__bad_interrupt>
  16:	00 00       	nop
  18:	4c c0       	rjmp	.+152    	; 0xb2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4a c0       	rjmp	.+148    	; 0xb2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	48 c0       	rjmp	.+144    	; 0xb2 <__bad_interrupt>
  22:	00 00       	nop
  24:	52 c1       	rjmp	.+676    	; 0x2ca <__vector_9>
  26:	00 00       	nop
  28:	44 c0       	rjmp	.+136    	; 0xb2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	42 c0       	rjmp	.+132    	; 0xb2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	40 c0       	rjmp	.+128    	; 0xb2 <__bad_interrupt>
  32:	00 00       	nop
  34:	3e c0       	rjmp	.+124    	; 0xb2 <__bad_interrupt>
  36:	00 00       	nop
  38:	3c c0       	rjmp	.+120    	; 0xb2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3a c0       	rjmp	.+116    	; 0xb2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	38 c0       	rjmp	.+112    	; 0xb2 <__bad_interrupt>
  42:	00 00       	nop
  44:	36 c0       	rjmp	.+108    	; 0xb2 <__bad_interrupt>
  46:	00 00       	nop
  48:	34 c0       	rjmp	.+104    	; 0xb2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	32 c0       	rjmp	.+100    	; 0xb2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	30 c0       	rjmp	.+96     	; 0xb2 <__bad_interrupt>
  52:	00 00       	nop
  54:	2e c0       	rjmp	.+92     	; 0xb2 <__bad_interrupt>
  56:	00 00       	nop
  58:	2c c0       	rjmp	.+88     	; 0xb2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2a c0       	rjmp	.+84     	; 0xb2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	28 c0       	rjmp	.+80     	; 0xb2 <__bad_interrupt>
  62:	00 00       	nop
  64:	26 c0       	rjmp	.+76     	; 0xb2 <__bad_interrupt>
  66:	00 00       	nop
  68:	24 c0       	rjmp	.+72     	; 0xb2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	22 c0       	rjmp	.+68     	; 0xb2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	20 c0       	rjmp	.+64     	; 0xb2 <__bad_interrupt>
  72:	00 00       	nop
  74:	1e c0       	rjmp	.+60     	; 0xb2 <__bad_interrupt>
  76:	00 00       	nop
  78:	1c c0       	rjmp	.+56     	; 0xb2 <__bad_interrupt>
	...

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 e1       	ldi	r30, 0x18	; 24
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 30       	cpi	r26, 0x0E	; 14
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	ae e0       	ldi	r26, 0x0E	; 14
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a2 31       	cpi	r26, 0x12	; 18
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	78 d0       	rcall	.+240    	; 0x1a0 <main>
  b0:	31 c1       	rjmp	.+610    	; 0x314 <_exit>

000000b2 <__bad_interrupt>:
  b2:	a6 cf       	rjmp	.-180    	; 0x0 <__vectors>

000000b4 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  b4:	08 95       	ret

000000b6 <uart_init>:



extern void uart_init(void)
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  ba:	83 e3       	ldi	r24, 0x33	; 51
  bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  c0:	a1 ec       	ldi	r26, 0xC1	; 193
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	8c 93       	st	X, r24
	UCSR0C = (3<<UCSZ00)|(1<<USBS0);
  c8:	e2 ec       	ldi	r30, 0xC2	; 194
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	8e e0       	ldi	r24, 0x0E	; 14
  ce:	80 83       	st	Z, r24

	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  d0:	88 e9       	ldi	r24, 0x98	; 152
  d2:	8c 93       	st	X, r24

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <send_str>:
		send_str(test_string2);
	}
}

extern void send_str(char* StringPtr)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	dc 01       	movw	r26, r24
		while(*StringPtr != 0x00) {
  e0:	9c 91       	ld	r25, X
  e2:	99 23       	and	r25, r25
  e4:	69 f0       	breq	.+26     	; 0x100 <send_str+0x26>
  e6:	11 96       	adiw	r26, 0x01	; 1
 * \param data the data to add to the UART buffer and send
 *
 */
static inline void uart_putchar(uint8_t data)
{
		while(!(UCSR0A & (1<<UDRE0)));
  e8:	e0 ec       	ldi	r30, 0xC0	; 192
  ea:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data;
  ec:	c6 ec       	ldi	r28, 0xC6	; 198
  ee:	d0 e0       	ldi	r29, 0x00	; 0
}

extern void send_str(char* StringPtr)
{
		while(*StringPtr != 0x00) {
			uart_putchar(*StringPtr);
  f0:	29 2f       	mov	r18, r25
 * \param data the data to add to the UART buffer and send
 *
 */
static inline void uart_putchar(uint8_t data)
{
		while(!(UCSR0A & (1<<UDRE0)));
  f2:	90 81       	ld	r25, Z
  f4:	95 ff       	sbrs	r25, 5
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <send_str+0x18>
		UDR0 = data;
  f8:	28 83       	st	Y, r18
	}
}

extern void send_str(char* StringPtr)
{
		while(*StringPtr != 0x00) {
  fa:	9d 91       	ld	r25, X+
  fc:	91 11       	cpse	r25, r1
  fe:	f8 cf       	rjmp	.-16     	; 0xf0 <send_str+0x16>
 * \param data the data to add to the UART buffer and send
 *
 */
static inline void uart_putchar(uint8_t data)
{
		while(!(UCSR0A & (1<<UDRE0)));
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	85 ff       	sbrs	r24, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <send_str+0x2a>
		UDR0 = data;
 10a:	8d e0       	ldi	r24, 0x0D	; 13
 10c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			uart_putchar(*StringPtr);
			StringPtr++;
		}
    uart_putchar('\r');

}
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <send_confirmation_msg>:
		return UDR0;
}


extern void send_confirmation_msg(uint8_t data)
{
 116:	cf 93       	push	r28
	if((data > 32) && (data < 126)) {
 118:	9f ed       	ldi	r25, 0xDF	; 223
 11a:	98 0f       	add	r25, r24
 11c:	9d 35       	cpi	r25, 0x5D	; 93
 11e:	70 f4       	brcc	.+28     	; 0x13c <send_confirmation_msg+0x26>
 120:	c8 2f       	mov	r28, r24
		send_str(test_string);
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	d9 df       	rcall	.-78     	; 0xda <send_str>
 * \param data the data to add to the UART buffer and send
 *
 */
static inline void uart_putchar(uint8_t data)
{
		while(!(UCSR0A & (1<<UDRE0)));
 128:	e0 ec       	ldi	r30, 0xC0	; 192
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	95 ff       	sbrs	r25, 5
 130:	fd cf       	rjmp	.-6      	; 0x12c <send_confirmation_msg+0x16>
		UDR0 = data;
 132:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
extern void send_confirmation_msg(uint8_t data)
{
	if((data > 32) && (data < 126)) {
		send_str(test_string);
		uart_putchar(data);
		send_str(test_string2);
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	cf df       	rcall	.-98     	; 0xda <send_str>
	}
}
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <get_char>:
    uart_putchar('\r');

}

extern uint8_t get_char(void)
{
 140:	cf 93       	push	r28
	send_confirmation_msg(52); // 4
 142:	84 e3       	ldi	r24, 0x34	; 52
	uint8_t data = '\0';
	send_confirmation_msg(53); // 5
 144:	e8 df       	rcall	.-48     	; 0x116 <send_confirmation_msg>
 *
 * \retval Next data byte in receive buffer
 */
static inline uint8_t uart_getchar(void)
{
	send_confirmation_msg(55); // 7
 146:	85 e3       	ldi	r24, 0x35	; 53
 148:	e6 df       	rcall	.-52     	; 0x116 <send_confirmation_msg>
 14a:	87 e3       	ldi	r24, 0x37	; 55
		while(!(UCSR0A & (1<<RXC0)));
 14c:	e4 df       	rcall	.-56     	; 0x116 <send_confirmation_msg>
 14e:	e0 ec       	ldi	r30, 0xC0	; 192
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
		send_confirmation_msg(56); // 8
 154:	88 23       	and	r24, r24
 156:	ec f7       	brge	.-6      	; 0x152 <get_char+0x12>
		return UDR0;
 158:	88 e3       	ldi	r24, 0x38	; 56
 15a:	dd df       	rcall	.-70     	; 0x116 <send_confirmation_msg>
{
	send_confirmation_msg(52); // 4
	uint8_t data = '\0';
	send_confirmation_msg(53); // 5
	data = uart_getchar();
	send_confirmation_msg(54); // 6
 15c:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 160:	86 e3       	ldi	r24, 0x36	; 54
	return data;
 162:	d9 df       	rcall	.-78     	; 0x116 <send_confirmation_msg>
 164:	8c 2f       	mov	r24, r28
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <motorRfwd>:

void motorLbwd(uint16_t pwm)
{

	OCR0A = pwm;
	PORTD |= (0<<PORTD3);
 16a:	88 bd       	out	0x28, r24	; 40
 16c:	5a 9a       	sbi	0x0b, 2	; 11
 16e:	08 95       	ret

00000170 <motorLfwd>:
 170:	87 bd       	out	0x27, r24	; 39
 172:	5b 9a       	sbi	0x0b, 3	; 11
 174:	08 95       	ret

00000176 <motorR_stop>:
	
}

void motorR_stop(void){
	
	OCR0B = 0;
 176:	18 bc       	out	0x28, r1	; 40
	PORTD &= (0<<PORTD2);
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	1b b8       	out	0x0b, r1	; 11
 17c:	08 95       	ret

0000017e <motorL_stop>:
	
}

void motorL_stop(void){
	
	OCR0A = 0;
 17e:	17 bc       	out	0x27, r1	; 39
	PORTD &= (0<<PORTD3);
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	1b b8       	out	0x0b, r1	; 11
 184:	08 95       	ret

00000186 <motor_initB>:
void motor_initB()
{
	// configure for inverted PWM output on motor control pins:
	//  set OCxx on compare match, clear on timer overflow
	//  Timer0 count up from 0 to 255
	TCCR0A = 0b11110001;
 186:	81 ef       	ldi	r24, 0xF1	; 241
 188:	84 bd       	out	0x24, r24	; 36
	
	// use the system clock/8 (=2.5 MHz) as the timer clock
	TCCR0B = 0b00001010;
 18a:	8a e0       	ldi	r24, 0x0A	; 10
 18c:	85 bd       	out	0x25, r24	; 37
	
	// initialize all PWMs to 0% duty cycle (braking)
	OCR0A =  0;
 18e:	17 bc       	out	0x27, r1	; 39
	OCR0B  = 0;
 190:	18 bc       	out	0x28, r1	; 40
	// set PWM pins as digital outputs (the PWM signals will not
	// appear on the lines if they are digital inputs)
	DDRB |= (1 << DDRB3) | (1 << DDRB4);
 192:	84 b1       	in	r24, 0x04	; 4
 194:	88 61       	ori	r24, 0x18	; 24
 196:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDRD2) | (1<<DDRD3);
 198:	8a b1       	in	r24, 0x0a	; 10
 19a:	8c 60       	ori	r24, 0x0C	; 12
 19c:	8a b9       	out	0x0a, r24	; 10
 19e:	08 95       	ret

000001a0 <main>:
// #endif
	
int main(void) {
	 // set port D to output
	board_init();
	motor_initB();
 1a0:	89 df       	rcall	.-238    	; 0xb4 <board_init>
 1a2:	f1 df       	rcall	.-30     	; 0x186 <motor_initB>
 1a4:	18 d0       	rcall	.+48     	; 0x1d6 <servo_init>
 1a6:	7b d0       	rcall	.+246    	; 0x29e <timer_init>
 1a8:	86 df       	rcall	.-244    	; 0xb6 <uart_init>
 1aa:	80 e3       	ldi	r24, 0x30	; 48
 1ac:	b4 df       	rcall	.-152    	; 0x116 <send_confirmation_msg>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	de df       	rcall	.-68     	; 0x170 <motorLfwd>
 1b4:	81 e3       	ldi	r24, 0x31	; 49
 1b6:	af df       	rcall	.-162    	; 0x116 <send_confirmation_msg>
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	20 d0       	rcall	.+64     	; 0x1fe <full_step_back>
 1be:	df df       	rcall	.-66     	; 0x17e <motorL_stop>
 1c0:	da df       	rcall	.-76     	; 0x176 <motorR_stop>
 1c2:	82 e3       	ldi	r24, 0x32	; 50
 1c4:	a8 df       	rcall	.-176    	; 0x116 <send_confirmation_msg>
 1c6:	bc df       	rcall	.-136    	; 0x140 <get_char>
 1c8:	a6 df       	rcall	.-180    	; 0x116 <send_confirmation_msg>
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	cd df       	rcall	.-102    	; 0x16a <motorRfwd>
 1d0:	83 e3       	ldi	r24, 0x33	; 51
 1d2:	a1 df       	rcall	.-190    	; 0x116 <send_confirmation_msg>
 1d4:	ec cf       	rjmp	.-40     	; 0x1ae <main+0xe>

000001d6 <servo_init>:
//  before you use any of the above functions
void servo_init()
{
	
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 1d6:	e0 e8       	ldi	r30, 0x80	; 128
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	82 6a       	ori	r24, 0xA2	; 162
 1de:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 1e0:	e1 e8       	ldi	r30, 0x81	; 129
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	8b 61       	ori	r24, 0x1B	; 27
 1e8:	80 83       	st	Z, r24
	ICR1=2499;  //fPWM=50Hz (Period = 20ms Standard).
 1ea:	83 ec       	ldi	r24, 0xC3	; 195
 1ec:	99 e0       	ldi	r25, 0x09	; 9
 1ee:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1f2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

	// set PWM pins as digital outputs (the PWM signals will not
	// appear on the lines if they are digital inputs)
	DDRD |= (1 << PORTD5)|(1<<PORTD4);
 1f6:	8a b1       	in	r24, 0x0a	; 10
 1f8:	80 63       	ori	r24, 0x30	; 48
 1fa:	8a b9       	out	0x0a, r24	; 10
 1fc:	08 95       	ret

000001fe <full_step_back>:
		// 		PORTC = 0b001001000;
		// 		_delay_ms(DELAY);
		
	}
}
void full_step_back (int num_step) {
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
	for (int i = 0; i < num_step; ++i)
 202:	18 16       	cp	r1, r24
 204:	19 06       	cpc	r1, r25
 206:	0c f0       	brlt	.+2      	; 0x20a <full_step_back+0xc>
 208:	47 c0       	rjmp	.+142    	; 0x298 <full_step_back+0x9a>
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		PORTC = 0b00100100;
 20e:	b4 e2       	ldi	r27, 0x24	; 36
		_delay_ms(DELAY);
		PORTC = 0b00100000;
 210:	a0 e2       	ldi	r26, 0x20	; 32
		_delay_ms(DELAY);
		PORTC = 0b00110000;
 212:	f0 e3       	ldi	r31, 0x30	; 48
		_delay_ms(DELAY);
		PORTC = 0b00010000;
 214:	e0 e1       	ldi	r30, 0x10	; 16
		_delay_ms(DELAY);
		PORTC = 0b00011000;
 216:	78 e1       	ldi	r23, 0x18	; 24
		_delay_ms(DELAY);
		PORTC = 0b00001000;
 218:	68 e0       	ldi	r22, 0x08	; 8
		_delay_ms(DELAY);
		PORTC = 0b00001100;
 21a:	5c e0       	ldi	r21, 0x0C	; 12
		_delay_ms(DELAY);
		PORTC = 0b00000100;
 21c:	44 e0       	ldi	r20, 0x04	; 4
}
void full_step_back (int num_step) {
	for (int i = 0; i < num_step; ++i)
	{
		
		PORTC = 0b00100100;
 21e:	b8 b9       	out	0x08, r27	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	c3 ec       	ldi	r28, 0xC3	; 195
 222:	d9 e0       	ldi	r29, 0x09	; 9
 224:	21 97       	sbiw	r28, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <full_step_back+0x26>
 228:	00 c0       	rjmp	.+0      	; 0x22a <full_step_back+0x2c>
 22a:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00100000;
 22c:	a8 b9       	out	0x08, r26	; 8
 22e:	c3 ec       	ldi	r28, 0xC3	; 195
 230:	d9 e0       	ldi	r29, 0x09	; 9
 232:	21 97       	sbiw	r28, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <full_step_back+0x34>
 236:	00 c0       	rjmp	.+0      	; 0x238 <full_step_back+0x3a>
 238:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00110000;
 23a:	f8 b9       	out	0x08, r31	; 8
 23c:	c3 ec       	ldi	r28, 0xC3	; 195
 23e:	d9 e0       	ldi	r29, 0x09	; 9
 240:	21 97       	sbiw	r28, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <full_step_back+0x42>
 244:	00 c0       	rjmp	.+0      	; 0x246 <full_step_back+0x48>
 246:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00010000;
 248:	e8 b9       	out	0x08, r30	; 8
 24a:	c3 ec       	ldi	r28, 0xC3	; 195
 24c:	d9 e0       	ldi	r29, 0x09	; 9
 24e:	21 97       	sbiw	r28, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <full_step_back+0x50>
 252:	00 c0       	rjmp	.+0      	; 0x254 <full_step_back+0x56>
 254:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00011000;
 256:	78 b9       	out	0x08, r23	; 8
 258:	c3 ec       	ldi	r28, 0xC3	; 195
 25a:	d9 e0       	ldi	r29, 0x09	; 9
 25c:	21 97       	sbiw	r28, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <full_step_back+0x5e>
 260:	00 c0       	rjmp	.+0      	; 0x262 <full_step_back+0x64>
 262:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00001000;
 264:	68 b9       	out	0x08, r22	; 8
 266:	c3 ec       	ldi	r28, 0xC3	; 195
 268:	d9 e0       	ldi	r29, 0x09	; 9
 26a:	21 97       	sbiw	r28, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <full_step_back+0x6c>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <full_step_back+0x72>
 270:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00001100;
 272:	58 b9       	out	0x08, r21	; 8
 274:	c3 ec       	ldi	r28, 0xC3	; 195
 276:	d9 e0       	ldi	r29, 0x09	; 9
 278:	21 97       	sbiw	r28, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <full_step_back+0x7a>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <full_step_back+0x80>
 27e:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00000100;
 280:	48 b9       	out	0x08, r20	; 8
 282:	c3 ec       	ldi	r28, 0xC3	; 195
 284:	d9 e0       	ldi	r29, 0x09	; 9
 286:	21 97       	sbiw	r28, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <full_step_back+0x88>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <full_step_back+0x8e>
 28c:	00 00       	nop
		// 		_delay_ms(DELAY);
		
	}
}
void full_step_back (int num_step) {
	for (int i = 0; i < num_step; ++i)
 28e:	2f 5f       	subi	r18, 0xFF	; 255
 290:	3f 4f       	sbci	r19, 0xFF	; 255
 292:	82 17       	cp	r24, r18
 294:	93 07       	cpc	r25, r19
 296:	19 f6       	brne	.-122    	; 0x21e <full_step_back+0x20>
		_delay_ms(DELAY);
		PORTC = 0b00000100;
		_delay_ms(DELAY);
		
	}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <timer_init>:
//  before you use any of the above functions
void timer_init()
{
	//sei();
	//Configure TIMER2
	 OCR2A = 249;
 29e:	89 ef       	ldi	r24, 0xF9	; 249
 2a0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	 TCCR2A |= (1 << WGM21);
 2a4:	e0 eb       	ldi	r30, 0xB0	; 176
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	82 60       	ori	r24, 0x02	; 2
 2ac:	80 83       	st	Z, r24
	 // Set to CTC Mode

	 TIMSK2 |= (1 << OCIE2A);
 2ae:	e0 e7       	ldi	r30, 0x70	; 112
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	80 83       	st	Z, r24
	 //Set interrupt on compare match

	 TCCR2B |= (1 << CS21)|(1 << CS20);
 2b8:	e1 eb       	ldi	r30, 0xB1	; 177
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	83 60       	ori	r24, 0x03	; 3
 2c0:	80 83       	st	Z, r24
	 // set prescaler to 32 and starts PWM

	 
	 // enable interrupts
	 TIFR0 &= (1<<OCF0A);
 2c2:	85 b3       	in	r24, 0x15	; 21
 2c4:	82 70       	andi	r24, 0x02	; 2
 2c6:	85 bb       	out	0x15, r24	; 21
 2c8:	08 95       	ret

000002ca <__vector_9>:


}

ISR (TIMER2_COMPA_vect)
{
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
	// action to be done every 250 usec
	 //TIFR0 &= ~(1<<OCF0A);
	clock_ticks++;
 2dc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 2e0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 2e4:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end+0x2>
 2e8:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x3>
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	a1 1d       	adc	r26, r1
 2f0:	b1 1d       	adc	r27, r1
 2f2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 2f6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 2fa:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <__data_end+0x2>
 2fe:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <__data_end+0x3>
 302:	bf 91       	pop	r27
 304:	af 91       	pop	r26
 306:	9f 91       	pop	r25
 308:	8f 91       	pop	r24
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
