
FinalDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  00000e64  00000ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800230  00800230  00001028  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa6  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b4  00000000  00000000  000021da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001880  00000000  00000000  0000278e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00004010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000102a0  00000000  00000000  0000431c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a9f  00000000  00000000  000145bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0001505b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003e58  00000000  00000000  00015183  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
   6:	00 00       	nop
   8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
   a:	00 00       	nop
   c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
   e:	00 00       	nop
  10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
  12:	00 00       	nop
  14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
  16:	00 00       	nop
  18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c2       	rjmp	.+1192   	; 0x4ce <__vector_9>
  26:	00 00       	nop
  28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
  32:	00 00       	nop
  34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
  36:	00 00       	nop
  38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
  42:	00 00       	nop
  44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
  46:	00 00       	nop
  48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
  52:	00 00       	nop
  54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
  56:	00 00       	nop
  58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
  62:	00 00       	nop
  64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
  66:	00 00       	nop
  68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
  72:	00 00       	nop
  74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
  76:	00 00       	nop
  78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3f 03       	fmul	r19, r23
  7e:	31 04       	cpc	r3, r1
  80:	31 04       	cpc	r3, r1
  82:	b2 03       	fmuls	r19, r18
  84:	92 03       	fmuls	r17, r18
  86:	31 04       	cpc	r3, r1
  88:	31 04       	cpc	r3, r1
  8a:	31 04       	cpc	r3, r1
  8c:	d2 03       	fmuls	r21, r18
  8e:	f8 03       	fmulsu	r23, r16
  90:	1e 04       	cpc	r1, r14
  92:	0c 04       	cpc	r0, r12
  94:	e6 03       	fmuls	r22, r22
  96:	31 04       	cpc	r3, r1
  98:	31 04       	cpc	r3, r1
  9a:	31 04       	cpc	r3, r1
  9c:	2b 03       	fmul	r18, r19
  9e:	31 04       	cpc	r3, r1
  a0:	73 03       	mulsu	r23, r19
  a2:	31 04       	cpc	r3, r1
  a4:	31 04       	cpc	r3, r1
  a6:	31 04       	cpc	r3, r1
  a8:	53 03       	mulsu	r21, r19

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d8 e0       	ldi	r29, 0x08	; 8
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	12 e0       	ldi	r17, 0x02	; 2
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	e4 e6       	ldi	r30, 0x64	; 100
  be:	fe e0       	ldi	r31, 0x0E	; 14
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
  c2:	05 90       	lpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a0 33       	cpi	r26, 0x30	; 48
  c8:	b1 07       	cpc	r27, r17
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
  cc:	22 e0       	ldi	r18, 0x02	; 2
  ce:	a0 e3       	ldi	r26, 0x30	; 48
  d0:	b2 e0       	ldi	r27, 0x02	; 2
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
  d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
  d6:	aa 37       	cpi	r26, 0x7A	; 122
  d8:	b2 07       	cpc	r27, r18
  da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
  dc:	69 d2       	rcall	.+1234   	; 0x5b0 <main>
  de:	c0 c6       	rjmp	.+3456   	; 0xe60 <_exit>

000000e0 <__bad_interrupt>:
  e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <uart_init>:
	if((data > 32) && (data < 126)) {
		send_str(test_string);
		uart_putchar(data);
		send_str(test_string2);
	}
}
  e2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  e6:	83 e3       	ldi	r24, 0x33	; 51
  e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ec:	a1 ec       	ldi	r26, 0xC1	; 193
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	88 e1       	ldi	r24, 0x18	; 24
  f2:	8c 93       	st	X, r24
  f4:	e2 ec       	ldi	r30, 0xC2	; 194
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	8e e0       	ldi	r24, 0x0E	; 14
  fa:	80 83       	st	Z, r24
  fc:	88 e9       	ldi	r24, 0x98	; 152
  fe:	8c 93       	st	X, r24
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <send_str>:
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	dc 01       	movw	r26, r24
 10c:	9c 91       	ld	r25, X
 10e:	99 23       	and	r25, r25
 110:	69 f0       	breq	.+26     	; 0x12c <send_str+0x26>
 112:	11 96       	adiw	r26, 0x01	; 1
 114:	e0 ec       	ldi	r30, 0xC0	; 192
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	c6 ec       	ldi	r28, 0xC6	; 198
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	29 2f       	mov	r18, r25
 11e:	90 81       	ld	r25, Z
 120:	95 ff       	sbrs	r25, 5
 122:	fd cf       	rjmp	.-6      	; 0x11e <send_str+0x18>
 124:	28 83       	st	Y, r18
 126:	9d 91       	ld	r25, X+
 128:	91 11       	cpse	r25, r1
 12a:	f8 cf       	rjmp	.-16     	; 0x11c <send_str+0x16>
 12c:	e0 ec       	ldi	r30, 0xC0	; 192
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	85 ff       	sbrs	r24, 5
 134:	fd cf       	rjmp	.-6      	; 0x130 <send_str+0x2a>
 136:	8d e0       	ldi	r24, 0x0D	; 13
 138:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <get_char>:
 *
 * \retval Next data byte in receive buffer
 */
static inline uint8_t uart_getchar(void)
{
		while(!(UCSR0A & (1<<RXC0)));
 142:	e0 ec       	ldi	r30, 0xC0	; 192
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	ec f7       	brge	.-6      	; 0x146 <get_char+0x4>
		return UDR0;
 14c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
extern uint8_t get_char(void)
{
	uint8_t data = '\0';
	data = uart_getchar();
	return data;
 150:	08 95       	ret

00000152 <setPD>:
static int PB3_sta = 0;
static int PB4_sta = 0;

void setPD(int _PD2_state, int _PD3_state){

	if (_PD2_state == 0){
 152:	89 2b       	or	r24, r25
 154:	39 f4       	brne	.+14     	; 0x164 <setPD+0x12>
		if (_PD3_state == 0) {
 156:	67 2b       	or	r22, r23
 158:	11 f4       	brne	.+4      	; 0x15e <setPD+0xc>
			PORTD = 0b0000;
 15a:	1b b8       	out	0x0b, r1	; 11
 15c:	08 95       	ret
		}
		else {
			PORTD = 0b1000;
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	8b b9       	out	0x0b, r24	; 11
 162:	08 95       	ret
		}
	}

	else {
		if (_PD3_state == 0) {
 164:	67 2b       	or	r22, r23
 166:	19 f4       	brne	.+6      	; 0x16e <setPD+0x1c>
			PORTD = 0b0100;
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	08 95       	ret
		}
		else {
			PORTD = 0b1100;
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	8b b9       	out	0x0b, r24	; 11
 172:	08 95       	ret

00000174 <setPB>:
}


void setPB(int _PB3_state, int _PB4_state){

	if (_PB3_state == 0){
 174:	89 2b       	or	r24, r25
 176:	39 f4       	brne	.+14     	; 0x186 <setPB+0x12>
		if (_PB4_state == 0) {
 178:	67 2b       	or	r22, r23
 17a:	11 f4       	brne	.+4      	; 0x180 <setPB+0xc>
			PORTB = 0b0000;
 17c:	15 b8       	out	0x05, r1	; 5
 17e:	08 95       	ret
		}
		else {
			PORTB = 0b10000;
 180:	80 e1       	ldi	r24, 0x10	; 16
 182:	85 b9       	out	0x05, r24	; 5
 184:	08 95       	ret
		}
	}

	else {
		if (_PB4_state == 0) {
 186:	67 2b       	or	r22, r23
 188:	19 f4       	brne	.+6      	; 0x190 <setPB+0x1c>
			PORTB = 0b01000;
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	08 95       	ret
		}
		else {
			PORTB = 0b11000;
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	85 b9       	out	0x05, r24	; 5
 194:	08 95       	ret

00000196 <motorRfwd>:
{
	
	//OCR0B = 255-pwm;
	
	//PORTD |=  (1<<PORTD2);
	PB3_sta = 0;
 196:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <PB3_sta+0x1>
 19a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <PB3_sta>
	setPB(PB3_sta, PB4_sta);
 19e:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <__data_end>
 1a2:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <__data_end+0x1>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	e4 df       	rcall	.-56     	; 0x174 <setPB>
	PD2_sta = 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <PD2_sta+0x1>
 1b4:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <PD2_sta>
	setPD(PD2_sta, PD3_sta);
 1b8:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <PD3_sta>
 1bc:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <PD3_sta+0x1>
 1c0:	c8 cf       	rjmp	.-112    	; 0x152 <setPD>
 1c2:	08 95       	ret

000001c4 <motorLfwd>:
void motorLfwd(uint16_t pwm)
{

	//OCR0A = 255-pwm;
	//PORTD |= (1<<PORTD3);
	PB4_sta = 0;
 1c4:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <__data_end+0x1>
 1c8:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
	setPB(PB3_sta, PB4_sta);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <PB3_sta>
 1d4:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <PB3_sta+0x1>
 1d8:	cd df       	rcall	.-102    	; 0x174 <setPB>
	PD3_sta = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <PD3_sta+0x1>
 1e2:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <PD3_sta>
	setPD(PD2_sta, PD3_sta);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <PD2_sta>
 1ee:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <PD2_sta+0x1>
 1f2:	af cf       	rjmp	.-162    	; 0x152 <setPD>
 1f4:	08 95       	ret

000001f6 <motorRbwd>:
{
	
	//OCR0B = pwm;
	
	//PORTD &=  !(1<<PORTD2);
	PB3_sta = 1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <PB3_sta+0x1>
 1fe:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <PB3_sta>
	setPB(PB3_sta, PB4_sta);
 202:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <__data_end>
 206:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <__data_end+0x1>
 20a:	b4 df       	rcall	.-152    	; 0x174 <setPB>
	PD2_sta = 0;
 20c:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <PD2_sta+0x1>
 210:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <PD2_sta>
	setPD(PD2_sta, PD3_sta);
 214:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <PD3_sta>
 218:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <PD3_sta+0x1>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	98 cf       	rjmp	.-208    	; 0x152 <setPD>
 222:	08 95       	ret

00000224 <motorLbwd>:
{

	//OCR0A = pwm;

	//PORTD &= !(1<<PORTD3);
	PB4_sta = 1;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <__data_end+0x1>
 22c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>
	setPB(PB3_sta, PB4_sta);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <PB3_sta>
 238:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <PB3_sta+0x1>
 23c:	9b df       	rcall	.-202    	; 0x174 <setPB>
	PD3_sta = 0;
 23e:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <PD3_sta+0x1>
 242:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <PD3_sta>
	setPD(PD2_sta, PD3_sta);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <PD2_sta>
 24e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <PD2_sta+0x1>
 252:	7f cf       	rjmp	.-258    	; 0x152 <setPD>
 254:	08 95       	ret

00000256 <motorR_stop>:

void motorR_stop(void){
	
	//OCR0B = 0;
	//PORTD &= !(1<<PORTD2);
	PB3_sta = 0;
 256:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <PB3_sta+0x1>
 25a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <PB3_sta>
	setPB(PB3_sta, PB4_sta);
 25e:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <__data_end>
 262:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <__data_end+0x1>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	84 df       	rcall	.-248    	; 0x174 <setPB>
	PD2_sta = 0;
 26c:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <PD2_sta+0x1>
 270:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <PD2_sta>
	setPD(PD2_sta, PD3_sta);
 274:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <PD3_sta>
 278:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <PD3_sta+0x1>
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	68 cf       	rjmp	.-304    	; 0x152 <setPD>
 282:	08 95       	ret

00000284 <motorL_stop>:

void motorL_stop(void){
	
	//OCR0A = 0;
	
	PB4_sta = 0;
 284:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <__data_end+0x1>
 288:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
	setPB(PB3_sta, PB4_sta);//PORTD &= !(1<<PORTD3);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <PB3_sta>
 294:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <PB3_sta+0x1>
 298:	6d df       	rcall	.-294    	; 0x174 <setPB>
	PD3_sta = 0;
 29a:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <PD3_sta+0x1>
 29e:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <PD3_sta>
	setPD(PD2_sta, PD3_sta);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <PD2_sta>
 2aa:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <PD2_sta+0x1>
 2ae:	51 cf       	rjmp	.-350    	; 0x152 <setPD>
 2b0:	08 95       	ret

000002b2 <motor_init>:
	// initialize all PWMs to 0% duty cycle (braking)
	//OCR0A =  0;
	//OCR0B  = 0;
	// set PWM pins as digital outputs (the PWM signals will not
	// appear on the lines if they are digital inputs)
	DDRB |= (1 << PORTB3) | (1 << PORTB4);
 2b2:	84 b1       	in	r24, 0x04	; 4
 2b4:	88 61       	ori	r24, 0x18	; 24
 2b6:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PORTD2) | (1 << PORTD3);
 2b8:	8a b1       	in	r24, 0x0a	; 10
 2ba:	8c 60       	ori	r24, 0x0C	; 12
 2bc:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b11111111;
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111111;
 2c2:	8a b9       	out	0x0a, r24	; 10
 2c4:	08 95       	ret

000002c6 <move_servo1>:
#include "servo.h"
// Motor Control Functions -- pwm is an 16-bit value

void move_servo1(uint16_t angle)
{
	OCR1A = (310 - 110) * angle / 150 + 110;
 2c6:	48 ec       	ldi	r20, 0xC8	; 200
 2c8:	9c 01       	movw	r18, r24
 2ca:	42 9f       	mul	r20, r18
 2cc:	c0 01       	movw	r24, r0
 2ce:	43 9f       	mul	r20, r19
 2d0:	90 0d       	add	r25, r0
 2d2:	11 24       	eor	r1, r1
 2d4:	9c 01       	movw	r18, r24
 2d6:	36 95       	lsr	r19
 2d8:	27 95       	ror	r18
 2da:	a5 e7       	ldi	r26, 0x75	; 117
 2dc:	ba ed       	ldi	r27, 0xDA	; 218
 2de:	eb d2       	rcall	.+1494   	; 0x8b6 <__umulhisi3>
 2e0:	00 24       	eor	r0, r0
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	00 1c       	adc	r0, r0
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	00 1c       	adc	r0, r0
 2ee:	89 2f       	mov	r24, r25
 2f0:	90 2d       	mov	r25, r0
 2f2:	82 59       	subi	r24, 0x92	; 146
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2fe:	08 95       	ret

00000300 <move_servo2>:
}

void move_servo2(uint16_t angle)
{
	
	OCR1B = (310 - 110) * angle / 150 + 110;
 300:	48 ec       	ldi	r20, 0xC8	; 200
 302:	9c 01       	movw	r18, r24
 304:	42 9f       	mul	r20, r18
 306:	c0 01       	movw	r24, r0
 308:	43 9f       	mul	r20, r19
 30a:	90 0d       	add	r25, r0
 30c:	11 24       	eor	r1, r1
 30e:	9c 01       	movw	r18, r24
 310:	36 95       	lsr	r19
 312:	27 95       	ror	r18
 314:	a5 e7       	ldi	r26, 0x75	; 117
 316:	ba ed       	ldi	r27, 0xDA	; 218
 318:	ce d2       	rcall	.+1436   	; 0x8b6 <__umulhisi3>
 31a:	00 24       	eor	r0, r0
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	00 1c       	adc	r0, r0
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	00 1c       	adc	r0, r0
 328:	89 2f       	mov	r24, r25
 32a:	90 2d       	mov	r25, r0
 32c:	82 59       	subi	r24, 0x92	; 146
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 334:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 338:	08 95       	ret

0000033a <servo_init>:
//  before you use any of the above functions
void servo_init()
{
	
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);//|(0<<CS12)|(1<<CS11)|(1<<CS10);        //NON Inverted PWM
 33a:	e0 e8       	ldi	r30, 0x80	; 128
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	82 6a       	ori	r24, 0xA2	; 162
 342:	80 83       	st	Z, r24
	//TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
	//ICR1=312;  //fPWM=50Hz (Period = 20ms Standard).
	
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(1<<CS10); //PRESCALER=8 MODE 14(FAST PWM)
 344:	e1 e8       	ldi	r30, 0x81	; 129
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	8b 61       	ori	r24, 0x1B	; 27
 34c:	80 83       	st	Z, r24
	ICR1=2499;  //fPWM=50Hz (Period = 20ms Standard).
 34e:	83 ec       	ldi	r24, 0xC3	; 195
 350:	99 e0       	ldi	r25, 0x09	; 9
 352:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 356:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	// set PWM pins as digital outputs (the PWM signals will not
	// appear on the lines if they are digital inputs)
	DDRD |= (1 << PORTD5)|(1<<PORTD4);
 35a:	8a b1       	in	r24, 0x0a	; 10
 35c:	80 63       	ori	r24, 0x30	; 48
 35e:	8a b9       	out	0x0a, r24	; 10
 360:	08 95       	ret

00000362 <full_step_forward>:
#include "servo.h"
#include "timer2.h"

uint32_t present;

void full_step_forward (int num_step) {
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
	for (int i = 0; i < num_step; ++i)
 366:	18 16       	cp	r1, r24
 368:	19 06       	cpc	r1, r25
 36a:	0c f0       	brlt	.+2      	; 0x36e <full_step_forward+0xc>
 36c:	47 c0       	rjmp	.+142    	; 0x3fc <full_step_forward+0x9a>
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTC = 0b00000100;
 372:	b4 e0       	ldi	r27, 0x04	; 4
		 		_delay_ms(DELAY);
		 		PORTC = 0b00001100;
 374:	ac e0       	ldi	r26, 0x0C	; 12
		 		_delay_ms(DELAY);
		 		PORTC = 0b00001000;
 376:	f8 e0       	ldi	r31, 0x08	; 8
		 		_delay_ms(DELAY);
		 		PORTC = 0b00011000;
 378:	e8 e1       	ldi	r30, 0x18	; 24
		 		_delay_ms(DELAY);
		 		PORTC = 0b00010000;
 37a:	70 e1       	ldi	r23, 0x10	; 16
		 		_delay_ms(DELAY);
		 		PORTC = 0b00110000;
 37c:	60 e3       	ldi	r22, 0x30	; 48
		 		_delay_ms(DELAY);
		 		PORTC = 0b00100000;
 37e:	50 e2       	ldi	r21, 0x20	; 32
		 		_delay_ms(DELAY);
				PORTC = 0b001001000;
 380:	48 e4       	ldi	r20, 0x48	; 72
uint32_t present;

void full_step_forward (int num_step) {
	for (int i = 0; i < num_step; ++i)
	{
		PORTC = 0b00000100;
 382:	b8 b9       	out	0x08, r27	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 384:	c3 ec       	ldi	r28, 0xC3	; 195
 386:	d9 e0       	ldi	r29, 0x09	; 9
 388:	21 97       	sbiw	r28, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <full_step_forward+0x26>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <full_step_forward+0x2c>
 38e:	00 00       	nop
		 		_delay_ms(DELAY);
		 		PORTC = 0b00001100;
 390:	a8 b9       	out	0x08, r26	; 8
 392:	c3 ec       	ldi	r28, 0xC3	; 195
 394:	d9 e0       	ldi	r29, 0x09	; 9
 396:	21 97       	sbiw	r28, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <full_step_forward+0x34>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <full_step_forward+0x3a>
 39c:	00 00       	nop
		 		_delay_ms(DELAY);
		 		PORTC = 0b00001000;
 39e:	f8 b9       	out	0x08, r31	; 8
 3a0:	c3 ec       	ldi	r28, 0xC3	; 195
 3a2:	d9 e0       	ldi	r29, 0x09	; 9
 3a4:	21 97       	sbiw	r28, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <full_step_forward+0x42>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <full_step_forward+0x48>
 3aa:	00 00       	nop
		 		_delay_ms(DELAY);
		 		PORTC = 0b00011000;
 3ac:	e8 b9       	out	0x08, r30	; 8
 3ae:	c3 ec       	ldi	r28, 0xC3	; 195
 3b0:	d9 e0       	ldi	r29, 0x09	; 9
 3b2:	21 97       	sbiw	r28, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <full_step_forward+0x50>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <full_step_forward+0x56>
 3b8:	00 00       	nop
		 		_delay_ms(DELAY);
		 		PORTC = 0b00010000;
 3ba:	78 b9       	out	0x08, r23	; 8
 3bc:	c3 ec       	ldi	r28, 0xC3	; 195
 3be:	d9 e0       	ldi	r29, 0x09	; 9
 3c0:	21 97       	sbiw	r28, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <full_step_forward+0x5e>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <full_step_forward+0x64>
 3c6:	00 00       	nop
		 		_delay_ms(DELAY);
		 		PORTC = 0b00110000;
 3c8:	68 b9       	out	0x08, r22	; 8
 3ca:	c3 ec       	ldi	r28, 0xC3	; 195
 3cc:	d9 e0       	ldi	r29, 0x09	; 9
 3ce:	21 97       	sbiw	r28, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <full_step_forward+0x6c>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <full_step_forward+0x72>
 3d4:	00 00       	nop
		 		_delay_ms(DELAY);
		 		PORTC = 0b00100000;
 3d6:	58 b9       	out	0x08, r21	; 8
 3d8:	c3 ec       	ldi	r28, 0xC3	; 195
 3da:	d9 e0       	ldi	r29, 0x09	; 9
 3dc:	21 97       	sbiw	r28, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <full_step_forward+0x7a>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <full_step_forward+0x80>
 3e2:	00 00       	nop
		 		_delay_ms(DELAY);
				PORTC = 0b001001000;
 3e4:	48 b9       	out	0x08, r20	; 8
 3e6:	c3 ec       	ldi	r28, 0xC3	; 195
 3e8:	d9 e0       	ldi	r29, 0x09	; 9
 3ea:	21 97       	sbiw	r28, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <full_step_forward+0x88>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <full_step_forward+0x8e>
 3f0:	00 00       	nop
#include "timer2.h"

uint32_t present;

void full_step_forward (int num_step) {
	for (int i = 0; i < num_step; ++i)
 3f2:	2f 5f       	subi	r18, 0xFF	; 255
 3f4:	3f 4f       	sbci	r19, 0xFF	; 255
 3f6:	28 17       	cp	r18, r24
 3f8:	39 07       	cpc	r19, r25
 3fa:	19 f6       	brne	.-122    	; 0x382 <full_step_forward+0x20>
		 		_delay_ms(DELAY);
				PORTC = 0b001001000;
		 		_delay_ms(DELAY);
		
	}
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <full_step_back>:
void full_step_back (int num_step) {
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
	for (int i = 0; i < num_step; ++i)
 406:	18 16       	cp	r1, r24
 408:	19 06       	cpc	r1, r25
 40a:	0c f0       	brlt	.+2      	; 0x40e <full_step_back+0xc>
 40c:	47 c0       	rjmp	.+142    	; 0x49c <full_step_back+0x9a>
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		PORTC = 0b00100100;
 412:	b4 e2       	ldi	r27, 0x24	; 36
		_delay_ms(DELAY);
		PORTC = 0b00100000;
 414:	a0 e2       	ldi	r26, 0x20	; 32
		_delay_ms(DELAY);
		PORTC = 0b00110000;
 416:	f0 e3       	ldi	r31, 0x30	; 48
		_delay_ms(DELAY);
		PORTC = 0b00010000;
 418:	e0 e1       	ldi	r30, 0x10	; 16
		_delay_ms(DELAY);
		PORTC = 0b00011000;
 41a:	78 e1       	ldi	r23, 0x18	; 24
		_delay_ms(DELAY);
		PORTC = 0b00001000;
 41c:	68 e0       	ldi	r22, 0x08	; 8
		_delay_ms(DELAY);
		PORTC = 0b00001100;
 41e:	5c e0       	ldi	r21, 0x0C	; 12
		_delay_ms(DELAY);
		PORTC = 0b00000100;
 420:	44 e0       	ldi	r20, 0x04	; 4
}
void full_step_back (int num_step) {
	for (int i = 0; i < num_step; ++i)
	{
		
		PORTC = 0b00100100;
 422:	b8 b9       	out	0x08, r27	; 8
 424:	c3 ec       	ldi	r28, 0xC3	; 195
 426:	d9 e0       	ldi	r29, 0x09	; 9
 428:	21 97       	sbiw	r28, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <full_step_back+0x26>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <full_step_back+0x2c>
 42e:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00100000;
 430:	a8 b9       	out	0x08, r26	; 8
 432:	c3 ec       	ldi	r28, 0xC3	; 195
 434:	d9 e0       	ldi	r29, 0x09	; 9
 436:	21 97       	sbiw	r28, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <full_step_back+0x34>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <full_step_back+0x3a>
 43c:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00110000;
 43e:	f8 b9       	out	0x08, r31	; 8
 440:	c3 ec       	ldi	r28, 0xC3	; 195
 442:	d9 e0       	ldi	r29, 0x09	; 9
 444:	21 97       	sbiw	r28, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <full_step_back+0x42>
 448:	00 c0       	rjmp	.+0      	; 0x44a <full_step_back+0x48>
 44a:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00010000;
 44c:	e8 b9       	out	0x08, r30	; 8
 44e:	c3 ec       	ldi	r28, 0xC3	; 195
 450:	d9 e0       	ldi	r29, 0x09	; 9
 452:	21 97       	sbiw	r28, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <full_step_back+0x50>
 456:	00 c0       	rjmp	.+0      	; 0x458 <full_step_back+0x56>
 458:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00011000;
 45a:	78 b9       	out	0x08, r23	; 8
 45c:	c3 ec       	ldi	r28, 0xC3	; 195
 45e:	d9 e0       	ldi	r29, 0x09	; 9
 460:	21 97       	sbiw	r28, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <full_step_back+0x5e>
 464:	00 c0       	rjmp	.+0      	; 0x466 <full_step_back+0x64>
 466:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00001000;
 468:	68 b9       	out	0x08, r22	; 8
 46a:	c3 ec       	ldi	r28, 0xC3	; 195
 46c:	d9 e0       	ldi	r29, 0x09	; 9
 46e:	21 97       	sbiw	r28, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <full_step_back+0x6c>
 472:	00 c0       	rjmp	.+0      	; 0x474 <full_step_back+0x72>
 474:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00001100;
 476:	58 b9       	out	0x08, r21	; 8
 478:	c3 ec       	ldi	r28, 0xC3	; 195
 47a:	d9 e0       	ldi	r29, 0x09	; 9
 47c:	21 97       	sbiw	r28, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <full_step_back+0x7a>
 480:	00 c0       	rjmp	.+0      	; 0x482 <full_step_back+0x80>
 482:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00000100;
 484:	48 b9       	out	0x08, r20	; 8
 486:	c3 ec       	ldi	r28, 0xC3	; 195
 488:	d9 e0       	ldi	r29, 0x09	; 9
 48a:	21 97       	sbiw	r28, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <full_step_back+0x88>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <full_step_back+0x8e>
 490:	00 00       	nop
		 		_delay_ms(DELAY);
		
	}
}
void full_step_back (int num_step) {
	for (int i = 0; i < num_step; ++i)
 492:	2f 5f       	subi	r18, 0xFF	; 255
 494:	3f 4f       	sbci	r19, 0xFF	; 255
 496:	28 17       	cp	r18, r24
 498:	39 07       	cpc	r19, r25
 49a:	19 f6       	brne	.-122    	; 0x422 <full_step_back+0x20>
		_delay_ms(DELAY);
		PORTC = 0b00000100;
		_delay_ms(DELAY);
		
	}
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <timer_init>:
//  before you use any of the above functions
void timer_init()
{
	//sei();
	//Configure TIMER2
	 OCR2A = 249;
 4a2:	89 ef       	ldi	r24, 0xF9	; 249
 4a4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	 TCCR2A |= (1 << WGM21);
 4a8:	e0 eb       	ldi	r30, 0xB0	; 176
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	82 60       	ori	r24, 0x02	; 2
 4b0:	80 83       	st	Z, r24
	 // Set to CTC Mode

	 TIMSK2 |= (1 << OCIE2A);
 4b2:	e0 e7       	ldi	r30, 0x70	; 112
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	82 60       	ori	r24, 0x02	; 2
 4ba:	80 83       	st	Z, r24
	 //Set interrupt on compare match

	 TCCR2B |= (1 << CS21)|(1 << CS20);
 4bc:	e1 eb       	ldi	r30, 0xB1	; 177
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	83 60       	ori	r24, 0x03	; 3
 4c4:	80 83       	st	Z, r24
	 // set prescaler to 32 and starts PWM

	 
	 // enable interrupts
	 TIFR0 &= (1<<OCF0A);
 4c6:	85 b3       	in	r24, 0x15	; 21
 4c8:	82 70       	andi	r24, 0x02	; 2
 4ca:	85 bb       	out	0x15, r24	; 21
 4cc:	08 95       	ret

000004ce <__vector_9>:


}

ISR (TIMER2_COMPA_vect)
{
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	8f 93       	push	r24
 4da:	9f 93       	push	r25
 4dc:	af 93       	push	r26
 4de:	bf 93       	push	r27
	// action to be done every 250 usec
	 //TIFR0 &= ~(1<<OCF0A);
	clock_ticks++;
 4e0:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <clock_ticks>
 4e4:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <clock_ticks+0x1>
 4e8:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <clock_ticks+0x2>
 4ec:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <clock_ticks+0x3>
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	a1 1d       	adc	r26, r1
 4f4:	b1 1d       	adc	r27, r1
 4f6:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <clock_ticks>
 4fa:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <clock_ticks+0x1>
 4fe:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <clock_ticks+0x2>
 502:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <clock_ticks+0x3>
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <forwards>:


////////////////////////////////////////////////DC motors function

void forwards(){
	 motorRfwd(0);
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	3c de       	rcall	.-904    	; 0x196 <motorRfwd>
	 motorLfwd(0);
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	50 de       	rcall	.-864    	; 0x1c4 <motorLfwd>
	 sprintf(carStatus, "Forward");
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	e0 e0       	ldi	r30, 0x00	; 0
 528:	f1 e0       	ldi	r31, 0x01	; 1
 52a:	a0 e7       	ldi	r26, 0x70	; 112
 52c:	b2 e0       	ldi	r27, 0x02	; 2
 52e:	01 90       	ld	r0, Z+
 530:	0d 92       	st	X+, r0
 532:	8a 95       	dec	r24
 534:	e1 f7       	brne	.-8      	; 0x52e <forwards+0x16>
 536:	08 95       	ret

00000538 <reverse>:
}

void reverse(){
	motorRbwd(0);
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	5c de       	rcall	.-840    	; 0x1f6 <motorRbwd>
	motorLbwd(0);
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	70 de       	rcall	.-800    	; 0x224 <motorLbwd>
	sprintf(carStatus, "Reverse");
 544:	88 e0       	ldi	r24, 0x08	; 8
 546:	e8 e0       	ldi	r30, 0x08	; 8
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	a0 e7       	ldi	r26, 0x70	; 112
 54c:	b2 e0       	ldi	r27, 0x02	; 2
 54e:	01 90       	ld	r0, Z+
 550:	0d 92       	st	X+, r0
 552:	8a 95       	dec	r24
 554:	e1 f7       	brne	.-8      	; 0x54e <reverse+0x16>
 556:	08 95       	ret

00000558 <left>:
}

void left(){
	motorRfwd(0);
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	1c de       	rcall	.-968    	; 0x196 <motorRfwd>
	motorLbwd(0);
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	60 de       	rcall	.-832    	; 0x224 <motorLbwd>
	sprintf(carStatus, "Left");
 564:	85 e0       	ldi	r24, 0x05	; 5
 566:	e0 e1       	ldi	r30, 0x10	; 16
 568:	f1 e0       	ldi	r31, 0x01	; 1
 56a:	a0 e7       	ldi	r26, 0x70	; 112
 56c:	b2 e0       	ldi	r27, 0x02	; 2
 56e:	01 90       	ld	r0, Z+
 570:	0d 92       	st	X+, r0
 572:	8a 95       	dec	r24
 574:	e1 f7       	brne	.-8      	; 0x56e <left+0x16>
 576:	08 95       	ret

00000578 <right>:
}
void right(){
	motorRbwd(0);
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	3c de       	rcall	.-904    	; 0x1f6 <motorRbwd>
	motorLfwd(0);
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	20 de       	rcall	.-960    	; 0x1c4 <motorLfwd>
	sprintf(carStatus, "Right");
 584:	86 e0       	ldi	r24, 0x06	; 6
 586:	e5 e1       	ldi	r30, 0x15	; 21
 588:	f1 e0       	ldi	r31, 0x01	; 1
 58a:	a0 e7       	ldi	r26, 0x70	; 112
 58c:	b2 e0       	ldi	r27, 0x02	; 2
 58e:	01 90       	ld	r0, Z+
 590:	0d 92       	st	X+, r0
 592:	8a 95       	dec	r24
 594:	e1 f7       	brne	.-8      	; 0x58e <right+0x16>
 596:	08 95       	ret

00000598 <stop>:
}

void stop(){
	motorL_stop();
 598:	75 de       	rcall	.-790    	; 0x284 <motorL_stop>
	motorR_stop();
 59a:	5d de       	rcall	.-838    	; 0x256 <motorR_stop>
	sprintf(carStatus, "Stopped");
 59c:	88 e0       	ldi	r24, 0x08	; 8
 59e:	eb e1       	ldi	r30, 0x1B	; 27
 5a0:	f1 e0       	ldi	r31, 0x01	; 1
 5a2:	a0 e7       	ldi	r26, 0x70	; 112
 5a4:	b2 e0       	ldi	r27, 0x02	; 2
 5a6:	01 90       	ld	r0, Z+
 5a8:	0d 92       	st	X+, r0
 5aa:	8a 95       	dec	r24
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <stop+0xe>
 5ae:	08 95       	ret

000005b0 <main>:
int main(void) {

	//Initializations

	//Initialize timer2
	timer_init();
 5b0:	78 df       	rcall	.-272    	; 0x4a2 <timer_init>
	
	//Initialize communication through bluetooth
	uart_init();
 5b2:	97 dd       	rcall	.-1234   	; 0xe2 <uart_init>
	
	//Initialize DC motors
	motor_init();
 5b4:	7e de       	rcall	.-772    	; 0x2b2 <motor_init>
	stop();
 5b6:	f0 df       	rcall	.-32     	; 0x598 <stop>
	
	//Initialize servo
	int servo1Position = 0; //position of the upper claw in degree
	int servo2Position = 0; //position of the lower claw in degree
	servo_init();
 5b8:	c0 de       	rcall	.-640    	; 0x33a <servo_init>
	move_servo1(servo1Position);
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	83 de       	rcall	.-762    	; 0x2c6 <move_servo1>
	move_servo2(servo2Position);
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	9d de       	rcall	.-710    	; 0x300 <move_servo2>
	
	n = sprintf(buffer, "Ready! \n");
 5c6:	89 e0       	ldi	r24, 0x09	; 9
 5c8:	e3 e2       	ldi	r30, 0x23	; 35
 5ca:	f1 e0       	ldi	r31, 0x01	; 1
 5cc:	ae e3       	ldi	r26, 0x3E	; 62
 5ce:	b2 e0       	ldi	r27, 0x02	; 2
 5d0:	01 90       	ld	r0, Z+
 5d2:	0d 92       	st	X+, r0
 5d4:	8a 95       	dec	r24
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <main+0x20>
 5d8:	88 e0       	ldi	r24, 0x08	; 8
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 5e0:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
	send_str(buffer);
 5e4:	8e e3       	ldi	r24, 0x3E	; 62
 5e6:	92 e0       	ldi	r25, 0x02	; 2
 5e8:	8e dd       	rcall	.-1252   	; 0x106 <send_str>
	motor_init();
	stop();
	
	//Initialize servo
	int servo1Position = 0; //position of the upper claw in degree
	int servo2Position = 0; //position of the lower claw in degree
 5ea:	00 e0       	ldi	r16, 0x00	; 0
 5ec:	10 e0       	ldi	r17, 0x00	; 0
	//Initialize DC motors
	motor_init();
	stop();
	
	//Initialize servo
	int servo1Position = 0; //position of the upper claw in degree
 5ee:	c0 e0       	ldi	r28, 0x00	; 0
 5f0:	d0 e0       	ldi	r29, 0x00	; 0
			send_str(buffer);
			break;

			case 'l':
			left();
			n = sprintf(buffer,"Car is moving to the left\n");
 5f2:	0f 2e       	mov	r0, r31
 5f4:	fb e1       	ldi	r31, 0x1B	; 27
 5f6:	4f 2e       	mov	r4, r31
 5f8:	f0 2d       	mov	r31, r0
 5fa:	0f 2e       	mov	r0, r31
 5fc:	fa e1       	ldi	r31, 0x1A	; 26
 5fe:	af 2e       	mov	r10, r31
 600:	b1 2c       	mov	r11, r1
 602:	f0 2d       	mov	r31, r0
			send_str(buffer);
			break;

			case 'm':
			reverse();
			n = sprintf(buffer,"Car is moving backwards\n");
 604:	0f 2e       	mov	r0, r31
 606:	f9 e1       	ldi	r31, 0x19	; 25
 608:	5f 2e       	mov	r5, r31
 60a:	f0 2d       	mov	r31, r0
 60c:	0f 2e       	mov	r0, r31
 60e:	f8 e1       	ldi	r31, 0x18	; 24
 610:	6f 2e       	mov	r6, r31
 612:	71 2c       	mov	r7, r1
 614:	f0 2d       	mov	r31, r0
			case 's':
			if (servo1Position > 0) {
				servo1Position -= 5;
			}
			move_servo1(servo1Position);
			n = sprintf(buffer,"Servo 1 moved to position %d*\n",
 616:	0f 2e       	mov	r0, r31
 618:	f0 e6       	ldi	r31, 0x60	; 96
 61a:	2f 2e       	mov	r2, r31
 61c:	f1 e0       	ldi	r31, 0x01	; 1
 61e:	3f 2e       	mov	r3, r31
 620:	f0 2d       	mov	r31, r0
			send_str(buffer);
			break;
	
		}

		n = sprintf(buffer, "SysSta: S1pos=%d, S2pos=%d \n", servo1Position, servo2Position);
 622:	0f 2e       	mov	r0, r31
 624:	f3 e1       	ldi	r31, 0x13	; 19
 626:	ef 2e       	mov	r14, r31
 628:	f2 e0       	ldi	r31, 0x02	; 2
 62a:	ff 2e       	mov	r15, r31
 62c:	f0 2d       	mov	r31, r0
		send_str(buffer);

		n = sprintf(buffer,"\n");
 62e:	cc 24       	eor	r12, r12
 630:	c3 94       	inc	r12
 632:	d1 2c       	mov	r13, r1
 634:	4e 01       	movw	r8, r28
	
	
	//Stay forever inside this while loop
	while (1) {
		//get the control command
		char command = get_char();
 636:	85 dd       	rcall	.-1270   	; 0x142 <get_char>


		switch (command) {
 638:	08 2e       	mov	r0, r24
 63a:	00 0c       	add	r0, r0
 63c:	99 0b       	sbc	r25, r25
 63e:	aa 0b       	sbc	r26, r26
 640:	bb 0b       	sbc	r27, r27
 642:	fc 01       	movw	r30, r24
 644:	e1 56       	subi	r30, 0x61	; 97
 646:	f1 09       	sbc	r31, r1
 648:	e7 31       	cpi	r30, 0x17	; 23
 64a:	f1 05       	cpc	r31, r1
 64c:	08 f0       	brcs	.+2      	; 0x650 <main+0xa0>
 64e:	09 c1       	rjmp	.+530    	; 0x862 <main+0x2b2>
 650:	e2 5c       	subi	r30, 0xC2	; 194
 652:	ff 4f       	sbci	r31, 0xFF	; 255
 654:	2a c1       	rjmp	.+596    	; 0x8aa <__tablejump2__>
			
			case 'q':
			full_step_forward(10);
 656:	8a e0       	ldi	r24, 0x0A	; 10
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	83 de       	rcall	.-762    	; 0x362 <full_step_forward>
			n = sprintf(buffer, "Winch moved one step up\n");
 65c:	ec e2       	ldi	r30, 0x2C	; 44
 65e:	f1 e0       	ldi	r31, 0x01	; 1
 660:	ae e3       	ldi	r26, 0x3E	; 62
 662:	b2 e0       	ldi	r27, 0x02	; 2
 664:	85 2d       	mov	r24, r5
 666:	01 90       	ld	r0, Z+
 668:	0d 92       	st	X+, r0
 66a:	8a 95       	dec	r24
 66c:	e1 f7       	brne	.-8      	; 0x666 <main+0xb6>
 66e:	70 92 3d 02 	sts	0x023D, r7	; 0x80023d <n+0x1>
 672:	60 92 3c 02 	sts	0x023C, r6	; 0x80023c <n>
			send_str(buffer);
 676:	8e e3       	ldi	r24, 0x3E	; 62
 678:	92 e0       	ldi	r25, 0x02	; 2
 67a:	45 dd       	rcall	.-1398   	; 0x106 <send_str>
			break;
 67c:	f2 c0       	rjmp	.+484    	; 0x862 <main+0x2b2>
			
			case 'a':
			full_step_back(10);
 67e:	8a e0       	ldi	r24, 0x0A	; 10
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	bf de       	rcall	.-642    	; 0x402 <full_step_back>
			n = sprintf(buffer, "Winch moved one step down\n");
 684:	e5 e4       	ldi	r30, 0x45	; 69
 686:	f1 e0       	ldi	r31, 0x01	; 1
 688:	ae e3       	ldi	r26, 0x3E	; 62
 68a:	b2 e0       	ldi	r27, 0x02	; 2
 68c:	84 2d       	mov	r24, r4
 68e:	01 90       	ld	r0, Z+
 690:	0d 92       	st	X+, r0
 692:	8a 95       	dec	r24
 694:	e1 f7       	brne	.-8      	; 0x68e <main+0xde>
 696:	b0 92 3d 02 	sts	0x023D, r11	; 0x80023d <n+0x1>
 69a:	a0 92 3c 02 	sts	0x023C, r10	; 0x80023c <n>
			send_str(buffer);
 69e:	8e e3       	ldi	r24, 0x3E	; 62
 6a0:	92 e0       	ldi	r25, 0x02	; 2
 6a2:	31 dd       	rcall	.-1438   	; 0x106 <send_str>
			break;
 6a4:	de c0       	rjmp	.+444    	; 0x862 <main+0x2b2>

			case 'w':
			if (servo1Position < 150) {
 6a6:	86 e9       	ldi	r24, 0x96	; 150
 6a8:	88 16       	cp	r8, r24
 6aa:	91 04       	cpc	r9, r1
 6ac:	1c f4       	brge	.+6      	; 0x6b4 <main+0x104>
				servo1Position += 5;
 6ae:	95 e0       	ldi	r25, 0x05	; 5
 6b0:	89 0e       	add	r8, r25
 6b2:	91 1c       	adc	r9, r1
			}
			move_servo1(servo1Position);
 6b4:	c4 01       	movw	r24, r8
 6b6:	07 de       	rcall	.-1010   	; 0x2c6 <move_servo1>
			n = sprintf(buffer,"Servo 1 moved to position %d*\n",
 6b8:	9f 92       	push	r9
 6ba:	8f 92       	push	r8
 6bc:	3f 92       	push	r3
 6be:	2f 92       	push	r2
 6c0:	8e e3       	ldi	r24, 0x3E	; 62
 6c2:	92 e0       	ldi	r25, 0x02	; 2
 6c4:	9f 93       	push	r25
 6c6:	8f 93       	push	r24
 6c8:	05 d1       	rcall	.+522    	; 0x8d4 <sprintf>
 6ca:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 6ce:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
			servo1Position);
			send_str(buffer);
 6d2:	8e e3       	ldi	r24, 0x3E	; 62
 6d4:	92 e0       	ldi	r25, 0x02	; 2
 6d6:	17 dd       	rcall	.-1490   	; 0x106 <send_str>
			break;
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	be c0       	rjmp	.+380    	; 0x862 <main+0x2b2>
			
			
			case 's':
			if (servo1Position > 0) {
 6e6:	18 14       	cp	r1, r8
 6e8:	19 04       	cpc	r1, r9
 6ea:	1c f4       	brge	.+6      	; 0x6f2 <main+0x142>
				servo1Position -= 5;
 6ec:	a5 e0       	ldi	r26, 0x05	; 5
 6ee:	8a 1a       	sub	r8, r26
 6f0:	91 08       	sbc	r9, r1
			}
			move_servo1(servo1Position);
 6f2:	c4 01       	movw	r24, r8
 6f4:	e8 dd       	rcall	.-1072   	; 0x2c6 <move_servo1>
			n = sprintf(buffer,"Servo 1 moved to position %d*\n",
 6f6:	9f 92       	push	r9
 6f8:	8f 92       	push	r8
 6fa:	3f 92       	push	r3
 6fc:	2f 92       	push	r2
 6fe:	8e e3       	ldi	r24, 0x3E	; 62
 700:	92 e0       	ldi	r25, 0x02	; 2
 702:	9f 93       	push	r25
 704:	8f 93       	push	r24
 706:	e6 d0       	rcall	.+460    	; 0x8d4 <sprintf>
 708:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 70c:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
			servo1Position);
			send_str(buffer);
 710:	8e e3       	ldi	r24, 0x3E	; 62
 712:	92 e0       	ldi	r25, 0x02	; 2
 714:	f8 dc       	rcall	.-1552   	; 0x106 <send_str>
			break;
 716:	0f 90       	pop	r0
 718:	0f 90       	pop	r0
 71a:	0f 90       	pop	r0
 71c:	0f 90       	pop	r0
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	9f c0       	rjmp	.+318    	; 0x862 <main+0x2b2>
			
			
			case 'e':
			if (servo2Position < 150) {
 724:	06 39       	cpi	r16, 0x96	; 150
 726:	11 05       	cpc	r17, r1
 728:	14 f4       	brge	.+4      	; 0x72e <main+0x17e>
				servo2Position += 5;
 72a:	0b 5f       	subi	r16, 0xFB	; 251
 72c:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			move_servo2(servo2Position);
 72e:	c8 01       	movw	r24, r16
 730:	e7 dd       	rcall	.-1074   	; 0x300 <move_servo2>
			n = sprintf(buffer,"Servo 2 moved to position %d*\n",
 732:	1f 93       	push	r17
 734:	0f 93       	push	r16
 736:	af e7       	ldi	r26, 0x7F	; 127
 738:	b1 e0       	ldi	r27, 0x01	; 1
 73a:	bf 93       	push	r27
 73c:	af 93       	push	r26
 73e:	8e e3       	ldi	r24, 0x3E	; 62
 740:	92 e0       	ldi	r25, 0x02	; 2
 742:	9f 93       	push	r25
 744:	8f 93       	push	r24
 746:	c6 d0       	rcall	.+396    	; 0x8d4 <sprintf>
 748:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 74c:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
			servo2Position);
			send_str(buffer);
 750:	8e e3       	ldi	r24, 0x3E	; 62
 752:	92 e0       	ldi	r25, 0x02	; 2
 754:	d8 dc       	rcall	.-1616   	; 0x106 <send_str>
			break;
 756:	0f 90       	pop	r0
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	7f c0       	rjmp	.+254    	; 0x862 <main+0x2b2>
			
			
			case 'd':
			if (servo2Position > 0) {
 764:	10 16       	cp	r1, r16
 766:	11 06       	cpc	r1, r17
 768:	14 f4       	brge	.+4      	; 0x76e <main+0x1be>
				servo2Position -= 5;
 76a:	05 50       	subi	r16, 0x05	; 5
 76c:	11 09       	sbc	r17, r1
			}
			move_servo2(servo2Position);
 76e:	c8 01       	movw	r24, r16
 770:	c7 dd       	rcall	.-1138   	; 0x300 <move_servo2>
			n = sprintf(buffer,"Servo 2 moved to position %d*\n",
 772:	1f 93       	push	r17
 774:	0f 93       	push	r16
 776:	af e7       	ldi	r26, 0x7F	; 127
 778:	b1 e0       	ldi	r27, 0x01	; 1
 77a:	bf 93       	push	r27
 77c:	af 93       	push	r26
 77e:	8e e3       	ldi	r24, 0x3E	; 62
 780:	92 e0       	ldi	r25, 0x02	; 2
 782:	9f 93       	push	r25
 784:	8f 93       	push	r24
 786:	a6 d0       	rcall	.+332    	; 0x8d4 <sprintf>
 788:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 78c:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
			servo2Position);
			send_str(buffer);
 790:	8e e3       	ldi	r24, 0x3E	; 62
 792:	92 e0       	ldi	r25, 0x02	; 2
 794:	b8 dc       	rcall	.-1680   	; 0x106 <send_str>
			break;
 796:	0f 90       	pop	r0
 798:	0f 90       	pop	r0
 79a:	0f 90       	pop	r0
 79c:	0f 90       	pop	r0
 79e:	0f 90       	pop	r0
 7a0:	0f 90       	pop	r0
 7a2:	5f c0       	rjmp	.+190    	; 0x862 <main+0x2b2>

			case 'i':
			forwards();
 7a4:	b9 de       	rcall	.-654    	; 0x518 <forwards>
			n = sprintf(buffer,"Car is moving forwards\n");
 7a6:	88 e1       	ldi	r24, 0x18	; 24
 7a8:	ee e9       	ldi	r30, 0x9E	; 158
 7aa:	f1 e0       	ldi	r31, 0x01	; 1
 7ac:	ae e3       	ldi	r26, 0x3E	; 62
 7ae:	b2 e0       	ldi	r27, 0x02	; 2
 7b0:	01 90       	ld	r0, Z+
 7b2:	0d 92       	st	X+, r0
 7b4:	8a 95       	dec	r24
 7b6:	e1 f7       	brne	.-8      	; 0x7b0 <main+0x200>
 7b8:	a7 e1       	ldi	r26, 0x17	; 23
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <n+0x1>
 7c0:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <n>
			send_str(buffer);
 7c4:	8e e3       	ldi	r24, 0x3E	; 62
 7c6:	92 e0       	ldi	r25, 0x02	; 2
 7c8:	9e dc       	rcall	.-1732   	; 0x106 <send_str>
			break;
 7ca:	4b c0       	rjmp	.+150    	; 0x862 <main+0x2b2>

			case 'm':
			reverse();
 7cc:	b5 de       	rcall	.-662    	; 0x538 <reverse>
			n = sprintf(buffer,"Car is moving backwards\n");
 7ce:	e6 eb       	ldi	r30, 0xB6	; 182
 7d0:	f1 e0       	ldi	r31, 0x01	; 1
 7d2:	ae e3       	ldi	r26, 0x3E	; 62
 7d4:	b2 e0       	ldi	r27, 0x02	; 2
 7d6:	85 2d       	mov	r24, r5
 7d8:	01 90       	ld	r0, Z+
 7da:	0d 92       	st	X+, r0
 7dc:	8a 95       	dec	r24
 7de:	e1 f7       	brne	.-8      	; 0x7d8 <main+0x228>
 7e0:	70 92 3d 02 	sts	0x023D, r7	; 0x80023d <n+0x1>
 7e4:	60 92 3c 02 	sts	0x023C, r6	; 0x80023c <n>
			send_str(buffer);
 7e8:	8e e3       	ldi	r24, 0x3E	; 62
 7ea:	92 e0       	ldi	r25, 0x02	; 2
 7ec:	8c dc       	rcall	.-1768   	; 0x106 <send_str>
			break;
 7ee:	39 c0       	rjmp	.+114    	; 0x862 <main+0x2b2>

			case 'j':
			right();
 7f0:	c3 de       	rcall	.-634    	; 0x578 <right>
			n = sprintf(buffer,"Car is moving to the right\n");
 7f2:	ef ec       	ldi	r30, 0xCF	; 207
 7f4:	f1 e0       	ldi	r31, 0x01	; 1
 7f6:	ae e3       	ldi	r26, 0x3E	; 62
 7f8:	b2 e0       	ldi	r27, 0x02	; 2
 7fa:	8c e1       	ldi	r24, 0x1C	; 28
 7fc:	01 90       	ld	r0, Z+
 7fe:	0d 92       	st	X+, r0
 800:	8a 95       	dec	r24
 802:	e1 f7       	brne	.-8      	; 0x7fc <main+0x24c>
 804:	8b e1       	ldi	r24, 0x1B	; 27
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 80c:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
			send_str(buffer);
 810:	8e e3       	ldi	r24, 0x3E	; 62
 812:	92 e0       	ldi	r25, 0x02	; 2
 814:	78 dc       	rcall	.-1808   	; 0x106 <send_str>
			break;
 816:	25 c0       	rjmp	.+74     	; 0x862 <main+0x2b2>

			case 'l':
			left();
 818:	9f de       	rcall	.-706    	; 0x558 <left>
			n = sprintf(buffer,"Car is moving to the left\n");
 81a:	eb ee       	ldi	r30, 0xEB	; 235
 81c:	f1 e0       	ldi	r31, 0x01	; 1
 81e:	ae e3       	ldi	r26, 0x3E	; 62
 820:	b2 e0       	ldi	r27, 0x02	; 2
 822:	84 2d       	mov	r24, r4
 824:	01 90       	ld	r0, Z+
 826:	0d 92       	st	X+, r0
 828:	8a 95       	dec	r24
 82a:	e1 f7       	brne	.-8      	; 0x824 <main+0x274>
 82c:	b0 92 3d 02 	sts	0x023D, r11	; 0x80023d <n+0x1>
 830:	a0 92 3c 02 	sts	0x023C, r10	; 0x80023c <n>
			send_str(buffer);
 834:	8e e3       	ldi	r24, 0x3E	; 62
 836:	92 e0       	ldi	r25, 0x02	; 2
 838:	66 dc       	rcall	.-1844   	; 0x106 <send_str>
			break;
 83a:	13 c0       	rjmp	.+38     	; 0x862 <main+0x2b2>

			case 'k':
			stop();
 83c:	ad de       	rcall	.-678    	; 0x598 <stop>
			n = sprintf(buffer,"Car stopped\n");
 83e:	e6 e0       	ldi	r30, 0x06	; 6
 840:	f2 e0       	ldi	r31, 0x02	; 2
 842:	ae e3       	ldi	r26, 0x3E	; 62
 844:	b2 e0       	ldi	r27, 0x02	; 2
 846:	8d e0       	ldi	r24, 0x0D	; 13
 848:	01 90       	ld	r0, Z+
 84a:	0d 92       	st	X+, r0
 84c:	8a 95       	dec	r24
 84e:	e1 f7       	brne	.-8      	; 0x848 <main+0x298>
 850:	ac e0       	ldi	r26, 0x0C	; 12
 852:	b0 e0       	ldi	r27, 0x00	; 0
 854:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <n+0x1>
 858:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <n>
			send_str(buffer);
 85c:	8e e3       	ldi	r24, 0x3E	; 62
 85e:	92 e0       	ldi	r25, 0x02	; 2
 860:	52 dc       	rcall	.-1884   	; 0x106 <send_str>
			break;
	
		}

		n = sprintf(buffer, "SysSta: S1pos=%d, S2pos=%d \n", servo1Position, servo2Position);
 862:	1f 93       	push	r17
 864:	0f 93       	push	r16
 866:	9f 92       	push	r9
 868:	8f 92       	push	r8
 86a:	ff 92       	push	r15
 86c:	ef 92       	push	r14
 86e:	ce e3       	ldi	r28, 0x3E	; 62
 870:	d2 e0       	ldi	r29, 0x02	; 2
 872:	df 93       	push	r29
 874:	cf 93       	push	r28
 876:	2e d0       	rcall	.+92     	; 0x8d4 <sprintf>
 878:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 87c:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
		send_str(buffer);
 880:	ce 01       	movw	r24, r28
 882:	41 dc       	rcall	.-1918   	; 0x106 <send_str>

		n = sprintf(buffer,"\n");
 884:	8a e0       	ldi	r24, 0x0A	; 10
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	99 83       	std	Y+1, r25	; 0x01
 88a:	88 83       	st	Y, r24
 88c:	d0 92 3d 02 	sts	0x023D, r13	; 0x80023d <n+0x1>
 890:	c0 92 3c 02 	sts	0x023C, r12	; 0x80023c <n>
		send_str(buffer);
 894:	ce 01       	movw	r24, r28
 896:	37 dc       	rcall	.-1938   	; 0x106 <send_str>

	}
 898:	ad b7       	in	r26, 0x3d	; 61
 89a:	be b7       	in	r27, 0x3e	; 62
 89c:	18 96       	adiw	r26, 0x08	; 8
 89e:	0f b6       	in	r0, 0x3f	; 63
 8a0:	f8 94       	cli
 8a2:	be bf       	out	0x3e, r27	; 62
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	ad bf       	out	0x3d, r26	; 61
 8a8:	c6 ce       	rjmp	.-628    	; 0x636 <main+0x86>

000008aa <__tablejump2__>:
 8aa:	ee 0f       	add	r30, r30
 8ac:	ff 1f       	adc	r31, r31
 8ae:	05 90       	lpm	r0, Z+
 8b0:	f4 91       	lpm	r31, Z
 8b2:	e0 2d       	mov	r30, r0
 8b4:	09 94       	ijmp

000008b6 <__umulhisi3>:
 8b6:	a2 9f       	mul	r26, r18
 8b8:	b0 01       	movw	r22, r0
 8ba:	b3 9f       	mul	r27, r19
 8bc:	c0 01       	movw	r24, r0
 8be:	a3 9f       	mul	r26, r19
 8c0:	70 0d       	add	r23, r0
 8c2:	81 1d       	adc	r24, r1
 8c4:	11 24       	eor	r1, r1
 8c6:	91 1d       	adc	r25, r1
 8c8:	b2 9f       	mul	r27, r18
 8ca:	70 0d       	add	r23, r0
 8cc:	81 1d       	adc	r24, r1
 8ce:	11 24       	eor	r1, r1
 8d0:	91 1d       	adc	r25, r1
 8d2:	08 95       	ret

000008d4 <sprintf>:
 8d4:	ae e0       	ldi	r26, 0x0E	; 14
 8d6:	b0 e0       	ldi	r27, 0x00	; 0
 8d8:	ef e6       	ldi	r30, 0x6F	; 111
 8da:	f4 e0       	ldi	r31, 0x04	; 4
 8dc:	98 c2       	rjmp	.+1328   	; 0xe0e <__prologue_saves__+0x1c>
 8de:	0d 89       	ldd	r16, Y+21	; 0x15
 8e0:	1e 89       	ldd	r17, Y+22	; 0x16
 8e2:	86 e0       	ldi	r24, 0x06	; 6
 8e4:	8c 83       	std	Y+4, r24	; 0x04
 8e6:	1a 83       	std	Y+2, r17	; 0x02
 8e8:	09 83       	std	Y+1, r16	; 0x01
 8ea:	8f ef       	ldi	r24, 0xFF	; 255
 8ec:	9f e7       	ldi	r25, 0x7F	; 127
 8ee:	9e 83       	std	Y+6, r25	; 0x06
 8f0:	8d 83       	std	Y+5, r24	; 0x05
 8f2:	ae 01       	movw	r20, r28
 8f4:	47 5e       	subi	r20, 0xE7	; 231
 8f6:	5f 4f       	sbci	r21, 0xFF	; 255
 8f8:	6f 89       	ldd	r22, Y+23	; 0x17
 8fa:	78 8d       	ldd	r23, Y+24	; 0x18
 8fc:	ce 01       	movw	r24, r28
 8fe:	01 96       	adiw	r24, 0x01	; 1
 900:	09 d0       	rcall	.+18     	; 0x914 <vfprintf>
 902:	2f 81       	ldd	r18, Y+7	; 0x07
 904:	38 85       	ldd	r19, Y+8	; 0x08
 906:	f8 01       	movw	r30, r16
 908:	e2 0f       	add	r30, r18
 90a:	f3 1f       	adc	r31, r19
 90c:	10 82       	st	Z, r1
 90e:	2e 96       	adiw	r28, 0x0e	; 14
 910:	e4 e0       	ldi	r30, 0x04	; 4
 912:	99 c2       	rjmp	.+1330   	; 0xe46 <__epilogue_restores__+0x1c>

00000914 <vfprintf>:
 914:	ac e0       	ldi	r26, 0x0C	; 12
 916:	b0 e0       	ldi	r27, 0x00	; 0
 918:	ef e8       	ldi	r30, 0x8F	; 143
 91a:	f4 e0       	ldi	r31, 0x04	; 4
 91c:	6a c2       	rjmp	.+1236   	; 0xdf2 <__prologue_saves__>
 91e:	7c 01       	movw	r14, r24
 920:	6b 01       	movw	r12, r22
 922:	8a 01       	movw	r16, r20
 924:	fc 01       	movw	r30, r24
 926:	17 82       	std	Z+7, r1	; 0x07
 928:	16 82       	std	Z+6, r1	; 0x06
 92a:	83 81       	ldd	r24, Z+3	; 0x03
 92c:	81 ff       	sbrs	r24, 1
 92e:	b0 c1       	rjmp	.+864    	; 0xc90 <vfprintf+0x37c>
 930:	ce 01       	movw	r24, r28
 932:	01 96       	adiw	r24, 0x01	; 1
 934:	4c 01       	movw	r8, r24
 936:	f7 01       	movw	r30, r14
 938:	93 81       	ldd	r25, Z+3	; 0x03
 93a:	f6 01       	movw	r30, r12
 93c:	93 fd       	sbrc	r25, 3
 93e:	85 91       	lpm	r24, Z+
 940:	93 ff       	sbrs	r25, 3
 942:	81 91       	ld	r24, Z+
 944:	6f 01       	movw	r12, r30
 946:	88 23       	and	r24, r24
 948:	09 f4       	brne	.+2      	; 0x94c <vfprintf+0x38>
 94a:	9e c1       	rjmp	.+828    	; 0xc88 <vfprintf+0x374>
 94c:	85 32       	cpi	r24, 0x25	; 37
 94e:	39 f4       	brne	.+14     	; 0x95e <vfprintf+0x4a>
 950:	93 fd       	sbrc	r25, 3
 952:	85 91       	lpm	r24, Z+
 954:	93 ff       	sbrs	r25, 3
 956:	81 91       	ld	r24, Z+
 958:	6f 01       	movw	r12, r30
 95a:	85 32       	cpi	r24, 0x25	; 37
 95c:	21 f4       	brne	.+8      	; 0x966 <vfprintf+0x52>
 95e:	b7 01       	movw	r22, r14
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	b1 d1       	rcall	.+866    	; 0xcc6 <fputc>
 964:	e8 cf       	rjmp	.-48     	; 0x936 <vfprintf+0x22>
 966:	51 2c       	mov	r5, r1
 968:	31 2c       	mov	r3, r1
 96a:	20 e0       	ldi	r18, 0x00	; 0
 96c:	20 32       	cpi	r18, 0x20	; 32
 96e:	a0 f4       	brcc	.+40     	; 0x998 <vfprintf+0x84>
 970:	8b 32       	cpi	r24, 0x2B	; 43
 972:	69 f0       	breq	.+26     	; 0x98e <vfprintf+0x7a>
 974:	30 f4       	brcc	.+12     	; 0x982 <vfprintf+0x6e>
 976:	80 32       	cpi	r24, 0x20	; 32
 978:	59 f0       	breq	.+22     	; 0x990 <vfprintf+0x7c>
 97a:	83 32       	cpi	r24, 0x23	; 35
 97c:	69 f4       	brne	.+26     	; 0x998 <vfprintf+0x84>
 97e:	20 61       	ori	r18, 0x10	; 16
 980:	2c c0       	rjmp	.+88     	; 0x9da <vfprintf+0xc6>
 982:	8d 32       	cpi	r24, 0x2D	; 45
 984:	39 f0       	breq	.+14     	; 0x994 <vfprintf+0x80>
 986:	80 33       	cpi	r24, 0x30	; 48
 988:	39 f4       	brne	.+14     	; 0x998 <vfprintf+0x84>
 98a:	21 60       	ori	r18, 0x01	; 1
 98c:	26 c0       	rjmp	.+76     	; 0x9da <vfprintf+0xc6>
 98e:	22 60       	ori	r18, 0x02	; 2
 990:	24 60       	ori	r18, 0x04	; 4
 992:	23 c0       	rjmp	.+70     	; 0x9da <vfprintf+0xc6>
 994:	28 60       	ori	r18, 0x08	; 8
 996:	21 c0       	rjmp	.+66     	; 0x9da <vfprintf+0xc6>
 998:	27 fd       	sbrc	r18, 7
 99a:	27 c0       	rjmp	.+78     	; 0x9ea <vfprintf+0xd6>
 99c:	30 ed       	ldi	r19, 0xD0	; 208
 99e:	38 0f       	add	r19, r24
 9a0:	3a 30       	cpi	r19, 0x0A	; 10
 9a2:	78 f4       	brcc	.+30     	; 0x9c2 <vfprintf+0xae>
 9a4:	26 ff       	sbrs	r18, 6
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <vfprintf+0xa0>
 9a8:	fa e0       	ldi	r31, 0x0A	; 10
 9aa:	5f 9e       	mul	r5, r31
 9ac:	30 0d       	add	r19, r0
 9ae:	11 24       	eor	r1, r1
 9b0:	53 2e       	mov	r5, r19
 9b2:	13 c0       	rjmp	.+38     	; 0x9da <vfprintf+0xc6>
 9b4:	8a e0       	ldi	r24, 0x0A	; 10
 9b6:	38 9e       	mul	r3, r24
 9b8:	30 0d       	add	r19, r0
 9ba:	11 24       	eor	r1, r1
 9bc:	33 2e       	mov	r3, r19
 9be:	20 62       	ori	r18, 0x20	; 32
 9c0:	0c c0       	rjmp	.+24     	; 0x9da <vfprintf+0xc6>
 9c2:	8e 32       	cpi	r24, 0x2E	; 46
 9c4:	21 f4       	brne	.+8      	; 0x9ce <vfprintf+0xba>
 9c6:	26 fd       	sbrc	r18, 6
 9c8:	5f c1       	rjmp	.+702    	; 0xc88 <vfprintf+0x374>
 9ca:	20 64       	ori	r18, 0x40	; 64
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <vfprintf+0xc6>
 9ce:	8c 36       	cpi	r24, 0x6C	; 108
 9d0:	11 f4       	brne	.+4      	; 0x9d6 <vfprintf+0xc2>
 9d2:	20 68       	ori	r18, 0x80	; 128
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <vfprintf+0xc6>
 9d6:	88 36       	cpi	r24, 0x68	; 104
 9d8:	41 f4       	brne	.+16     	; 0x9ea <vfprintf+0xd6>
 9da:	f6 01       	movw	r30, r12
 9dc:	93 fd       	sbrc	r25, 3
 9de:	85 91       	lpm	r24, Z+
 9e0:	93 ff       	sbrs	r25, 3
 9e2:	81 91       	ld	r24, Z+
 9e4:	6f 01       	movw	r12, r30
 9e6:	81 11       	cpse	r24, r1
 9e8:	c1 cf       	rjmp	.-126    	; 0x96c <vfprintf+0x58>
 9ea:	98 2f       	mov	r25, r24
 9ec:	9f 7d       	andi	r25, 0xDF	; 223
 9ee:	95 54       	subi	r25, 0x45	; 69
 9f0:	93 30       	cpi	r25, 0x03	; 3
 9f2:	28 f4       	brcc	.+10     	; 0x9fe <vfprintf+0xea>
 9f4:	0c 5f       	subi	r16, 0xFC	; 252
 9f6:	1f 4f       	sbci	r17, 0xFF	; 255
 9f8:	ff e3       	ldi	r31, 0x3F	; 63
 9fa:	f9 83       	std	Y+1, r31	; 0x01
 9fc:	0d c0       	rjmp	.+26     	; 0xa18 <vfprintf+0x104>
 9fe:	83 36       	cpi	r24, 0x63	; 99
 a00:	31 f0       	breq	.+12     	; 0xa0e <vfprintf+0xfa>
 a02:	83 37       	cpi	r24, 0x73	; 115
 a04:	71 f0       	breq	.+28     	; 0xa22 <vfprintf+0x10e>
 a06:	83 35       	cpi	r24, 0x53	; 83
 a08:	09 f0       	breq	.+2      	; 0xa0c <vfprintf+0xf8>
 a0a:	57 c0       	rjmp	.+174    	; 0xaba <vfprintf+0x1a6>
 a0c:	21 c0       	rjmp	.+66     	; 0xa50 <vfprintf+0x13c>
 a0e:	f8 01       	movw	r30, r16
 a10:	80 81       	ld	r24, Z
 a12:	89 83       	std	Y+1, r24	; 0x01
 a14:	0e 5f       	subi	r16, 0xFE	; 254
 a16:	1f 4f       	sbci	r17, 0xFF	; 255
 a18:	44 24       	eor	r4, r4
 a1a:	43 94       	inc	r4
 a1c:	51 2c       	mov	r5, r1
 a1e:	54 01       	movw	r10, r8
 a20:	14 c0       	rjmp	.+40     	; 0xa4a <vfprintf+0x136>
 a22:	38 01       	movw	r6, r16
 a24:	f2 e0       	ldi	r31, 0x02	; 2
 a26:	6f 0e       	add	r6, r31
 a28:	71 1c       	adc	r7, r1
 a2a:	f8 01       	movw	r30, r16
 a2c:	a0 80       	ld	r10, Z
 a2e:	b1 80       	ldd	r11, Z+1	; 0x01
 a30:	26 ff       	sbrs	r18, 6
 a32:	03 c0       	rjmp	.+6      	; 0xa3a <vfprintf+0x126>
 a34:	65 2d       	mov	r22, r5
 a36:	70 e0       	ldi	r23, 0x00	; 0
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <vfprintf+0x12a>
 a3a:	6f ef       	ldi	r22, 0xFF	; 255
 a3c:	7f ef       	ldi	r23, 0xFF	; 255
 a3e:	c5 01       	movw	r24, r10
 a40:	2c 87       	std	Y+12, r18	; 0x0c
 a42:	36 d1       	rcall	.+620    	; 0xcb0 <strnlen>
 a44:	2c 01       	movw	r4, r24
 a46:	83 01       	movw	r16, r6
 a48:	2c 85       	ldd	r18, Y+12	; 0x0c
 a4a:	2f 77       	andi	r18, 0x7F	; 127
 a4c:	22 2e       	mov	r2, r18
 a4e:	16 c0       	rjmp	.+44     	; 0xa7c <vfprintf+0x168>
 a50:	38 01       	movw	r6, r16
 a52:	f2 e0       	ldi	r31, 0x02	; 2
 a54:	6f 0e       	add	r6, r31
 a56:	71 1c       	adc	r7, r1
 a58:	f8 01       	movw	r30, r16
 a5a:	a0 80       	ld	r10, Z
 a5c:	b1 80       	ldd	r11, Z+1	; 0x01
 a5e:	26 ff       	sbrs	r18, 6
 a60:	03 c0       	rjmp	.+6      	; 0xa68 <vfprintf+0x154>
 a62:	65 2d       	mov	r22, r5
 a64:	70 e0       	ldi	r23, 0x00	; 0
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <vfprintf+0x158>
 a68:	6f ef       	ldi	r22, 0xFF	; 255
 a6a:	7f ef       	ldi	r23, 0xFF	; 255
 a6c:	c5 01       	movw	r24, r10
 a6e:	2c 87       	std	Y+12, r18	; 0x0c
 a70:	14 d1       	rcall	.+552    	; 0xc9a <strnlen_P>
 a72:	2c 01       	movw	r4, r24
 a74:	2c 85       	ldd	r18, Y+12	; 0x0c
 a76:	20 68       	ori	r18, 0x80	; 128
 a78:	22 2e       	mov	r2, r18
 a7a:	83 01       	movw	r16, r6
 a7c:	23 fc       	sbrc	r2, 3
 a7e:	19 c0       	rjmp	.+50     	; 0xab2 <vfprintf+0x19e>
 a80:	83 2d       	mov	r24, r3
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	48 16       	cp	r4, r24
 a86:	59 06       	cpc	r5, r25
 a88:	a0 f4       	brcc	.+40     	; 0xab2 <vfprintf+0x19e>
 a8a:	b7 01       	movw	r22, r14
 a8c:	80 e2       	ldi	r24, 0x20	; 32
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	1a d1       	rcall	.+564    	; 0xcc6 <fputc>
 a92:	3a 94       	dec	r3
 a94:	f5 cf       	rjmp	.-22     	; 0xa80 <vfprintf+0x16c>
 a96:	f5 01       	movw	r30, r10
 a98:	27 fc       	sbrc	r2, 7
 a9a:	85 91       	lpm	r24, Z+
 a9c:	27 fe       	sbrs	r2, 7
 a9e:	81 91       	ld	r24, Z+
 aa0:	5f 01       	movw	r10, r30
 aa2:	b7 01       	movw	r22, r14
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0f d1       	rcall	.+542    	; 0xcc6 <fputc>
 aa8:	31 10       	cpse	r3, r1
 aaa:	3a 94       	dec	r3
 aac:	f1 e0       	ldi	r31, 0x01	; 1
 aae:	4f 1a       	sub	r4, r31
 ab0:	51 08       	sbc	r5, r1
 ab2:	41 14       	cp	r4, r1
 ab4:	51 04       	cpc	r5, r1
 ab6:	79 f7       	brne	.-34     	; 0xa96 <vfprintf+0x182>
 ab8:	de c0       	rjmp	.+444    	; 0xc76 <vfprintf+0x362>
 aba:	84 36       	cpi	r24, 0x64	; 100
 abc:	11 f0       	breq	.+4      	; 0xac2 <vfprintf+0x1ae>
 abe:	89 36       	cpi	r24, 0x69	; 105
 ac0:	31 f5       	brne	.+76     	; 0xb0e <vfprintf+0x1fa>
 ac2:	f8 01       	movw	r30, r16
 ac4:	27 ff       	sbrs	r18, 7
 ac6:	07 c0       	rjmp	.+14     	; 0xad6 <vfprintf+0x1c2>
 ac8:	60 81       	ld	r22, Z
 aca:	71 81       	ldd	r23, Z+1	; 0x01
 acc:	82 81       	ldd	r24, Z+2	; 0x02
 ace:	93 81       	ldd	r25, Z+3	; 0x03
 ad0:	0c 5f       	subi	r16, 0xFC	; 252
 ad2:	1f 4f       	sbci	r17, 0xFF	; 255
 ad4:	08 c0       	rjmp	.+16     	; 0xae6 <vfprintf+0x1d2>
 ad6:	60 81       	ld	r22, Z
 ad8:	71 81       	ldd	r23, Z+1	; 0x01
 ada:	07 2e       	mov	r0, r23
 adc:	00 0c       	add	r0, r0
 ade:	88 0b       	sbc	r24, r24
 ae0:	99 0b       	sbc	r25, r25
 ae2:	0e 5f       	subi	r16, 0xFE	; 254
 ae4:	1f 4f       	sbci	r17, 0xFF	; 255
 ae6:	2f 76       	andi	r18, 0x6F	; 111
 ae8:	72 2e       	mov	r7, r18
 aea:	97 ff       	sbrs	r25, 7
 aec:	09 c0       	rjmp	.+18     	; 0xb00 <vfprintf+0x1ec>
 aee:	90 95       	com	r25
 af0:	80 95       	com	r24
 af2:	70 95       	com	r23
 af4:	61 95       	neg	r22
 af6:	7f 4f       	sbci	r23, 0xFF	; 255
 af8:	8f 4f       	sbci	r24, 0xFF	; 255
 afa:	9f 4f       	sbci	r25, 0xFF	; 255
 afc:	20 68       	ori	r18, 0x80	; 128
 afe:	72 2e       	mov	r7, r18
 b00:	2a e0       	ldi	r18, 0x0A	; 10
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	a4 01       	movw	r20, r8
 b06:	17 d1       	rcall	.+558    	; 0xd36 <__ultoa_invert>
 b08:	a8 2e       	mov	r10, r24
 b0a:	a8 18       	sub	r10, r8
 b0c:	43 c0       	rjmp	.+134    	; 0xb94 <vfprintf+0x280>
 b0e:	85 37       	cpi	r24, 0x75	; 117
 b10:	29 f4       	brne	.+10     	; 0xb1c <vfprintf+0x208>
 b12:	2f 7e       	andi	r18, 0xEF	; 239
 b14:	b2 2e       	mov	r11, r18
 b16:	2a e0       	ldi	r18, 0x0A	; 10
 b18:	30 e0       	ldi	r19, 0x00	; 0
 b1a:	25 c0       	rjmp	.+74     	; 0xb66 <vfprintf+0x252>
 b1c:	f2 2f       	mov	r31, r18
 b1e:	f9 7f       	andi	r31, 0xF9	; 249
 b20:	bf 2e       	mov	r11, r31
 b22:	8f 36       	cpi	r24, 0x6F	; 111
 b24:	c1 f0       	breq	.+48     	; 0xb56 <vfprintf+0x242>
 b26:	18 f4       	brcc	.+6      	; 0xb2e <vfprintf+0x21a>
 b28:	88 35       	cpi	r24, 0x58	; 88
 b2a:	79 f0       	breq	.+30     	; 0xb4a <vfprintf+0x236>
 b2c:	ad c0       	rjmp	.+346    	; 0xc88 <vfprintf+0x374>
 b2e:	80 37       	cpi	r24, 0x70	; 112
 b30:	19 f0       	breq	.+6      	; 0xb38 <vfprintf+0x224>
 b32:	88 37       	cpi	r24, 0x78	; 120
 b34:	21 f0       	breq	.+8      	; 0xb3e <vfprintf+0x22a>
 b36:	a8 c0       	rjmp	.+336    	; 0xc88 <vfprintf+0x374>
 b38:	2f 2f       	mov	r18, r31
 b3a:	20 61       	ori	r18, 0x10	; 16
 b3c:	b2 2e       	mov	r11, r18
 b3e:	b4 fe       	sbrs	r11, 4
 b40:	0d c0       	rjmp	.+26     	; 0xb5c <vfprintf+0x248>
 b42:	8b 2d       	mov	r24, r11
 b44:	84 60       	ori	r24, 0x04	; 4
 b46:	b8 2e       	mov	r11, r24
 b48:	09 c0       	rjmp	.+18     	; 0xb5c <vfprintf+0x248>
 b4a:	24 ff       	sbrs	r18, 4
 b4c:	0a c0       	rjmp	.+20     	; 0xb62 <vfprintf+0x24e>
 b4e:	9f 2f       	mov	r25, r31
 b50:	96 60       	ori	r25, 0x06	; 6
 b52:	b9 2e       	mov	r11, r25
 b54:	06 c0       	rjmp	.+12     	; 0xb62 <vfprintf+0x24e>
 b56:	28 e0       	ldi	r18, 0x08	; 8
 b58:	30 e0       	ldi	r19, 0x00	; 0
 b5a:	05 c0       	rjmp	.+10     	; 0xb66 <vfprintf+0x252>
 b5c:	20 e1       	ldi	r18, 0x10	; 16
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <vfprintf+0x252>
 b62:	20 e1       	ldi	r18, 0x10	; 16
 b64:	32 e0       	ldi	r19, 0x02	; 2
 b66:	f8 01       	movw	r30, r16
 b68:	b7 fe       	sbrs	r11, 7
 b6a:	07 c0       	rjmp	.+14     	; 0xb7a <vfprintf+0x266>
 b6c:	60 81       	ld	r22, Z
 b6e:	71 81       	ldd	r23, Z+1	; 0x01
 b70:	82 81       	ldd	r24, Z+2	; 0x02
 b72:	93 81       	ldd	r25, Z+3	; 0x03
 b74:	0c 5f       	subi	r16, 0xFC	; 252
 b76:	1f 4f       	sbci	r17, 0xFF	; 255
 b78:	06 c0       	rjmp	.+12     	; 0xb86 <vfprintf+0x272>
 b7a:	60 81       	ld	r22, Z
 b7c:	71 81       	ldd	r23, Z+1	; 0x01
 b7e:	80 e0       	ldi	r24, 0x00	; 0
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	0e 5f       	subi	r16, 0xFE	; 254
 b84:	1f 4f       	sbci	r17, 0xFF	; 255
 b86:	a4 01       	movw	r20, r8
 b88:	d6 d0       	rcall	.+428    	; 0xd36 <__ultoa_invert>
 b8a:	a8 2e       	mov	r10, r24
 b8c:	a8 18       	sub	r10, r8
 b8e:	fb 2d       	mov	r31, r11
 b90:	ff 77       	andi	r31, 0x7F	; 127
 b92:	7f 2e       	mov	r7, r31
 b94:	76 fe       	sbrs	r7, 6
 b96:	0b c0       	rjmp	.+22     	; 0xbae <vfprintf+0x29a>
 b98:	37 2d       	mov	r19, r7
 b9a:	3e 7f       	andi	r19, 0xFE	; 254
 b9c:	a5 14       	cp	r10, r5
 b9e:	50 f4       	brcc	.+20     	; 0xbb4 <vfprintf+0x2a0>
 ba0:	74 fe       	sbrs	r7, 4
 ba2:	0a c0       	rjmp	.+20     	; 0xbb8 <vfprintf+0x2a4>
 ba4:	72 fc       	sbrc	r7, 2
 ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <vfprintf+0x2a4>
 ba8:	37 2d       	mov	r19, r7
 baa:	3e 7e       	andi	r19, 0xEE	; 238
 bac:	05 c0       	rjmp	.+10     	; 0xbb8 <vfprintf+0x2a4>
 bae:	ba 2c       	mov	r11, r10
 bb0:	37 2d       	mov	r19, r7
 bb2:	03 c0       	rjmp	.+6      	; 0xbba <vfprintf+0x2a6>
 bb4:	ba 2c       	mov	r11, r10
 bb6:	01 c0       	rjmp	.+2      	; 0xbba <vfprintf+0x2a6>
 bb8:	b5 2c       	mov	r11, r5
 bba:	34 ff       	sbrs	r19, 4
 bbc:	0d c0       	rjmp	.+26     	; 0xbd8 <vfprintf+0x2c4>
 bbe:	fe 01       	movw	r30, r28
 bc0:	ea 0d       	add	r30, r10
 bc2:	f1 1d       	adc	r31, r1
 bc4:	80 81       	ld	r24, Z
 bc6:	80 33       	cpi	r24, 0x30	; 48
 bc8:	11 f4       	brne	.+4      	; 0xbce <vfprintf+0x2ba>
 bca:	39 7e       	andi	r19, 0xE9	; 233
 bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <vfprintf+0x2cc>
 bce:	32 ff       	sbrs	r19, 2
 bd0:	06 c0       	rjmp	.+12     	; 0xbde <vfprintf+0x2ca>
 bd2:	b3 94       	inc	r11
 bd4:	b3 94       	inc	r11
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <vfprintf+0x2cc>
 bd8:	83 2f       	mov	r24, r19
 bda:	86 78       	andi	r24, 0x86	; 134
 bdc:	09 f0       	breq	.+2      	; 0xbe0 <vfprintf+0x2cc>
 bde:	b3 94       	inc	r11
 be0:	33 fd       	sbrc	r19, 3
 be2:	12 c0       	rjmp	.+36     	; 0xc08 <vfprintf+0x2f4>
 be4:	30 ff       	sbrs	r19, 0
 be6:	06 c0       	rjmp	.+12     	; 0xbf4 <vfprintf+0x2e0>
 be8:	5a 2c       	mov	r5, r10
 bea:	b3 14       	cp	r11, r3
 bec:	18 f4       	brcc	.+6      	; 0xbf4 <vfprintf+0x2e0>
 bee:	53 0c       	add	r5, r3
 bf0:	5b 18       	sub	r5, r11
 bf2:	b3 2c       	mov	r11, r3
 bf4:	b3 14       	cp	r11, r3
 bf6:	60 f4       	brcc	.+24     	; 0xc10 <vfprintf+0x2fc>
 bf8:	b7 01       	movw	r22, r14
 bfa:	80 e2       	ldi	r24, 0x20	; 32
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	3c 87       	std	Y+12, r19	; 0x0c
 c00:	62 d0       	rcall	.+196    	; 0xcc6 <fputc>
 c02:	b3 94       	inc	r11
 c04:	3c 85       	ldd	r19, Y+12	; 0x0c
 c06:	f6 cf       	rjmp	.-20     	; 0xbf4 <vfprintf+0x2e0>
 c08:	b3 14       	cp	r11, r3
 c0a:	10 f4       	brcc	.+4      	; 0xc10 <vfprintf+0x2fc>
 c0c:	3b 18       	sub	r3, r11
 c0e:	01 c0       	rjmp	.+2      	; 0xc12 <vfprintf+0x2fe>
 c10:	31 2c       	mov	r3, r1
 c12:	34 ff       	sbrs	r19, 4
 c14:	11 c0       	rjmp	.+34     	; 0xc38 <vfprintf+0x324>
 c16:	b7 01       	movw	r22, r14
 c18:	80 e3       	ldi	r24, 0x30	; 48
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	3c 87       	std	Y+12, r19	; 0x0c
 c1e:	53 d0       	rcall	.+166    	; 0xcc6 <fputc>
 c20:	3c 85       	ldd	r19, Y+12	; 0x0c
 c22:	32 ff       	sbrs	r19, 2
 c24:	16 c0       	rjmp	.+44     	; 0xc52 <vfprintf+0x33e>
 c26:	31 fd       	sbrc	r19, 1
 c28:	03 c0       	rjmp	.+6      	; 0xc30 <vfprintf+0x31c>
 c2a:	88 e7       	ldi	r24, 0x78	; 120
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	02 c0       	rjmp	.+4      	; 0xc34 <vfprintf+0x320>
 c30:	88 e5       	ldi	r24, 0x58	; 88
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	b7 01       	movw	r22, r14
 c36:	0c c0       	rjmp	.+24     	; 0xc50 <vfprintf+0x33c>
 c38:	83 2f       	mov	r24, r19
 c3a:	86 78       	andi	r24, 0x86	; 134
 c3c:	51 f0       	breq	.+20     	; 0xc52 <vfprintf+0x33e>
 c3e:	31 ff       	sbrs	r19, 1
 c40:	02 c0       	rjmp	.+4      	; 0xc46 <vfprintf+0x332>
 c42:	8b e2       	ldi	r24, 0x2B	; 43
 c44:	01 c0       	rjmp	.+2      	; 0xc48 <vfprintf+0x334>
 c46:	80 e2       	ldi	r24, 0x20	; 32
 c48:	37 fd       	sbrc	r19, 7
 c4a:	8d e2       	ldi	r24, 0x2D	; 45
 c4c:	b7 01       	movw	r22, r14
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	3a d0       	rcall	.+116    	; 0xcc6 <fputc>
 c52:	a5 14       	cp	r10, r5
 c54:	30 f4       	brcc	.+12     	; 0xc62 <vfprintf+0x34e>
 c56:	b7 01       	movw	r22, r14
 c58:	80 e3       	ldi	r24, 0x30	; 48
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	34 d0       	rcall	.+104    	; 0xcc6 <fputc>
 c5e:	5a 94       	dec	r5
 c60:	f8 cf       	rjmp	.-16     	; 0xc52 <vfprintf+0x33e>
 c62:	aa 94       	dec	r10
 c64:	f4 01       	movw	r30, r8
 c66:	ea 0d       	add	r30, r10
 c68:	f1 1d       	adc	r31, r1
 c6a:	80 81       	ld	r24, Z
 c6c:	b7 01       	movw	r22, r14
 c6e:	90 e0       	ldi	r25, 0x00	; 0
 c70:	2a d0       	rcall	.+84     	; 0xcc6 <fputc>
 c72:	a1 10       	cpse	r10, r1
 c74:	f6 cf       	rjmp	.-20     	; 0xc62 <vfprintf+0x34e>
 c76:	33 20       	and	r3, r3
 c78:	09 f4       	brne	.+2      	; 0xc7c <vfprintf+0x368>
 c7a:	5d ce       	rjmp	.-838    	; 0x936 <vfprintf+0x22>
 c7c:	b7 01       	movw	r22, r14
 c7e:	80 e2       	ldi	r24, 0x20	; 32
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	21 d0       	rcall	.+66     	; 0xcc6 <fputc>
 c84:	3a 94       	dec	r3
 c86:	f7 cf       	rjmp	.-18     	; 0xc76 <vfprintf+0x362>
 c88:	f7 01       	movw	r30, r14
 c8a:	86 81       	ldd	r24, Z+6	; 0x06
 c8c:	97 81       	ldd	r25, Z+7	; 0x07
 c8e:	02 c0       	rjmp	.+4      	; 0xc94 <vfprintf+0x380>
 c90:	8f ef       	ldi	r24, 0xFF	; 255
 c92:	9f ef       	ldi	r25, 0xFF	; 255
 c94:	2c 96       	adiw	r28, 0x0c	; 12
 c96:	e2 e1       	ldi	r30, 0x12	; 18
 c98:	c8 c0       	rjmp	.+400    	; 0xe2a <__epilogue_restores__>

00000c9a <strnlen_P>:
 c9a:	fc 01       	movw	r30, r24
 c9c:	05 90       	lpm	r0, Z+
 c9e:	61 50       	subi	r22, 0x01	; 1
 ca0:	70 40       	sbci	r23, 0x00	; 0
 ca2:	01 10       	cpse	r0, r1
 ca4:	d8 f7       	brcc	.-10     	; 0xc9c <strnlen_P+0x2>
 ca6:	80 95       	com	r24
 ca8:	90 95       	com	r25
 caa:	8e 0f       	add	r24, r30
 cac:	9f 1f       	adc	r25, r31
 cae:	08 95       	ret

00000cb0 <strnlen>:
 cb0:	fc 01       	movw	r30, r24
 cb2:	61 50       	subi	r22, 0x01	; 1
 cb4:	70 40       	sbci	r23, 0x00	; 0
 cb6:	01 90       	ld	r0, Z+
 cb8:	01 10       	cpse	r0, r1
 cba:	d8 f7       	brcc	.-10     	; 0xcb2 <strnlen+0x2>
 cbc:	80 95       	com	r24
 cbe:	90 95       	com	r25
 cc0:	8e 0f       	add	r24, r30
 cc2:	9f 1f       	adc	r25, r31
 cc4:	08 95       	ret

00000cc6 <fputc>:
 cc6:	0f 93       	push	r16
 cc8:	1f 93       	push	r17
 cca:	cf 93       	push	r28
 ccc:	df 93       	push	r29
 cce:	fb 01       	movw	r30, r22
 cd0:	23 81       	ldd	r18, Z+3	; 0x03
 cd2:	21 fd       	sbrc	r18, 1
 cd4:	03 c0       	rjmp	.+6      	; 0xcdc <fputc+0x16>
 cd6:	8f ef       	ldi	r24, 0xFF	; 255
 cd8:	9f ef       	ldi	r25, 0xFF	; 255
 cda:	28 c0       	rjmp	.+80     	; 0xd2c <fputc+0x66>
 cdc:	22 ff       	sbrs	r18, 2
 cde:	16 c0       	rjmp	.+44     	; 0xd0c <fputc+0x46>
 ce0:	46 81       	ldd	r20, Z+6	; 0x06
 ce2:	57 81       	ldd	r21, Z+7	; 0x07
 ce4:	24 81       	ldd	r18, Z+4	; 0x04
 ce6:	35 81       	ldd	r19, Z+5	; 0x05
 ce8:	42 17       	cp	r20, r18
 cea:	53 07       	cpc	r21, r19
 cec:	44 f4       	brge	.+16     	; 0xcfe <fputc+0x38>
 cee:	a0 81       	ld	r26, Z
 cf0:	b1 81       	ldd	r27, Z+1	; 0x01
 cf2:	9d 01       	movw	r18, r26
 cf4:	2f 5f       	subi	r18, 0xFF	; 255
 cf6:	3f 4f       	sbci	r19, 0xFF	; 255
 cf8:	31 83       	std	Z+1, r19	; 0x01
 cfa:	20 83       	st	Z, r18
 cfc:	8c 93       	st	X, r24
 cfe:	26 81       	ldd	r18, Z+6	; 0x06
 d00:	37 81       	ldd	r19, Z+7	; 0x07
 d02:	2f 5f       	subi	r18, 0xFF	; 255
 d04:	3f 4f       	sbci	r19, 0xFF	; 255
 d06:	37 83       	std	Z+7, r19	; 0x07
 d08:	26 83       	std	Z+6, r18	; 0x06
 d0a:	10 c0       	rjmp	.+32     	; 0xd2c <fputc+0x66>
 d0c:	eb 01       	movw	r28, r22
 d0e:	09 2f       	mov	r16, r25
 d10:	18 2f       	mov	r17, r24
 d12:	00 84       	ldd	r0, Z+8	; 0x08
 d14:	f1 85       	ldd	r31, Z+9	; 0x09
 d16:	e0 2d       	mov	r30, r0
 d18:	09 95       	icall
 d1a:	89 2b       	or	r24, r25
 d1c:	e1 f6       	brne	.-72     	; 0xcd6 <fputc+0x10>
 d1e:	8e 81       	ldd	r24, Y+6	; 0x06
 d20:	9f 81       	ldd	r25, Y+7	; 0x07
 d22:	01 96       	adiw	r24, 0x01	; 1
 d24:	9f 83       	std	Y+7, r25	; 0x07
 d26:	8e 83       	std	Y+6, r24	; 0x06
 d28:	81 2f       	mov	r24, r17
 d2a:	90 2f       	mov	r25, r16
 d2c:	df 91       	pop	r29
 d2e:	cf 91       	pop	r28
 d30:	1f 91       	pop	r17
 d32:	0f 91       	pop	r16
 d34:	08 95       	ret

00000d36 <__ultoa_invert>:
 d36:	fa 01       	movw	r30, r20
 d38:	aa 27       	eor	r26, r26
 d3a:	28 30       	cpi	r18, 0x08	; 8
 d3c:	51 f1       	breq	.+84     	; 0xd92 <__ultoa_invert+0x5c>
 d3e:	20 31       	cpi	r18, 0x10	; 16
 d40:	81 f1       	breq	.+96     	; 0xda2 <__ultoa_invert+0x6c>
 d42:	e8 94       	clt
 d44:	6f 93       	push	r22
 d46:	6e 7f       	andi	r22, 0xFE	; 254
 d48:	6e 5f       	subi	r22, 0xFE	; 254
 d4a:	7f 4f       	sbci	r23, 0xFF	; 255
 d4c:	8f 4f       	sbci	r24, 0xFF	; 255
 d4e:	9f 4f       	sbci	r25, 0xFF	; 255
 d50:	af 4f       	sbci	r26, 0xFF	; 255
 d52:	b1 e0       	ldi	r27, 0x01	; 1
 d54:	3e d0       	rcall	.+124    	; 0xdd2 <__ultoa_invert+0x9c>
 d56:	b4 e0       	ldi	r27, 0x04	; 4
 d58:	3c d0       	rcall	.+120    	; 0xdd2 <__ultoa_invert+0x9c>
 d5a:	67 0f       	add	r22, r23
 d5c:	78 1f       	adc	r23, r24
 d5e:	89 1f       	adc	r24, r25
 d60:	9a 1f       	adc	r25, r26
 d62:	a1 1d       	adc	r26, r1
 d64:	68 0f       	add	r22, r24
 d66:	79 1f       	adc	r23, r25
 d68:	8a 1f       	adc	r24, r26
 d6a:	91 1d       	adc	r25, r1
 d6c:	a1 1d       	adc	r26, r1
 d6e:	6a 0f       	add	r22, r26
 d70:	71 1d       	adc	r23, r1
 d72:	81 1d       	adc	r24, r1
 d74:	91 1d       	adc	r25, r1
 d76:	a1 1d       	adc	r26, r1
 d78:	20 d0       	rcall	.+64     	; 0xdba <__ultoa_invert+0x84>
 d7a:	09 f4       	brne	.+2      	; 0xd7e <__ultoa_invert+0x48>
 d7c:	68 94       	set
 d7e:	3f 91       	pop	r19
 d80:	2a e0       	ldi	r18, 0x0A	; 10
 d82:	26 9f       	mul	r18, r22
 d84:	11 24       	eor	r1, r1
 d86:	30 19       	sub	r19, r0
 d88:	30 5d       	subi	r19, 0xD0	; 208
 d8a:	31 93       	st	Z+, r19
 d8c:	de f6       	brtc	.-74     	; 0xd44 <__ultoa_invert+0xe>
 d8e:	cf 01       	movw	r24, r30
 d90:	08 95       	ret
 d92:	46 2f       	mov	r20, r22
 d94:	47 70       	andi	r20, 0x07	; 7
 d96:	40 5d       	subi	r20, 0xD0	; 208
 d98:	41 93       	st	Z+, r20
 d9a:	b3 e0       	ldi	r27, 0x03	; 3
 d9c:	0f d0       	rcall	.+30     	; 0xdbc <__ultoa_invert+0x86>
 d9e:	c9 f7       	brne	.-14     	; 0xd92 <__ultoa_invert+0x5c>
 da0:	f6 cf       	rjmp	.-20     	; 0xd8e <__ultoa_invert+0x58>
 da2:	46 2f       	mov	r20, r22
 da4:	4f 70       	andi	r20, 0x0F	; 15
 da6:	40 5d       	subi	r20, 0xD0	; 208
 da8:	4a 33       	cpi	r20, 0x3A	; 58
 daa:	18 f0       	brcs	.+6      	; 0xdb2 <__ultoa_invert+0x7c>
 dac:	49 5d       	subi	r20, 0xD9	; 217
 dae:	31 fd       	sbrc	r19, 1
 db0:	40 52       	subi	r20, 0x20	; 32
 db2:	41 93       	st	Z+, r20
 db4:	02 d0       	rcall	.+4      	; 0xdba <__ultoa_invert+0x84>
 db6:	a9 f7       	brne	.-22     	; 0xda2 <__ultoa_invert+0x6c>
 db8:	ea cf       	rjmp	.-44     	; 0xd8e <__ultoa_invert+0x58>
 dba:	b4 e0       	ldi	r27, 0x04	; 4
 dbc:	a6 95       	lsr	r26
 dbe:	97 95       	ror	r25
 dc0:	87 95       	ror	r24
 dc2:	77 95       	ror	r23
 dc4:	67 95       	ror	r22
 dc6:	ba 95       	dec	r27
 dc8:	c9 f7       	brne	.-14     	; 0xdbc <__ultoa_invert+0x86>
 dca:	00 97       	sbiw	r24, 0x00	; 0
 dcc:	61 05       	cpc	r22, r1
 dce:	71 05       	cpc	r23, r1
 dd0:	08 95       	ret
 dd2:	9b 01       	movw	r18, r22
 dd4:	ac 01       	movw	r20, r24
 dd6:	0a 2e       	mov	r0, r26
 dd8:	06 94       	lsr	r0
 dda:	57 95       	ror	r21
 ddc:	47 95       	ror	r20
 dde:	37 95       	ror	r19
 de0:	27 95       	ror	r18
 de2:	ba 95       	dec	r27
 de4:	c9 f7       	brne	.-14     	; 0xdd8 <__ultoa_invert+0xa2>
 de6:	62 0f       	add	r22, r18
 de8:	73 1f       	adc	r23, r19
 dea:	84 1f       	adc	r24, r20
 dec:	95 1f       	adc	r25, r21
 dee:	a0 1d       	adc	r26, r0
 df0:	08 95       	ret

00000df2 <__prologue_saves__>:
 df2:	2f 92       	push	r2
 df4:	3f 92       	push	r3
 df6:	4f 92       	push	r4
 df8:	5f 92       	push	r5
 dfa:	6f 92       	push	r6
 dfc:	7f 92       	push	r7
 dfe:	8f 92       	push	r8
 e00:	9f 92       	push	r9
 e02:	af 92       	push	r10
 e04:	bf 92       	push	r11
 e06:	cf 92       	push	r12
 e08:	df 92       	push	r13
 e0a:	ef 92       	push	r14
 e0c:	ff 92       	push	r15
 e0e:	0f 93       	push	r16
 e10:	1f 93       	push	r17
 e12:	cf 93       	push	r28
 e14:	df 93       	push	r29
 e16:	cd b7       	in	r28, 0x3d	; 61
 e18:	de b7       	in	r29, 0x3e	; 62
 e1a:	ca 1b       	sub	r28, r26
 e1c:	db 0b       	sbc	r29, r27
 e1e:	0f b6       	in	r0, 0x3f	; 63
 e20:	f8 94       	cli
 e22:	de bf       	out	0x3e, r29	; 62
 e24:	0f be       	out	0x3f, r0	; 63
 e26:	cd bf       	out	0x3d, r28	; 61
 e28:	09 94       	ijmp

00000e2a <__epilogue_restores__>:
 e2a:	2a 88       	ldd	r2, Y+18	; 0x12
 e2c:	39 88       	ldd	r3, Y+17	; 0x11
 e2e:	48 88       	ldd	r4, Y+16	; 0x10
 e30:	5f 84       	ldd	r5, Y+15	; 0x0f
 e32:	6e 84       	ldd	r6, Y+14	; 0x0e
 e34:	7d 84       	ldd	r7, Y+13	; 0x0d
 e36:	8c 84       	ldd	r8, Y+12	; 0x0c
 e38:	9b 84       	ldd	r9, Y+11	; 0x0b
 e3a:	aa 84       	ldd	r10, Y+10	; 0x0a
 e3c:	b9 84       	ldd	r11, Y+9	; 0x09
 e3e:	c8 84       	ldd	r12, Y+8	; 0x08
 e40:	df 80       	ldd	r13, Y+7	; 0x07
 e42:	ee 80       	ldd	r14, Y+6	; 0x06
 e44:	fd 80       	ldd	r15, Y+5	; 0x05
 e46:	0c 81       	ldd	r16, Y+4	; 0x04
 e48:	1b 81       	ldd	r17, Y+3	; 0x03
 e4a:	aa 81       	ldd	r26, Y+2	; 0x02
 e4c:	b9 81       	ldd	r27, Y+1	; 0x01
 e4e:	ce 0f       	add	r28, r30
 e50:	d1 1d       	adc	r29, r1
 e52:	0f b6       	in	r0, 0x3f	; 63
 e54:	f8 94       	cli
 e56:	de bf       	out	0x3e, r29	; 62
 e58:	0f be       	out	0x3f, r0	; 63
 e5a:	cd bf       	out	0x3d, r28	; 61
 e5c:	ed 01       	movw	r28, r26
 e5e:	08 95       	ret

00000e60 <_exit>:
 e60:	f8 94       	cli

00000e62 <__stop_program>:
 e62:	ff cf       	rjmp	.-2      	; 0xe62 <__stop_program>
