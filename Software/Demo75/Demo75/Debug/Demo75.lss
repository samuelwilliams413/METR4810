
Demo75.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  00000dee  00000e82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800230  00800230  00000fb2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa6  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b4  00000000  00000000  00002166  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001880  00000000  00000000  0000271a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00003f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010232  00000000  00000000  000042a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a7f  00000000  00000000  000144da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00014f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003e58  00000000  00000000  00015081  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
   6:	00 00       	nop
   8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
   a:	00 00       	nop
   c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
   e:	00 00       	nop
  10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
  12:	00 00       	nop
  14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
  16:	00 00       	nop
  18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
  22:	00 00       	nop
  24:	28 c2       	rjmp	.+1104   	; 0x476 <__vector_9>
  26:	00 00       	nop
  28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
  32:	00 00       	nop
  34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
  36:	00 00       	nop
  38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
  42:	00 00       	nop
  44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
  46:	00 00       	nop
  48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
  52:	00 00       	nop
  54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
  56:	00 00       	nop
  58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
  62:	00 00       	nop
  64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
  66:	00 00       	nop
  68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
  72:	00 00       	nop
  74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
  76:	00 00       	nop
  78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	13 03       	mulsu	r17, r19
  7e:	05 04       	cpc	r0, r5
  80:	05 04       	cpc	r0, r5
  82:	86 03       	fmuls	r16, r22
  84:	66 03       	mulsu	r22, r22
  86:	05 04       	cpc	r0, r5
  88:	05 04       	cpc	r0, r5
  8a:	05 04       	cpc	r0, r5
  8c:	a6 03       	fmuls	r18, r22
  8e:	cc 03       	fmulsu	r20, r20
  90:	f2 03       	fmuls	r23, r18
  92:	e0 03       	fmuls	r22, r16
  94:	ba 03       	fmulsu	r19, r18
  96:	05 04       	cpc	r0, r5
  98:	05 04       	cpc	r0, r5
  9a:	05 04       	cpc	r0, r5
  9c:	ff 02       	muls	r31, r31
  9e:	05 04       	cpc	r0, r5
  a0:	47 03       	mulsu	r20, r23
  a2:	05 04       	cpc	r0, r5
  a4:	05 04       	cpc	r0, r5
  a6:	05 04       	cpc	r0, r5
  a8:	27 03       	mulsu	r18, r23

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d8 e0       	ldi	r29, 0x08	; 8
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	12 e0       	ldi	r17, 0x02	; 2
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	ee ee       	ldi	r30, 0xEE	; 238
  be:	fd e0       	ldi	r31, 0x0D	; 13
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
  c2:	05 90       	lpm	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	a0 33       	cpi	r26, 0x30	; 48
  c8:	b1 07       	cpc	r27, r17
  ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
  cc:	22 e0       	ldi	r18, 0x02	; 2
  ce:	a0 e3       	ldi	r26, 0x30	; 48
  d0:	b2 e0       	ldi	r27, 0x02	; 2
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
  d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
  d6:	aa 37       	cpi	r26, 0x7A	; 122
  d8:	b2 07       	cpc	r27, r18
  da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
  dc:	3d d2       	rcall	.+1146   	; 0x558 <main>
  de:	85 c6       	rjmp	.+3338   	; 0xdea <_exit>

000000e0 <__bad_interrupt>:
  e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <uart_init>:
	if((data > 32) && (data < 126)) {
		send_str(test_string);
		uart_putchar(data);
		send_str(test_string2);
	}
}
  e2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  e6:	83 e3       	ldi	r24, 0x33	; 51
  e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ec:	a1 ec       	ldi	r26, 0xC1	; 193
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	88 e1       	ldi	r24, 0x18	; 24
  f2:	8c 93       	st	X, r24
  f4:	e2 ec       	ldi	r30, 0xC2	; 194
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	8e e0       	ldi	r24, 0x0E	; 14
  fa:	80 83       	st	Z, r24
  fc:	88 e9       	ldi	r24, 0x98	; 152
  fe:	8c 93       	st	X, r24
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <send_str>:
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	dc 01       	movw	r26, r24
 10c:	9c 91       	ld	r25, X
 10e:	99 23       	and	r25, r25
 110:	69 f0       	breq	.+26     	; 0x12c <send_str+0x26>
 112:	11 96       	adiw	r26, 0x01	; 1
 114:	e0 ec       	ldi	r30, 0xC0	; 192
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	c6 ec       	ldi	r28, 0xC6	; 198
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	29 2f       	mov	r18, r25
 11e:	90 81       	ld	r25, Z
 120:	95 ff       	sbrs	r25, 5
 122:	fd cf       	rjmp	.-6      	; 0x11e <send_str+0x18>
 124:	28 83       	st	Y, r18
 126:	9d 91       	ld	r25, X+
 128:	91 11       	cpse	r25, r1
 12a:	f8 cf       	rjmp	.-16     	; 0x11c <send_str+0x16>
 12c:	e0 ec       	ldi	r30, 0xC0	; 192
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	85 ff       	sbrs	r24, 5
 134:	fd cf       	rjmp	.-6      	; 0x130 <send_str+0x2a>
 136:	8d e0       	ldi	r24, 0x0D	; 13
 138:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <get_char>:
 *
 * \retval Next data byte in receive buffer
 */
static inline uint8_t uart_getchar(void)
{
		while(!(UCSR0A & (1<<RXC0)));
 142:	e0 ec       	ldi	r30, 0xC0	; 192
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	ec f7       	brge	.-6      	; 0x146 <get_char+0x4>
		return UDR0;
 14c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
extern uint8_t get_char(void)
{
	uint8_t data = '\0';
	data = uart_getchar();
	return data;
 150:	08 95       	ret

00000152 <setPD>:
static int PB3_sta = 0;
static int PB4_sta = 0;

void setPD(int _PD2_state, int _PD3_state){

	if (_PD2_state == 0){
 152:	89 2b       	or	r24, r25
 154:	39 f4       	brne	.+14     	; 0x164 <setPD+0x12>
		if (_PD3_state == 0) {
 156:	67 2b       	or	r22, r23
 158:	11 f4       	brne	.+4      	; 0x15e <setPD+0xc>
			PORTD = 0b0000;
 15a:	1b b8       	out	0x0b, r1	; 11
 15c:	08 95       	ret
		}
		else {
			PORTD = 0b1000;
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	8b b9       	out	0x0b, r24	; 11
 162:	08 95       	ret
		}
	}

	else {
		if (_PD3_state == 0) {
 164:	67 2b       	or	r22, r23
 166:	19 f4       	brne	.+6      	; 0x16e <setPD+0x1c>
			PORTD = 0b0100;
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	08 95       	ret
		}
		else {
			PORTD = 0b1100;
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	8b b9       	out	0x0b, r24	; 11
 172:	08 95       	ret

00000174 <setPB>:
}


void setPB(int _PB3_state, int _PB4_state){

	if (_PB3_state == 0){
 174:	89 2b       	or	r24, r25
 176:	39 f4       	brne	.+14     	; 0x186 <setPB+0x12>
		if (_PB4_state == 0) {
 178:	67 2b       	or	r22, r23
 17a:	11 f4       	brne	.+4      	; 0x180 <setPB+0xc>
			PORTB = 0b0000;
 17c:	15 b8       	out	0x05, r1	; 5
 17e:	08 95       	ret
		}
		else {
			PORTB = 0b10000;
 180:	80 e1       	ldi	r24, 0x10	; 16
 182:	85 b9       	out	0x05, r24	; 5
 184:	08 95       	ret
		}
	}

	else {
		if (_PB4_state == 0) {
 186:	67 2b       	or	r22, r23
 188:	19 f4       	brne	.+6      	; 0x190 <setPB+0x1c>
			PORTB = 0b01000;
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	08 95       	ret
		}
		else {
			PORTB = 0b11000;
 190:	88 e1       	ldi	r24, 0x18	; 24
 192:	85 b9       	out	0x05, r24	; 5
 194:	08 95       	ret

00000196 <motorRfwd>:
{
	
	//OCR0B = 255-pwm;
	
	//PORTD |=  (1<<PORTD2);
	PB3_sta = 0;
 196:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <PB3_sta+0x1>
 19a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <PB3_sta>
	setPB(PB3_sta, PB4_sta);
 19e:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <__data_end>
 1a2:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <__data_end+0x1>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	e4 df       	rcall	.-56     	; 0x174 <setPB>
	PD2_sta = 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <PD2_sta+0x1>
 1b4:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <PD2_sta>
	setPD(PD2_sta, PD3_sta);
 1b8:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <PD3_sta>
 1bc:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <PD3_sta+0x1>
 1c0:	c8 cf       	rjmp	.-112    	; 0x152 <setPD>
 1c2:	08 95       	ret

000001c4 <motorLfwd>:
void motorLfwd(uint16_t pwm)
{

	//OCR0A = 255-pwm;
	//PORTD |= (1<<PORTD3);
	PB4_sta = 0;
 1c4:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <__data_end+0x1>
 1c8:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
	setPB(PB3_sta, PB4_sta);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <PB3_sta>
 1d4:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <PB3_sta+0x1>
 1d8:	cd df       	rcall	.-102    	; 0x174 <setPB>
	PD3_sta = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <PD3_sta+0x1>
 1e2:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <PD3_sta>
	setPD(PD2_sta, PD3_sta);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <PD2_sta>
 1ee:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <PD2_sta+0x1>
 1f2:	af cf       	rjmp	.-162    	; 0x152 <setPD>
 1f4:	08 95       	ret

000001f6 <motorRbwd>:
{
	
	//OCR0B = pwm;
	
	//PORTD &=  !(1<<PORTD2);
	PB3_sta = 1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <PB3_sta+0x1>
 1fe:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <PB3_sta>
	setPB(PB3_sta, PB4_sta);
 202:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <__data_end>
 206:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <__data_end+0x1>
 20a:	b4 df       	rcall	.-152    	; 0x174 <setPB>
	PD2_sta = 0;
 20c:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <PD2_sta+0x1>
 210:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <PD2_sta>
	setPD(PD2_sta, PD3_sta);
 214:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <PD3_sta>
 218:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <PD3_sta+0x1>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	98 cf       	rjmp	.-208    	; 0x152 <setPD>
 222:	08 95       	ret

00000224 <motorLbwd>:
{

	//OCR0A = pwm;

	//PORTD &= !(1<<PORTD3);
	PB4_sta = 1;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <__data_end+0x1>
 22c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>
	setPB(PB3_sta, PB4_sta);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <PB3_sta>
 238:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <PB3_sta+0x1>
 23c:	9b df       	rcall	.-202    	; 0x174 <setPB>
	PD3_sta = 0;
 23e:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <PD3_sta+0x1>
 242:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <PD3_sta>
	setPD(PD2_sta, PD3_sta);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <PD2_sta>
 24e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <PD2_sta+0x1>
 252:	7f cf       	rjmp	.-258    	; 0x152 <setPD>
 254:	08 95       	ret

00000256 <motorR_stop>:

void motorR_stop(void){
	
	//OCR0B = 0;
	//PORTD &= !(1<<PORTD2);
	PB3_sta = 0;
 256:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <PB3_sta+0x1>
 25a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <PB3_sta>
	setPB(PB3_sta, PB4_sta);
 25e:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <__data_end>
 262:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <__data_end+0x1>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	84 df       	rcall	.-248    	; 0x174 <setPB>
	PD2_sta = 0;
 26c:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <PD2_sta+0x1>
 270:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <PD2_sta>
	setPD(PD2_sta, PD3_sta);
 274:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <PD3_sta>
 278:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <PD3_sta+0x1>
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	68 cf       	rjmp	.-304    	; 0x152 <setPD>
 282:	08 95       	ret

00000284 <motorL_stop>:

void motorL_stop(void){
	
	//OCR0A = 0;
	
	PB4_sta = 0;
 284:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <__data_end+0x1>
 288:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
	setPB(PB3_sta, PB4_sta);//PORTD &= !(1<<PORTD3);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <PB3_sta>
 294:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <PB3_sta+0x1>
 298:	6d df       	rcall	.-294    	; 0x174 <setPB>
	PD3_sta = 0;
 29a:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <PD3_sta+0x1>
 29e:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <PD3_sta>
	setPD(PD2_sta, PD3_sta);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <PD2_sta>
 2aa:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <PD2_sta+0x1>
 2ae:	51 cf       	rjmp	.-350    	; 0x152 <setPD>
 2b0:	08 95       	ret

000002b2 <motor_init>:
	// initialize all PWMs to 0% duty cycle (braking)
	//OCR0A =  0;
	//OCR0B  = 0;
	// set PWM pins as digital outputs (the PWM signals will not
	// appear on the lines if they are digital inputs)
	DDRB |= (1 << PORTB3) | (1 << PORTB4);
 2b2:	84 b1       	in	r24, 0x04	; 4
 2b4:	88 61       	ori	r24, 0x18	; 24
 2b6:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PORTD2) | (1 << PORTD3);
 2b8:	8a b1       	in	r24, 0x0a	; 10
 2ba:	8c 60       	ori	r24, 0x0C	; 12
 2bc:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b11111111;
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111111;
 2c2:	8a b9       	out	0x0a, r24	; 10
 2c4:	08 95       	ret

000002c6 <move_servo1>:
// Motor Control Functions -- pwm is an 16-bit value

void move_servo1(uint16_t angle)
{
	//OCR1A = /*(2500/180)**/angle;
	OCR1A = (int) (((249-125) / 180 ) * angle + 125);
 2c6:	8d e7       	ldi	r24, 0x7D	; 125
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2d2:	08 95       	ret

000002d4 <move_servo2>:
}

void move_servo2(uint16_t angle)
{	
	//OCR1B = /*(2500/180)**/angle;
	OCR1B = (int) (((249-125) / 180 ) * angle + 125);	
 2d4:	8d e7       	ldi	r24, 0x7D	; 125
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2dc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 2e0:	08 95       	ret

000002e2 <servo_init>:
// Motor Initialization routine -- this function must be called
//  before you use any of the above functions
void servo_init()
{	
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 2e2:	e0 e8       	ldi	r30, 0x80	; 128
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	82 6a       	ori	r24, 0xA2	; 162
 2ea:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 2ec:	e1 e8       	ldi	r30, 0x81	; 129
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	8b 61       	ori	r24, 0x1B	; 27
 2f4:	80 83       	st	Z, r24
	ICR1=2499;  //fPWM=50Hz (Period = 20ms Standard).
 2f6:	83 ec       	ldi	r24, 0xC3	; 195
 2f8:	99 e0       	ldi	r25, 0x09	; 9
 2fa:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2fe:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

	// set PWM pins as digital outputs (the PWM signals will not
	// appear on the lines if they are digital inputs)
	DDRD |= (1 << PORTD5)|(1<<PORTD4);
 302:	8a b1       	in	r24, 0x0a	; 10
 304:	80 63       	ori	r24, 0x30	; 48
 306:	8a b9       	out	0x0a, r24	; 10
 308:	08 95       	ret

0000030a <full_step_forward>:
#include "servo.h"
#include "timer2.h"

uint32_t present;

void full_step_forward (int num_step) {
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
	for (int i = 0; i < num_step; ++i)
 30e:	18 16       	cp	r1, r24
 310:	19 06       	cpc	r1, r25
 312:	0c f0       	brlt	.+2      	; 0x316 <full_step_forward+0xc>
 314:	47 c0       	rjmp	.+142    	; 0x3a4 <full_step_forward+0x9a>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTC = 0b00000100;
 31a:	b4 e0       	ldi	r27, 0x04	; 4
		 		_delay_ms(DELAY);
		 		PORTC = 0b00001100;
 31c:	ac e0       	ldi	r26, 0x0C	; 12
		 		_delay_ms(DELAY);
		 		PORTC = 0b00001000;
 31e:	f8 e0       	ldi	r31, 0x08	; 8
		 		_delay_ms(DELAY);
		 		PORTC = 0b00011000;
 320:	e8 e1       	ldi	r30, 0x18	; 24
		 		_delay_ms(DELAY);
		 		PORTC = 0b00010000;
 322:	70 e1       	ldi	r23, 0x10	; 16
		 		_delay_ms(DELAY);
		 		PORTC = 0b00110000;
 324:	60 e3       	ldi	r22, 0x30	; 48
		 		_delay_ms(DELAY);
		 		PORTC = 0b00100000;
 326:	50 e2       	ldi	r21, 0x20	; 32
		 		_delay_ms(DELAY);
				PORTC = 0b001001000;
 328:	48 e4       	ldi	r20, 0x48	; 72
uint32_t present;

void full_step_forward (int num_step) {
	for (int i = 0; i < num_step; ++i)
	{
		PORTC = 0b00000100;
 32a:	b8 b9       	out	0x08, r27	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32c:	c3 ec       	ldi	r28, 0xC3	; 195
 32e:	d9 e0       	ldi	r29, 0x09	; 9
 330:	21 97       	sbiw	r28, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <full_step_forward+0x26>
 334:	00 c0       	rjmp	.+0      	; 0x336 <full_step_forward+0x2c>
 336:	00 00       	nop
		 		_delay_ms(DELAY);
		 		PORTC = 0b00001100;
 338:	a8 b9       	out	0x08, r26	; 8
 33a:	c3 ec       	ldi	r28, 0xC3	; 195
 33c:	d9 e0       	ldi	r29, 0x09	; 9
 33e:	21 97       	sbiw	r28, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <full_step_forward+0x34>
 342:	00 c0       	rjmp	.+0      	; 0x344 <full_step_forward+0x3a>
 344:	00 00       	nop
		 		_delay_ms(DELAY);
		 		PORTC = 0b00001000;
 346:	f8 b9       	out	0x08, r31	; 8
 348:	c3 ec       	ldi	r28, 0xC3	; 195
 34a:	d9 e0       	ldi	r29, 0x09	; 9
 34c:	21 97       	sbiw	r28, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <full_step_forward+0x42>
 350:	00 c0       	rjmp	.+0      	; 0x352 <full_step_forward+0x48>
 352:	00 00       	nop
		 		_delay_ms(DELAY);
		 		PORTC = 0b00011000;
 354:	e8 b9       	out	0x08, r30	; 8
 356:	c3 ec       	ldi	r28, 0xC3	; 195
 358:	d9 e0       	ldi	r29, 0x09	; 9
 35a:	21 97       	sbiw	r28, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <full_step_forward+0x50>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <full_step_forward+0x56>
 360:	00 00       	nop
		 		_delay_ms(DELAY);
		 		PORTC = 0b00010000;
 362:	78 b9       	out	0x08, r23	; 8
 364:	c3 ec       	ldi	r28, 0xC3	; 195
 366:	d9 e0       	ldi	r29, 0x09	; 9
 368:	21 97       	sbiw	r28, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <full_step_forward+0x5e>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <full_step_forward+0x64>
 36e:	00 00       	nop
		 		_delay_ms(DELAY);
		 		PORTC = 0b00110000;
 370:	68 b9       	out	0x08, r22	; 8
 372:	c3 ec       	ldi	r28, 0xC3	; 195
 374:	d9 e0       	ldi	r29, 0x09	; 9
 376:	21 97       	sbiw	r28, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <full_step_forward+0x6c>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <full_step_forward+0x72>
 37c:	00 00       	nop
		 		_delay_ms(DELAY);
		 		PORTC = 0b00100000;
 37e:	58 b9       	out	0x08, r21	; 8
 380:	c3 ec       	ldi	r28, 0xC3	; 195
 382:	d9 e0       	ldi	r29, 0x09	; 9
 384:	21 97       	sbiw	r28, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <full_step_forward+0x7a>
 388:	00 c0       	rjmp	.+0      	; 0x38a <full_step_forward+0x80>
 38a:	00 00       	nop
		 		_delay_ms(DELAY);
				PORTC = 0b001001000;
 38c:	48 b9       	out	0x08, r20	; 8
 38e:	c3 ec       	ldi	r28, 0xC3	; 195
 390:	d9 e0       	ldi	r29, 0x09	; 9
 392:	21 97       	sbiw	r28, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <full_step_forward+0x88>
 396:	00 c0       	rjmp	.+0      	; 0x398 <full_step_forward+0x8e>
 398:	00 00       	nop
#include "timer2.h"

uint32_t present;

void full_step_forward (int num_step) {
	for (int i = 0; i < num_step; ++i)
 39a:	2f 5f       	subi	r18, 0xFF	; 255
 39c:	3f 4f       	sbci	r19, 0xFF	; 255
 39e:	28 17       	cp	r18, r24
 3a0:	39 07       	cpc	r19, r25
 3a2:	19 f6       	brne	.-122    	; 0x32a <full_step_forward+0x20>
		 		_delay_ms(DELAY);
				PORTC = 0b001001000;
		 		_delay_ms(DELAY);
		
	}
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <full_step_back>:
void full_step_back (int num_step) {
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
	for (int i = 0; i < num_step; ++i)
 3ae:	18 16       	cp	r1, r24
 3b0:	19 06       	cpc	r1, r25
 3b2:	0c f0       	brlt	.+2      	; 0x3b6 <full_step_back+0xc>
 3b4:	47 c0       	rjmp	.+142    	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
 3b6:	20 e0       	ldi	r18, 0x00	; 0
 3b8:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		PORTC = 0b00100100;
 3ba:	b4 e2       	ldi	r27, 0x24	; 36
		_delay_ms(DELAY);
		PORTC = 0b00100000;
 3bc:	a0 e2       	ldi	r26, 0x20	; 32
		_delay_ms(DELAY);
		PORTC = 0b00110000;
 3be:	f0 e3       	ldi	r31, 0x30	; 48
		_delay_ms(DELAY);
		PORTC = 0b00010000;
 3c0:	e0 e1       	ldi	r30, 0x10	; 16
		_delay_ms(DELAY);
		PORTC = 0b00011000;
 3c2:	78 e1       	ldi	r23, 0x18	; 24
		_delay_ms(DELAY);
		PORTC = 0b00001000;
 3c4:	68 e0       	ldi	r22, 0x08	; 8
		_delay_ms(DELAY);
		PORTC = 0b00001100;
 3c6:	5c e0       	ldi	r21, 0x0C	; 12
		_delay_ms(DELAY);
		PORTC = 0b00000100;
 3c8:	44 e0       	ldi	r20, 0x04	; 4
}
void full_step_back (int num_step) {
	for (int i = 0; i < num_step; ++i)
	{
		
		PORTC = 0b00100100;
 3ca:	b8 b9       	out	0x08, r27	; 8
 3cc:	c3 ec       	ldi	r28, 0xC3	; 195
 3ce:	d9 e0       	ldi	r29, 0x09	; 9
 3d0:	21 97       	sbiw	r28, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <full_step_back+0x26>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <full_step_back+0x2c>
 3d6:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00100000;
 3d8:	a8 b9       	out	0x08, r26	; 8
 3da:	c3 ec       	ldi	r28, 0xC3	; 195
 3dc:	d9 e0       	ldi	r29, 0x09	; 9
 3de:	21 97       	sbiw	r28, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <full_step_back+0x34>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <full_step_back+0x3a>
 3e4:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00110000;
 3e6:	f8 b9       	out	0x08, r31	; 8
 3e8:	c3 ec       	ldi	r28, 0xC3	; 195
 3ea:	d9 e0       	ldi	r29, 0x09	; 9
 3ec:	21 97       	sbiw	r28, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <full_step_back+0x42>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <full_step_back+0x48>
 3f2:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00010000;
 3f4:	e8 b9       	out	0x08, r30	; 8
 3f6:	c3 ec       	ldi	r28, 0xC3	; 195
 3f8:	d9 e0       	ldi	r29, 0x09	; 9
 3fa:	21 97       	sbiw	r28, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <full_step_back+0x50>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__FUSE_REGION_LENGTH__>
 400:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00011000;
 402:	78 b9       	out	0x08, r23	; 8
 404:	c3 ec       	ldi	r28, 0xC3	; 195
 406:	d9 e0       	ldi	r29, 0x09	; 9
 408:	21 97       	sbiw	r28, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00001000;
 410:	68 b9       	out	0x08, r22	; 8
 412:	c3 ec       	ldi	r28, 0xC3	; 195
 414:	d9 e0       	ldi	r29, 0x09	; 9
 416:	21 97       	sbiw	r28, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00001100;
 41e:	58 b9       	out	0x08, r21	; 8
 420:	c3 ec       	ldi	r28, 0xC3	; 195
 422:	d9 e0       	ldi	r29, 0x09	; 9
 424:	21 97       	sbiw	r28, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
		_delay_ms(DELAY);
		PORTC = 0b00000100;
 42c:	48 b9       	out	0x08, r20	; 8
 42e:	c3 ec       	ldi	r28, 0xC3	; 195
 430:	d9 e0       	ldi	r29, 0x09	; 9
 432:	21 97       	sbiw	r28, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
 438:	00 00       	nop
		 		_delay_ms(DELAY);
		
	}
}
void full_step_back (int num_step) {
	for (int i = 0; i < num_step; ++i)
 43a:	2f 5f       	subi	r18, 0xFF	; 255
 43c:	3f 4f       	sbci	r19, 0xFF	; 255
 43e:	28 17       	cp	r18, r24
 440:	39 07       	cpc	r19, r25
 442:	19 f6       	brne	.-122    	; 0x3ca <full_step_back+0x20>
		_delay_ms(DELAY);
		PORTC = 0b00000100;
		_delay_ms(DELAY);
		
	}
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <timer_init>:
//  before you use any of the above functions
void timer_init()
{
	//sei();
	//Configure TIMER2
	 OCR2A = 249;
 44a:	89 ef       	ldi	r24, 0xF9	; 249
 44c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	 TCCR2A |= (1 << WGM21);
 450:	e0 eb       	ldi	r30, 0xB0	; 176
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	82 60       	ori	r24, 0x02	; 2
 458:	80 83       	st	Z, r24
	 // Set to CTC Mode

	 TIMSK2 |= (1 << OCIE2A);
 45a:	e0 e7       	ldi	r30, 0x70	; 112
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	82 60       	ori	r24, 0x02	; 2
 462:	80 83       	st	Z, r24
	 //Set interrupt on compare match

	 TCCR2B |= (1 << CS21)|(1 << CS20);
 464:	e1 eb       	ldi	r30, 0xB1	; 177
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	83 60       	ori	r24, 0x03	; 3
 46c:	80 83       	st	Z, r24
	 // set prescaler to 32 and starts PWM

	 
	 // enable interrupts
	 TIFR0 &= (1<<OCF0A);
 46e:	85 b3       	in	r24, 0x15	; 21
 470:	82 70       	andi	r24, 0x02	; 2
 472:	85 bb       	out	0x15, r24	; 21
 474:	08 95       	ret

00000476 <__vector_9>:


}

ISR (TIMER2_COMPA_vect)
{
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
	// action to be done every 250 usec
	 //TIFR0 &= ~(1<<OCF0A);
	clock_ticks++;
 488:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <clock_ticks>
 48c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <clock_ticks+0x1>
 490:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <clock_ticks+0x2>
 494:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <clock_ticks+0x3>
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	a1 1d       	adc	r26, r1
 49c:	b1 1d       	adc	r27, r1
 49e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <clock_ticks>
 4a2:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <clock_ticks+0x1>
 4a6:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <clock_ticks+0x2>
 4aa:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <clock_ticks+0x3>
 4ae:	bf 91       	pop	r27
 4b0:	af 91       	pop	r26
 4b2:	9f 91       	pop	r25
 4b4:	8f 91       	pop	r24
 4b6:	0f 90       	pop	r0
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <forwards>:


////////////////////////////////////////////////DC motors function

void forwards(){
	 motorRfwd(0);
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	68 de       	rcall	.-816    	; 0x196 <motorRfwd>
	 motorLfwd(0);
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	7c de       	rcall	.-776    	; 0x1c4 <motorLfwd>
	 sprintf(carStatus, "Forward");
 4cc:	88 e0       	ldi	r24, 0x08	; 8
 4ce:	e0 e0       	ldi	r30, 0x00	; 0
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	a0 e7       	ldi	r26, 0x70	; 112
 4d4:	b2 e0       	ldi	r27, 0x02	; 2
 4d6:	01 90       	ld	r0, Z+
 4d8:	0d 92       	st	X+, r0
 4da:	8a 95       	dec	r24
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <forwards+0x16>
 4de:	08 95       	ret

000004e0 <reverse>:
}

void reverse(){
	motorRbwd(0);
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	88 de       	rcall	.-752    	; 0x1f6 <motorRbwd>
	motorLbwd(0);
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	9c de       	rcall	.-712    	; 0x224 <motorLbwd>
	sprintf(carStatus, "Reverse");
 4ec:	88 e0       	ldi	r24, 0x08	; 8
 4ee:	e8 e0       	ldi	r30, 0x08	; 8
 4f0:	f1 e0       	ldi	r31, 0x01	; 1
 4f2:	a0 e7       	ldi	r26, 0x70	; 112
 4f4:	b2 e0       	ldi	r27, 0x02	; 2
 4f6:	01 90       	ld	r0, Z+
 4f8:	0d 92       	st	X+, r0
 4fa:	8a 95       	dec	r24
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <reverse+0x16>
 4fe:	08 95       	ret

00000500 <left>:
}

void left(){
	motorRfwd(0);
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	48 de       	rcall	.-880    	; 0x196 <motorRfwd>
	motorLbwd(0);
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	8c de       	rcall	.-744    	; 0x224 <motorLbwd>
	sprintf(carStatus, "Left");
 50c:	85 e0       	ldi	r24, 0x05	; 5
 50e:	e0 e1       	ldi	r30, 0x10	; 16
 510:	f1 e0       	ldi	r31, 0x01	; 1
 512:	a0 e7       	ldi	r26, 0x70	; 112
 514:	b2 e0       	ldi	r27, 0x02	; 2
 516:	01 90       	ld	r0, Z+
 518:	0d 92       	st	X+, r0
 51a:	8a 95       	dec	r24
 51c:	e1 f7       	brne	.-8      	; 0x516 <left+0x16>
 51e:	08 95       	ret

00000520 <right>:
}
void right(){
	motorRbwd(0);
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	68 de       	rcall	.-816    	; 0x1f6 <motorRbwd>
	motorLfwd(0);
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	4c de       	rcall	.-872    	; 0x1c4 <motorLfwd>
	sprintf(carStatus, "Right");
 52c:	86 e0       	ldi	r24, 0x06	; 6
 52e:	e5 e1       	ldi	r30, 0x15	; 21
 530:	f1 e0       	ldi	r31, 0x01	; 1
 532:	a0 e7       	ldi	r26, 0x70	; 112
 534:	b2 e0       	ldi	r27, 0x02	; 2
 536:	01 90       	ld	r0, Z+
 538:	0d 92       	st	X+, r0
 53a:	8a 95       	dec	r24
 53c:	e1 f7       	brne	.-8      	; 0x536 <right+0x16>
 53e:	08 95       	ret

00000540 <stop>:
}

void stop(){
	motorL_stop();
 540:	a1 de       	rcall	.-702    	; 0x284 <motorL_stop>
	motorR_stop();
 542:	89 de       	rcall	.-750    	; 0x256 <motorR_stop>
	sprintf(carStatus, "Stopped");
 544:	88 e0       	ldi	r24, 0x08	; 8
 546:	eb e1       	ldi	r30, 0x1B	; 27
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	a0 e7       	ldi	r26, 0x70	; 112
 54c:	b2 e0       	ldi	r27, 0x02	; 2
 54e:	01 90       	ld	r0, Z+
 550:	0d 92       	st	X+, r0
 552:	8a 95       	dec	r24
 554:	e1 f7       	brne	.-8      	; 0x54e <stop+0xe>
 556:	08 95       	ret

00000558 <main>:
int main(void) {

	//Initializations

	//Initialize timer2
	timer_init();
 558:	78 df       	rcall	.-272    	; 0x44a <timer_init>
	
	//Initialize communication through bluetooth
	uart_init();
 55a:	c3 dd       	rcall	.-1146   	; 0xe2 <uart_init>
	
	//Initialize DC motors
	motor_init();
 55c:	aa de       	rcall	.-684    	; 0x2b2 <motor_init>
	stop();
 55e:	f0 df       	rcall	.-32     	; 0x540 <stop>
	
	//Initialize servo
	int servo1Position = 0; //position of the upper claw in degree
	int servo2Position = 0; //position of the lower claw in degree
	servo_init();
 560:	c0 de       	rcall	.-640    	; 0x2e2 <servo_init>
	move_servo1(servo1Position);
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	af de       	rcall	.-674    	; 0x2c6 <move_servo1>
	move_servo2(servo2Position);
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	b3 de       	rcall	.-666    	; 0x2d4 <move_servo2>
	
	n = sprintf(buffer, "Ready! \n");
 56e:	89 e0       	ldi	r24, 0x09	; 9
 570:	e3 e2       	ldi	r30, 0x23	; 35
 572:	f1 e0       	ldi	r31, 0x01	; 1
 574:	ae e3       	ldi	r26, 0x3E	; 62
 576:	b2 e0       	ldi	r27, 0x02	; 2
 578:	01 90       	ld	r0, Z+
 57a:	0d 92       	st	X+, r0
 57c:	8a 95       	dec	r24
 57e:	e1 f7       	brne	.-8      	; 0x578 <main+0x20>
 580:	88 e0       	ldi	r24, 0x08	; 8
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 588:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
	send_str(buffer);
 58c:	8e e3       	ldi	r24, 0x3E	; 62
 58e:	92 e0       	ldi	r25, 0x02	; 2
 590:	ba dd       	rcall	.-1164   	; 0x106 <send_str>
	motor_init();
	stop();
	
	//Initialize servo
	int servo1Position = 0; //position of the upper claw in degree
	int servo2Position = 0; //position of the lower claw in degree
 592:	00 e0       	ldi	r16, 0x00	; 0
 594:	10 e0       	ldi	r17, 0x00	; 0
	//Initialize DC motors
	motor_init();
	stop();
	
	//Initialize servo
	int servo1Position = 0; //position of the upper claw in degree
 596:	c0 e0       	ldi	r28, 0x00	; 0
 598:	d0 e0       	ldi	r29, 0x00	; 0
			send_str(buffer);
			break;

			case 'l':
			left();
			n = sprintf(buffer,"Car is moving to the left\n");
 59a:	0f 2e       	mov	r0, r31
 59c:	fb e1       	ldi	r31, 0x1B	; 27
 59e:	4f 2e       	mov	r4, r31
 5a0:	f0 2d       	mov	r31, r0
 5a2:	0f 2e       	mov	r0, r31
 5a4:	fa e1       	ldi	r31, 0x1A	; 26
 5a6:	af 2e       	mov	r10, r31
 5a8:	b1 2c       	mov	r11, r1
 5aa:	f0 2d       	mov	r31, r0
			send_str(buffer);
			break;

			case 'm':
			reverse();
			n = sprintf(buffer,"Car is moving backwards\n");
 5ac:	0f 2e       	mov	r0, r31
 5ae:	f9 e1       	ldi	r31, 0x19	; 25
 5b0:	5f 2e       	mov	r5, r31
 5b2:	f0 2d       	mov	r31, r0
 5b4:	0f 2e       	mov	r0, r31
 5b6:	f8 e1       	ldi	r31, 0x18	; 24
 5b8:	6f 2e       	mov	r6, r31
 5ba:	71 2c       	mov	r7, r1
 5bc:	f0 2d       	mov	r31, r0
			case 's':
			if (servo1Position > 0) {
				servo1Position -= 5;
			}
			move_servo1(servo1Position);
			n = sprintf(buffer,"Servo 1 moved to position %d*\n",
 5be:	0f 2e       	mov	r0, r31
 5c0:	f0 e6       	ldi	r31, 0x60	; 96
 5c2:	2f 2e       	mov	r2, r31
 5c4:	f1 e0       	ldi	r31, 0x01	; 1
 5c6:	3f 2e       	mov	r3, r31
 5c8:	f0 2d       	mov	r31, r0
			send_str(buffer);
			break;
	
		}

		n = sprintf(buffer, "SysSta: S1pos=%d, S2pos=%d \n", servo1Position, servo2Position);
 5ca:	0f 2e       	mov	r0, r31
 5cc:	f3 e1       	ldi	r31, 0x13	; 19
 5ce:	ef 2e       	mov	r14, r31
 5d0:	f2 e0       	ldi	r31, 0x02	; 2
 5d2:	ff 2e       	mov	r15, r31
 5d4:	f0 2d       	mov	r31, r0
		send_str(buffer);

		n = sprintf(buffer,"\n");
 5d6:	cc 24       	eor	r12, r12
 5d8:	c3 94       	inc	r12
 5da:	d1 2c       	mov	r13, r1
 5dc:	4e 01       	movw	r8, r28
	
	
	//Stay forever inside this while loop
	while (1) {
		//get the control command
		char command = get_char();
 5de:	b1 dd       	rcall	.-1182   	; 0x142 <get_char>


		switch (command) {
 5e0:	08 2e       	mov	r0, r24
 5e2:	00 0c       	add	r0, r0
 5e4:	99 0b       	sbc	r25, r25
 5e6:	aa 0b       	sbc	r26, r26
 5e8:	bb 0b       	sbc	r27, r27
 5ea:	fc 01       	movw	r30, r24
 5ec:	e1 56       	subi	r30, 0x61	; 97
 5ee:	f1 09       	sbc	r31, r1
 5f0:	e7 31       	cpi	r30, 0x17	; 23
 5f2:	f1 05       	cpc	r31, r1
 5f4:	08 f0       	brcs	.+2      	; 0x5f8 <main+0xa0>
 5f6:	09 c1       	rjmp	.+530    	; 0x80a <main+0x2b2>
 5f8:	e2 5c       	subi	r30, 0xC2	; 194
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	2a c1       	rjmp	.+596    	; 0x852 <__tablejump2__>
			
			case 'q':
			full_step_forward(10);
 5fe:	8a e0       	ldi	r24, 0x0A	; 10
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	83 de       	rcall	.-762    	; 0x30a <full_step_forward>
			n = sprintf(buffer, "Winch moved one step up\n");
 604:	ec e2       	ldi	r30, 0x2C	; 44
 606:	f1 e0       	ldi	r31, 0x01	; 1
 608:	ae e3       	ldi	r26, 0x3E	; 62
 60a:	b2 e0       	ldi	r27, 0x02	; 2
 60c:	85 2d       	mov	r24, r5
 60e:	01 90       	ld	r0, Z+
 610:	0d 92       	st	X+, r0
 612:	8a 95       	dec	r24
 614:	e1 f7       	brne	.-8      	; 0x60e <main+0xb6>
 616:	70 92 3d 02 	sts	0x023D, r7	; 0x80023d <n+0x1>
 61a:	60 92 3c 02 	sts	0x023C, r6	; 0x80023c <n>
			send_str(buffer);
 61e:	8e e3       	ldi	r24, 0x3E	; 62
 620:	92 e0       	ldi	r25, 0x02	; 2
 622:	71 dd       	rcall	.-1310   	; 0x106 <send_str>
			break;
 624:	f2 c0       	rjmp	.+484    	; 0x80a <main+0x2b2>
			
			case 'a':
			full_step_back(10);
 626:	8a e0       	ldi	r24, 0x0A	; 10
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	bf de       	rcall	.-642    	; 0x3aa <full_step_back>
			n = sprintf(buffer, "Winch moved one step down\n");
 62c:	e5 e4       	ldi	r30, 0x45	; 69
 62e:	f1 e0       	ldi	r31, 0x01	; 1
 630:	ae e3       	ldi	r26, 0x3E	; 62
 632:	b2 e0       	ldi	r27, 0x02	; 2
 634:	84 2d       	mov	r24, r4
 636:	01 90       	ld	r0, Z+
 638:	0d 92       	st	X+, r0
 63a:	8a 95       	dec	r24
 63c:	e1 f7       	brne	.-8      	; 0x636 <main+0xde>
 63e:	b0 92 3d 02 	sts	0x023D, r11	; 0x80023d <n+0x1>
 642:	a0 92 3c 02 	sts	0x023C, r10	; 0x80023c <n>
			send_str(buffer);
 646:	8e e3       	ldi	r24, 0x3E	; 62
 648:	92 e0       	ldi	r25, 0x02	; 2
 64a:	5d dd       	rcall	.-1350   	; 0x106 <send_str>
			break;
 64c:	de c0       	rjmp	.+444    	; 0x80a <main+0x2b2>

			case 'w':
			if (servo1Position < 180) {
 64e:	84 eb       	ldi	r24, 0xB4	; 180
 650:	88 16       	cp	r8, r24
 652:	91 04       	cpc	r9, r1
 654:	1c f4       	brge	.+6      	; 0x65c <main+0x104>
				servo1Position += 5;
 656:	95 e0       	ldi	r25, 0x05	; 5
 658:	89 0e       	add	r8, r25
 65a:	91 1c       	adc	r9, r1
			}
			move_servo1(servo1Position);
 65c:	c4 01       	movw	r24, r8
 65e:	33 de       	rcall	.-922    	; 0x2c6 <move_servo1>
			n = sprintf(buffer,"Servo 1 moved to position %d*\n",
 660:	9f 92       	push	r9
 662:	8f 92       	push	r8
 664:	3f 92       	push	r3
 666:	2f 92       	push	r2
 668:	8e e3       	ldi	r24, 0x3E	; 62
 66a:	92 e0       	ldi	r25, 0x02	; 2
 66c:	9f 93       	push	r25
 66e:	8f 93       	push	r24
 670:	f6 d0       	rcall	.+492    	; 0x85e <sprintf>
 672:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 676:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
			servo1Position);
			send_str(buffer);
 67a:	8e e3       	ldi	r24, 0x3E	; 62
 67c:	92 e0       	ldi	r25, 0x02	; 2
 67e:	43 dd       	rcall	.-1402   	; 0x106 <send_str>
			break;
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	0f 90       	pop	r0
 686:	0f 90       	pop	r0
 688:	0f 90       	pop	r0
 68a:	0f 90       	pop	r0
 68c:	be c0       	rjmp	.+380    	; 0x80a <main+0x2b2>
			
			
			case 's':
			if (servo1Position > 0) {
 68e:	18 14       	cp	r1, r8
 690:	19 04       	cpc	r1, r9
 692:	1c f4       	brge	.+6      	; 0x69a <main+0x142>
				servo1Position -= 5;
 694:	a5 e0       	ldi	r26, 0x05	; 5
 696:	8a 1a       	sub	r8, r26
 698:	91 08       	sbc	r9, r1
			}
			move_servo1(servo1Position);
 69a:	c4 01       	movw	r24, r8
 69c:	14 de       	rcall	.-984    	; 0x2c6 <move_servo1>
			n = sprintf(buffer,"Servo 1 moved to position %d*\n",
 69e:	9f 92       	push	r9
 6a0:	8f 92       	push	r8
 6a2:	3f 92       	push	r3
 6a4:	2f 92       	push	r2
 6a6:	8e e3       	ldi	r24, 0x3E	; 62
 6a8:	92 e0       	ldi	r25, 0x02	; 2
 6aa:	9f 93       	push	r25
 6ac:	8f 93       	push	r24
 6ae:	d7 d0       	rcall	.+430    	; 0x85e <sprintf>
 6b0:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 6b4:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
			servo1Position);
			send_str(buffer);
 6b8:	8e e3       	ldi	r24, 0x3E	; 62
 6ba:	92 e0       	ldi	r25, 0x02	; 2
 6bc:	24 dd       	rcall	.-1464   	; 0x106 <send_str>
			break;
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	9f c0       	rjmp	.+318    	; 0x80a <main+0x2b2>
			
			
			case 'e':
			if (servo2Position < 180) {
 6cc:	04 3b       	cpi	r16, 0xB4	; 180
 6ce:	11 05       	cpc	r17, r1
 6d0:	14 f4       	brge	.+4      	; 0x6d6 <main+0x17e>
				servo2Position += 5;
 6d2:	0b 5f       	subi	r16, 0xFB	; 251
 6d4:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			move_servo2(servo2Position);
 6d6:	c8 01       	movw	r24, r16
 6d8:	fd dd       	rcall	.-1030   	; 0x2d4 <move_servo2>
			n = sprintf(buffer,"Servo 2 moved to position %d*\n",
 6da:	1f 93       	push	r17
 6dc:	0f 93       	push	r16
 6de:	af e7       	ldi	r26, 0x7F	; 127
 6e0:	b1 e0       	ldi	r27, 0x01	; 1
 6e2:	bf 93       	push	r27
 6e4:	af 93       	push	r26
 6e6:	8e e3       	ldi	r24, 0x3E	; 62
 6e8:	92 e0       	ldi	r25, 0x02	; 2
 6ea:	9f 93       	push	r25
 6ec:	8f 93       	push	r24
 6ee:	b7 d0       	rcall	.+366    	; 0x85e <sprintf>
 6f0:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 6f4:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
			servo2Position);
			send_str(buffer);
 6f8:	8e e3       	ldi	r24, 0x3E	; 62
 6fa:	92 e0       	ldi	r25, 0x02	; 2
 6fc:	04 dd       	rcall	.-1528   	; 0x106 <send_str>
			break;
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
 702:	0f 90       	pop	r0
 704:	0f 90       	pop	r0
 706:	0f 90       	pop	r0
 708:	0f 90       	pop	r0
 70a:	7f c0       	rjmp	.+254    	; 0x80a <main+0x2b2>
			
			
			case 'd':
			if (servo2Position > 0) {
 70c:	10 16       	cp	r1, r16
 70e:	11 06       	cpc	r1, r17
 710:	14 f4       	brge	.+4      	; 0x716 <main+0x1be>
				servo2Position -= 5;
 712:	05 50       	subi	r16, 0x05	; 5
 714:	11 09       	sbc	r17, r1
			}
			move_servo2(servo2Position);
 716:	c8 01       	movw	r24, r16
 718:	dd dd       	rcall	.-1094   	; 0x2d4 <move_servo2>
			n = sprintf(buffer,"Servo 2 moved to position %d*\n",
 71a:	1f 93       	push	r17
 71c:	0f 93       	push	r16
 71e:	af e7       	ldi	r26, 0x7F	; 127
 720:	b1 e0       	ldi	r27, 0x01	; 1
 722:	bf 93       	push	r27
 724:	af 93       	push	r26
 726:	8e e3       	ldi	r24, 0x3E	; 62
 728:	92 e0       	ldi	r25, 0x02	; 2
 72a:	9f 93       	push	r25
 72c:	8f 93       	push	r24
 72e:	97 d0       	rcall	.+302    	; 0x85e <sprintf>
 730:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 734:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
			servo2Position);
			send_str(buffer);
 738:	8e e3       	ldi	r24, 0x3E	; 62
 73a:	92 e0       	ldi	r25, 0x02	; 2
 73c:	e4 dc       	rcall	.-1592   	; 0x106 <send_str>
			break;
 73e:	0f 90       	pop	r0
 740:	0f 90       	pop	r0
 742:	0f 90       	pop	r0
 744:	0f 90       	pop	r0
 746:	0f 90       	pop	r0
 748:	0f 90       	pop	r0
 74a:	5f c0       	rjmp	.+190    	; 0x80a <main+0x2b2>

			case 'i':
			forwards();
 74c:	b9 de       	rcall	.-654    	; 0x4c0 <forwards>
			n = sprintf(buffer,"Car is moving forwards\n");
 74e:	88 e1       	ldi	r24, 0x18	; 24
 750:	ee e9       	ldi	r30, 0x9E	; 158
 752:	f1 e0       	ldi	r31, 0x01	; 1
 754:	ae e3       	ldi	r26, 0x3E	; 62
 756:	b2 e0       	ldi	r27, 0x02	; 2
 758:	01 90       	ld	r0, Z+
 75a:	0d 92       	st	X+, r0
 75c:	8a 95       	dec	r24
 75e:	e1 f7       	brne	.-8      	; 0x758 <main+0x200>
 760:	a7 e1       	ldi	r26, 0x17	; 23
 762:	b0 e0       	ldi	r27, 0x00	; 0
 764:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <n+0x1>
 768:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <n>
			send_str(buffer);
 76c:	8e e3       	ldi	r24, 0x3E	; 62
 76e:	92 e0       	ldi	r25, 0x02	; 2
 770:	ca dc       	rcall	.-1644   	; 0x106 <send_str>
			break;
 772:	4b c0       	rjmp	.+150    	; 0x80a <main+0x2b2>

			case 'm':
			reverse();
 774:	b5 de       	rcall	.-662    	; 0x4e0 <reverse>
			n = sprintf(buffer,"Car is moving backwards\n");
 776:	e6 eb       	ldi	r30, 0xB6	; 182
 778:	f1 e0       	ldi	r31, 0x01	; 1
 77a:	ae e3       	ldi	r26, 0x3E	; 62
 77c:	b2 e0       	ldi	r27, 0x02	; 2
 77e:	85 2d       	mov	r24, r5
 780:	01 90       	ld	r0, Z+
 782:	0d 92       	st	X+, r0
 784:	8a 95       	dec	r24
 786:	e1 f7       	brne	.-8      	; 0x780 <main+0x228>
 788:	70 92 3d 02 	sts	0x023D, r7	; 0x80023d <n+0x1>
 78c:	60 92 3c 02 	sts	0x023C, r6	; 0x80023c <n>
			send_str(buffer);
 790:	8e e3       	ldi	r24, 0x3E	; 62
 792:	92 e0       	ldi	r25, 0x02	; 2
 794:	b8 dc       	rcall	.-1680   	; 0x106 <send_str>
			break;
 796:	39 c0       	rjmp	.+114    	; 0x80a <main+0x2b2>

			case 'j':
			right();
 798:	c3 de       	rcall	.-634    	; 0x520 <right>
			n = sprintf(buffer,"Car is moving to the right\n");
 79a:	ef ec       	ldi	r30, 0xCF	; 207
 79c:	f1 e0       	ldi	r31, 0x01	; 1
 79e:	ae e3       	ldi	r26, 0x3E	; 62
 7a0:	b2 e0       	ldi	r27, 0x02	; 2
 7a2:	8c e1       	ldi	r24, 0x1C	; 28
 7a4:	01 90       	ld	r0, Z+
 7a6:	0d 92       	st	X+, r0
 7a8:	8a 95       	dec	r24
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <main+0x24c>
 7ac:	8b e1       	ldi	r24, 0x1B	; 27
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 7b4:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
			send_str(buffer);
 7b8:	8e e3       	ldi	r24, 0x3E	; 62
 7ba:	92 e0       	ldi	r25, 0x02	; 2
 7bc:	a4 dc       	rcall	.-1720   	; 0x106 <send_str>
			break;
 7be:	25 c0       	rjmp	.+74     	; 0x80a <main+0x2b2>

			case 'l':
			left();
 7c0:	9f de       	rcall	.-706    	; 0x500 <left>
			n = sprintf(buffer,"Car is moving to the left\n");
 7c2:	eb ee       	ldi	r30, 0xEB	; 235
 7c4:	f1 e0       	ldi	r31, 0x01	; 1
 7c6:	ae e3       	ldi	r26, 0x3E	; 62
 7c8:	b2 e0       	ldi	r27, 0x02	; 2
 7ca:	84 2d       	mov	r24, r4
 7cc:	01 90       	ld	r0, Z+
 7ce:	0d 92       	st	X+, r0
 7d0:	8a 95       	dec	r24
 7d2:	e1 f7       	brne	.-8      	; 0x7cc <main+0x274>
 7d4:	b0 92 3d 02 	sts	0x023D, r11	; 0x80023d <n+0x1>
 7d8:	a0 92 3c 02 	sts	0x023C, r10	; 0x80023c <n>
			send_str(buffer);
 7dc:	8e e3       	ldi	r24, 0x3E	; 62
 7de:	92 e0       	ldi	r25, 0x02	; 2
 7e0:	92 dc       	rcall	.-1756   	; 0x106 <send_str>
			break;
 7e2:	13 c0       	rjmp	.+38     	; 0x80a <main+0x2b2>

			case 'k':
			stop();
 7e4:	ad de       	rcall	.-678    	; 0x540 <stop>
			n = sprintf(buffer,"Car stopped\n");
 7e6:	e6 e0       	ldi	r30, 0x06	; 6
 7e8:	f2 e0       	ldi	r31, 0x02	; 2
 7ea:	ae e3       	ldi	r26, 0x3E	; 62
 7ec:	b2 e0       	ldi	r27, 0x02	; 2
 7ee:	8d e0       	ldi	r24, 0x0D	; 13
 7f0:	01 90       	ld	r0, Z+
 7f2:	0d 92       	st	X+, r0
 7f4:	8a 95       	dec	r24
 7f6:	e1 f7       	brne	.-8      	; 0x7f0 <main+0x298>
 7f8:	ac e0       	ldi	r26, 0x0C	; 12
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <n+0x1>
 800:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <n>
			send_str(buffer);
 804:	8e e3       	ldi	r24, 0x3E	; 62
 806:	92 e0       	ldi	r25, 0x02	; 2
 808:	7e dc       	rcall	.-1796   	; 0x106 <send_str>
			break;
	
		}

		n = sprintf(buffer, "SysSta: S1pos=%d, S2pos=%d \n", servo1Position, servo2Position);
 80a:	1f 93       	push	r17
 80c:	0f 93       	push	r16
 80e:	9f 92       	push	r9
 810:	8f 92       	push	r8
 812:	ff 92       	push	r15
 814:	ef 92       	push	r14
 816:	ce e3       	ldi	r28, 0x3E	; 62
 818:	d2 e0       	ldi	r29, 0x02	; 2
 81a:	df 93       	push	r29
 81c:	cf 93       	push	r28
 81e:	1f d0       	rcall	.+62     	; 0x85e <sprintf>
 820:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <n+0x1>
 824:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <n>
		send_str(buffer);
 828:	ce 01       	movw	r24, r28
 82a:	6d dc       	rcall	.-1830   	; 0x106 <send_str>

		n = sprintf(buffer,"\n");
 82c:	8a e0       	ldi	r24, 0x0A	; 10
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	99 83       	std	Y+1, r25	; 0x01
 832:	88 83       	st	Y, r24
 834:	d0 92 3d 02 	sts	0x023D, r13	; 0x80023d <n+0x1>
 838:	c0 92 3c 02 	sts	0x023C, r12	; 0x80023c <n>
		send_str(buffer);
 83c:	ce 01       	movw	r24, r28
 83e:	63 dc       	rcall	.-1850   	; 0x106 <send_str>

	}
 840:	ad b7       	in	r26, 0x3d	; 61
 842:	be b7       	in	r27, 0x3e	; 62
 844:	18 96       	adiw	r26, 0x08	; 8
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	f8 94       	cli
 84a:	be bf       	out	0x3e, r27	; 62
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	ad bf       	out	0x3d, r26	; 61
 850:	c6 ce       	rjmp	.-628    	; 0x5de <main+0x86>

00000852 <__tablejump2__>:
 852:	ee 0f       	add	r30, r30
 854:	ff 1f       	adc	r31, r31
 856:	05 90       	lpm	r0, Z+
 858:	f4 91       	lpm	r31, Z
 85a:	e0 2d       	mov	r30, r0
 85c:	09 94       	ijmp

0000085e <sprintf>:
 85e:	ae e0       	ldi	r26, 0x0E	; 14
 860:	b0 e0       	ldi	r27, 0x00	; 0
 862:	e4 e3       	ldi	r30, 0x34	; 52
 864:	f4 e0       	ldi	r31, 0x04	; 4
 866:	98 c2       	rjmp	.+1328   	; 0xd98 <__prologue_saves__+0x1c>
 868:	0d 89       	ldd	r16, Y+21	; 0x15
 86a:	1e 89       	ldd	r17, Y+22	; 0x16
 86c:	86 e0       	ldi	r24, 0x06	; 6
 86e:	8c 83       	std	Y+4, r24	; 0x04
 870:	1a 83       	std	Y+2, r17	; 0x02
 872:	09 83       	std	Y+1, r16	; 0x01
 874:	8f ef       	ldi	r24, 0xFF	; 255
 876:	9f e7       	ldi	r25, 0x7F	; 127
 878:	9e 83       	std	Y+6, r25	; 0x06
 87a:	8d 83       	std	Y+5, r24	; 0x05
 87c:	ae 01       	movw	r20, r28
 87e:	47 5e       	subi	r20, 0xE7	; 231
 880:	5f 4f       	sbci	r21, 0xFF	; 255
 882:	6f 89       	ldd	r22, Y+23	; 0x17
 884:	78 8d       	ldd	r23, Y+24	; 0x18
 886:	ce 01       	movw	r24, r28
 888:	01 96       	adiw	r24, 0x01	; 1
 88a:	09 d0       	rcall	.+18     	; 0x89e <vfprintf>
 88c:	2f 81       	ldd	r18, Y+7	; 0x07
 88e:	38 85       	ldd	r19, Y+8	; 0x08
 890:	f8 01       	movw	r30, r16
 892:	e2 0f       	add	r30, r18
 894:	f3 1f       	adc	r31, r19
 896:	10 82       	st	Z, r1
 898:	2e 96       	adiw	r28, 0x0e	; 14
 89a:	e4 e0       	ldi	r30, 0x04	; 4
 89c:	99 c2       	rjmp	.+1330   	; 0xdd0 <__epilogue_restores__+0x1c>

0000089e <vfprintf>:
 89e:	ac e0       	ldi	r26, 0x0C	; 12
 8a0:	b0 e0       	ldi	r27, 0x00	; 0
 8a2:	e4 e5       	ldi	r30, 0x54	; 84
 8a4:	f4 e0       	ldi	r31, 0x04	; 4
 8a6:	6a c2       	rjmp	.+1236   	; 0xd7c <__prologue_saves__>
 8a8:	7c 01       	movw	r14, r24
 8aa:	6b 01       	movw	r12, r22
 8ac:	8a 01       	movw	r16, r20
 8ae:	fc 01       	movw	r30, r24
 8b0:	17 82       	std	Z+7, r1	; 0x07
 8b2:	16 82       	std	Z+6, r1	; 0x06
 8b4:	83 81       	ldd	r24, Z+3	; 0x03
 8b6:	81 ff       	sbrs	r24, 1
 8b8:	b0 c1       	rjmp	.+864    	; 0xc1a <__stack+0x31b>
 8ba:	ce 01       	movw	r24, r28
 8bc:	01 96       	adiw	r24, 0x01	; 1
 8be:	4c 01       	movw	r8, r24
 8c0:	f7 01       	movw	r30, r14
 8c2:	93 81       	ldd	r25, Z+3	; 0x03
 8c4:	f6 01       	movw	r30, r12
 8c6:	93 fd       	sbrc	r25, 3
 8c8:	85 91       	lpm	r24, Z+
 8ca:	93 ff       	sbrs	r25, 3
 8cc:	81 91       	ld	r24, Z+
 8ce:	6f 01       	movw	r12, r30
 8d0:	88 23       	and	r24, r24
 8d2:	09 f4       	brne	.+2      	; 0x8d6 <vfprintf+0x38>
 8d4:	9e c1       	rjmp	.+828    	; 0xc12 <__stack+0x313>
 8d6:	85 32       	cpi	r24, 0x25	; 37
 8d8:	39 f4       	brne	.+14     	; 0x8e8 <vfprintf+0x4a>
 8da:	93 fd       	sbrc	r25, 3
 8dc:	85 91       	lpm	r24, Z+
 8de:	93 ff       	sbrs	r25, 3
 8e0:	81 91       	ld	r24, Z+
 8e2:	6f 01       	movw	r12, r30
 8e4:	85 32       	cpi	r24, 0x25	; 37
 8e6:	21 f4       	brne	.+8      	; 0x8f0 <vfprintf+0x52>
 8e8:	b7 01       	movw	r22, r14
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	b1 d1       	rcall	.+866    	; 0xc50 <fputc>
 8ee:	e8 cf       	rjmp	.-48     	; 0x8c0 <vfprintf+0x22>
 8f0:	51 2c       	mov	r5, r1
 8f2:	31 2c       	mov	r3, r1
 8f4:	20 e0       	ldi	r18, 0x00	; 0
 8f6:	20 32       	cpi	r18, 0x20	; 32
 8f8:	a0 f4       	brcc	.+40     	; 0x922 <__stack+0x23>
 8fa:	8b 32       	cpi	r24, 0x2B	; 43
 8fc:	69 f0       	breq	.+26     	; 0x918 <__stack+0x19>
 8fe:	30 f4       	brcc	.+12     	; 0x90c <__stack+0xd>
 900:	80 32       	cpi	r24, 0x20	; 32
 902:	59 f0       	breq	.+22     	; 0x91a <__stack+0x1b>
 904:	83 32       	cpi	r24, 0x23	; 35
 906:	69 f4       	brne	.+26     	; 0x922 <__stack+0x23>
 908:	20 61       	ori	r18, 0x10	; 16
 90a:	2c c0       	rjmp	.+88     	; 0x964 <__stack+0x65>
 90c:	8d 32       	cpi	r24, 0x2D	; 45
 90e:	39 f0       	breq	.+14     	; 0x91e <__stack+0x1f>
 910:	80 33       	cpi	r24, 0x30	; 48
 912:	39 f4       	brne	.+14     	; 0x922 <__stack+0x23>
 914:	21 60       	ori	r18, 0x01	; 1
 916:	26 c0       	rjmp	.+76     	; 0x964 <__stack+0x65>
 918:	22 60       	ori	r18, 0x02	; 2
 91a:	24 60       	ori	r18, 0x04	; 4
 91c:	23 c0       	rjmp	.+70     	; 0x964 <__stack+0x65>
 91e:	28 60       	ori	r18, 0x08	; 8
 920:	21 c0       	rjmp	.+66     	; 0x964 <__stack+0x65>
 922:	27 fd       	sbrc	r18, 7
 924:	27 c0       	rjmp	.+78     	; 0x974 <__stack+0x75>
 926:	30 ed       	ldi	r19, 0xD0	; 208
 928:	38 0f       	add	r19, r24
 92a:	3a 30       	cpi	r19, 0x0A	; 10
 92c:	78 f4       	brcc	.+30     	; 0x94c <__stack+0x4d>
 92e:	26 ff       	sbrs	r18, 6
 930:	06 c0       	rjmp	.+12     	; 0x93e <__stack+0x3f>
 932:	fa e0       	ldi	r31, 0x0A	; 10
 934:	5f 9e       	mul	r5, r31
 936:	30 0d       	add	r19, r0
 938:	11 24       	eor	r1, r1
 93a:	53 2e       	mov	r5, r19
 93c:	13 c0       	rjmp	.+38     	; 0x964 <__stack+0x65>
 93e:	8a e0       	ldi	r24, 0x0A	; 10
 940:	38 9e       	mul	r3, r24
 942:	30 0d       	add	r19, r0
 944:	11 24       	eor	r1, r1
 946:	33 2e       	mov	r3, r19
 948:	20 62       	ori	r18, 0x20	; 32
 94a:	0c c0       	rjmp	.+24     	; 0x964 <__stack+0x65>
 94c:	8e 32       	cpi	r24, 0x2E	; 46
 94e:	21 f4       	brne	.+8      	; 0x958 <__stack+0x59>
 950:	26 fd       	sbrc	r18, 6
 952:	5f c1       	rjmp	.+702    	; 0xc12 <__stack+0x313>
 954:	20 64       	ori	r18, 0x40	; 64
 956:	06 c0       	rjmp	.+12     	; 0x964 <__stack+0x65>
 958:	8c 36       	cpi	r24, 0x6C	; 108
 95a:	11 f4       	brne	.+4      	; 0x960 <__stack+0x61>
 95c:	20 68       	ori	r18, 0x80	; 128
 95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x65>
 960:	88 36       	cpi	r24, 0x68	; 104
 962:	41 f4       	brne	.+16     	; 0x974 <__stack+0x75>
 964:	f6 01       	movw	r30, r12
 966:	93 fd       	sbrc	r25, 3
 968:	85 91       	lpm	r24, Z+
 96a:	93 ff       	sbrs	r25, 3
 96c:	81 91       	ld	r24, Z+
 96e:	6f 01       	movw	r12, r30
 970:	81 11       	cpse	r24, r1
 972:	c1 cf       	rjmp	.-126    	; 0x8f6 <vfprintf+0x58>
 974:	98 2f       	mov	r25, r24
 976:	9f 7d       	andi	r25, 0xDF	; 223
 978:	95 54       	subi	r25, 0x45	; 69
 97a:	93 30       	cpi	r25, 0x03	; 3
 97c:	28 f4       	brcc	.+10     	; 0x988 <__stack+0x89>
 97e:	0c 5f       	subi	r16, 0xFC	; 252
 980:	1f 4f       	sbci	r17, 0xFF	; 255
 982:	ff e3       	ldi	r31, 0x3F	; 63
 984:	f9 83       	std	Y+1, r31	; 0x01
 986:	0d c0       	rjmp	.+26     	; 0x9a2 <__stack+0xa3>
 988:	83 36       	cpi	r24, 0x63	; 99
 98a:	31 f0       	breq	.+12     	; 0x998 <__stack+0x99>
 98c:	83 37       	cpi	r24, 0x73	; 115
 98e:	71 f0       	breq	.+28     	; 0x9ac <__stack+0xad>
 990:	83 35       	cpi	r24, 0x53	; 83
 992:	09 f0       	breq	.+2      	; 0x996 <__stack+0x97>
 994:	57 c0       	rjmp	.+174    	; 0xa44 <__stack+0x145>
 996:	21 c0       	rjmp	.+66     	; 0x9da <__stack+0xdb>
 998:	f8 01       	movw	r30, r16
 99a:	80 81       	ld	r24, Z
 99c:	89 83       	std	Y+1, r24	; 0x01
 99e:	0e 5f       	subi	r16, 0xFE	; 254
 9a0:	1f 4f       	sbci	r17, 0xFF	; 255
 9a2:	44 24       	eor	r4, r4
 9a4:	43 94       	inc	r4
 9a6:	51 2c       	mov	r5, r1
 9a8:	54 01       	movw	r10, r8
 9aa:	14 c0       	rjmp	.+40     	; 0x9d4 <__stack+0xd5>
 9ac:	38 01       	movw	r6, r16
 9ae:	f2 e0       	ldi	r31, 0x02	; 2
 9b0:	6f 0e       	add	r6, r31
 9b2:	71 1c       	adc	r7, r1
 9b4:	f8 01       	movw	r30, r16
 9b6:	a0 80       	ld	r10, Z
 9b8:	b1 80       	ldd	r11, Z+1	; 0x01
 9ba:	26 ff       	sbrs	r18, 6
 9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <__stack+0xc5>
 9be:	65 2d       	mov	r22, r5
 9c0:	70 e0       	ldi	r23, 0x00	; 0
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <__stack+0xc9>
 9c4:	6f ef       	ldi	r22, 0xFF	; 255
 9c6:	7f ef       	ldi	r23, 0xFF	; 255
 9c8:	c5 01       	movw	r24, r10
 9ca:	2c 87       	std	Y+12, r18	; 0x0c
 9cc:	36 d1       	rcall	.+620    	; 0xc3a <strnlen>
 9ce:	2c 01       	movw	r4, r24
 9d0:	83 01       	movw	r16, r6
 9d2:	2c 85       	ldd	r18, Y+12	; 0x0c
 9d4:	2f 77       	andi	r18, 0x7F	; 127
 9d6:	22 2e       	mov	r2, r18
 9d8:	16 c0       	rjmp	.+44     	; 0xa06 <__stack+0x107>
 9da:	38 01       	movw	r6, r16
 9dc:	f2 e0       	ldi	r31, 0x02	; 2
 9de:	6f 0e       	add	r6, r31
 9e0:	71 1c       	adc	r7, r1
 9e2:	f8 01       	movw	r30, r16
 9e4:	a0 80       	ld	r10, Z
 9e6:	b1 80       	ldd	r11, Z+1	; 0x01
 9e8:	26 ff       	sbrs	r18, 6
 9ea:	03 c0       	rjmp	.+6      	; 0x9f2 <__stack+0xf3>
 9ec:	65 2d       	mov	r22, r5
 9ee:	70 e0       	ldi	r23, 0x00	; 0
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <__stack+0xf7>
 9f2:	6f ef       	ldi	r22, 0xFF	; 255
 9f4:	7f ef       	ldi	r23, 0xFF	; 255
 9f6:	c5 01       	movw	r24, r10
 9f8:	2c 87       	std	Y+12, r18	; 0x0c
 9fa:	14 d1       	rcall	.+552    	; 0xc24 <strnlen_P>
 9fc:	2c 01       	movw	r4, r24
 9fe:	2c 85       	ldd	r18, Y+12	; 0x0c
 a00:	20 68       	ori	r18, 0x80	; 128
 a02:	22 2e       	mov	r2, r18
 a04:	83 01       	movw	r16, r6
 a06:	23 fc       	sbrc	r2, 3
 a08:	19 c0       	rjmp	.+50     	; 0xa3c <__stack+0x13d>
 a0a:	83 2d       	mov	r24, r3
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	48 16       	cp	r4, r24
 a10:	59 06       	cpc	r5, r25
 a12:	a0 f4       	brcc	.+40     	; 0xa3c <__stack+0x13d>
 a14:	b7 01       	movw	r22, r14
 a16:	80 e2       	ldi	r24, 0x20	; 32
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	1a d1       	rcall	.+564    	; 0xc50 <fputc>
 a1c:	3a 94       	dec	r3
 a1e:	f5 cf       	rjmp	.-22     	; 0xa0a <__stack+0x10b>
 a20:	f5 01       	movw	r30, r10
 a22:	27 fc       	sbrc	r2, 7
 a24:	85 91       	lpm	r24, Z+
 a26:	27 fe       	sbrs	r2, 7
 a28:	81 91       	ld	r24, Z+
 a2a:	5f 01       	movw	r10, r30
 a2c:	b7 01       	movw	r22, r14
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0f d1       	rcall	.+542    	; 0xc50 <fputc>
 a32:	31 10       	cpse	r3, r1
 a34:	3a 94       	dec	r3
 a36:	f1 e0       	ldi	r31, 0x01	; 1
 a38:	4f 1a       	sub	r4, r31
 a3a:	51 08       	sbc	r5, r1
 a3c:	41 14       	cp	r4, r1
 a3e:	51 04       	cpc	r5, r1
 a40:	79 f7       	brne	.-34     	; 0xa20 <__stack+0x121>
 a42:	de c0       	rjmp	.+444    	; 0xc00 <__stack+0x301>
 a44:	84 36       	cpi	r24, 0x64	; 100
 a46:	11 f0       	breq	.+4      	; 0xa4c <__stack+0x14d>
 a48:	89 36       	cpi	r24, 0x69	; 105
 a4a:	31 f5       	brne	.+76     	; 0xa98 <__stack+0x199>
 a4c:	f8 01       	movw	r30, r16
 a4e:	27 ff       	sbrs	r18, 7
 a50:	07 c0       	rjmp	.+14     	; 0xa60 <__stack+0x161>
 a52:	60 81       	ld	r22, Z
 a54:	71 81       	ldd	r23, Z+1	; 0x01
 a56:	82 81       	ldd	r24, Z+2	; 0x02
 a58:	93 81       	ldd	r25, Z+3	; 0x03
 a5a:	0c 5f       	subi	r16, 0xFC	; 252
 a5c:	1f 4f       	sbci	r17, 0xFF	; 255
 a5e:	08 c0       	rjmp	.+16     	; 0xa70 <__stack+0x171>
 a60:	60 81       	ld	r22, Z
 a62:	71 81       	ldd	r23, Z+1	; 0x01
 a64:	07 2e       	mov	r0, r23
 a66:	00 0c       	add	r0, r0
 a68:	88 0b       	sbc	r24, r24
 a6a:	99 0b       	sbc	r25, r25
 a6c:	0e 5f       	subi	r16, 0xFE	; 254
 a6e:	1f 4f       	sbci	r17, 0xFF	; 255
 a70:	2f 76       	andi	r18, 0x6F	; 111
 a72:	72 2e       	mov	r7, r18
 a74:	97 ff       	sbrs	r25, 7
 a76:	09 c0       	rjmp	.+18     	; 0xa8a <__stack+0x18b>
 a78:	90 95       	com	r25
 a7a:	80 95       	com	r24
 a7c:	70 95       	com	r23
 a7e:	61 95       	neg	r22
 a80:	7f 4f       	sbci	r23, 0xFF	; 255
 a82:	8f 4f       	sbci	r24, 0xFF	; 255
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	20 68       	ori	r18, 0x80	; 128
 a88:	72 2e       	mov	r7, r18
 a8a:	2a e0       	ldi	r18, 0x0A	; 10
 a8c:	30 e0       	ldi	r19, 0x00	; 0
 a8e:	a4 01       	movw	r20, r8
 a90:	17 d1       	rcall	.+558    	; 0xcc0 <__ultoa_invert>
 a92:	a8 2e       	mov	r10, r24
 a94:	a8 18       	sub	r10, r8
 a96:	43 c0       	rjmp	.+134    	; 0xb1e <__stack+0x21f>
 a98:	85 37       	cpi	r24, 0x75	; 117
 a9a:	29 f4       	brne	.+10     	; 0xaa6 <__stack+0x1a7>
 a9c:	2f 7e       	andi	r18, 0xEF	; 239
 a9e:	b2 2e       	mov	r11, r18
 aa0:	2a e0       	ldi	r18, 0x0A	; 10
 aa2:	30 e0       	ldi	r19, 0x00	; 0
 aa4:	25 c0       	rjmp	.+74     	; 0xaf0 <__stack+0x1f1>
 aa6:	f2 2f       	mov	r31, r18
 aa8:	f9 7f       	andi	r31, 0xF9	; 249
 aaa:	bf 2e       	mov	r11, r31
 aac:	8f 36       	cpi	r24, 0x6F	; 111
 aae:	c1 f0       	breq	.+48     	; 0xae0 <__stack+0x1e1>
 ab0:	18 f4       	brcc	.+6      	; 0xab8 <__stack+0x1b9>
 ab2:	88 35       	cpi	r24, 0x58	; 88
 ab4:	79 f0       	breq	.+30     	; 0xad4 <__stack+0x1d5>
 ab6:	ad c0       	rjmp	.+346    	; 0xc12 <__stack+0x313>
 ab8:	80 37       	cpi	r24, 0x70	; 112
 aba:	19 f0       	breq	.+6      	; 0xac2 <__stack+0x1c3>
 abc:	88 37       	cpi	r24, 0x78	; 120
 abe:	21 f0       	breq	.+8      	; 0xac8 <__stack+0x1c9>
 ac0:	a8 c0       	rjmp	.+336    	; 0xc12 <__stack+0x313>
 ac2:	2f 2f       	mov	r18, r31
 ac4:	20 61       	ori	r18, 0x10	; 16
 ac6:	b2 2e       	mov	r11, r18
 ac8:	b4 fe       	sbrs	r11, 4
 aca:	0d c0       	rjmp	.+26     	; 0xae6 <__stack+0x1e7>
 acc:	8b 2d       	mov	r24, r11
 ace:	84 60       	ori	r24, 0x04	; 4
 ad0:	b8 2e       	mov	r11, r24
 ad2:	09 c0       	rjmp	.+18     	; 0xae6 <__stack+0x1e7>
 ad4:	24 ff       	sbrs	r18, 4
 ad6:	0a c0       	rjmp	.+20     	; 0xaec <__stack+0x1ed>
 ad8:	9f 2f       	mov	r25, r31
 ada:	96 60       	ori	r25, 0x06	; 6
 adc:	b9 2e       	mov	r11, r25
 ade:	06 c0       	rjmp	.+12     	; 0xaec <__stack+0x1ed>
 ae0:	28 e0       	ldi	r18, 0x08	; 8
 ae2:	30 e0       	ldi	r19, 0x00	; 0
 ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__stack+0x1f1>
 ae6:	20 e1       	ldi	r18, 0x10	; 16
 ae8:	30 e0       	ldi	r19, 0x00	; 0
 aea:	02 c0       	rjmp	.+4      	; 0xaf0 <__stack+0x1f1>
 aec:	20 e1       	ldi	r18, 0x10	; 16
 aee:	32 e0       	ldi	r19, 0x02	; 2
 af0:	f8 01       	movw	r30, r16
 af2:	b7 fe       	sbrs	r11, 7
 af4:	07 c0       	rjmp	.+14     	; 0xb04 <__stack+0x205>
 af6:	60 81       	ld	r22, Z
 af8:	71 81       	ldd	r23, Z+1	; 0x01
 afa:	82 81       	ldd	r24, Z+2	; 0x02
 afc:	93 81       	ldd	r25, Z+3	; 0x03
 afe:	0c 5f       	subi	r16, 0xFC	; 252
 b00:	1f 4f       	sbci	r17, 0xFF	; 255
 b02:	06 c0       	rjmp	.+12     	; 0xb10 <__stack+0x211>
 b04:	60 81       	ld	r22, Z
 b06:	71 81       	ldd	r23, Z+1	; 0x01
 b08:	80 e0       	ldi	r24, 0x00	; 0
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	0e 5f       	subi	r16, 0xFE	; 254
 b0e:	1f 4f       	sbci	r17, 0xFF	; 255
 b10:	a4 01       	movw	r20, r8
 b12:	d6 d0       	rcall	.+428    	; 0xcc0 <__ultoa_invert>
 b14:	a8 2e       	mov	r10, r24
 b16:	a8 18       	sub	r10, r8
 b18:	fb 2d       	mov	r31, r11
 b1a:	ff 77       	andi	r31, 0x7F	; 127
 b1c:	7f 2e       	mov	r7, r31
 b1e:	76 fe       	sbrs	r7, 6
 b20:	0b c0       	rjmp	.+22     	; 0xb38 <__stack+0x239>
 b22:	37 2d       	mov	r19, r7
 b24:	3e 7f       	andi	r19, 0xFE	; 254
 b26:	a5 14       	cp	r10, r5
 b28:	50 f4       	brcc	.+20     	; 0xb3e <__stack+0x23f>
 b2a:	74 fe       	sbrs	r7, 4
 b2c:	0a c0       	rjmp	.+20     	; 0xb42 <__stack+0x243>
 b2e:	72 fc       	sbrc	r7, 2
 b30:	08 c0       	rjmp	.+16     	; 0xb42 <__stack+0x243>
 b32:	37 2d       	mov	r19, r7
 b34:	3e 7e       	andi	r19, 0xEE	; 238
 b36:	05 c0       	rjmp	.+10     	; 0xb42 <__stack+0x243>
 b38:	ba 2c       	mov	r11, r10
 b3a:	37 2d       	mov	r19, r7
 b3c:	03 c0       	rjmp	.+6      	; 0xb44 <__stack+0x245>
 b3e:	ba 2c       	mov	r11, r10
 b40:	01 c0       	rjmp	.+2      	; 0xb44 <__stack+0x245>
 b42:	b5 2c       	mov	r11, r5
 b44:	34 ff       	sbrs	r19, 4
 b46:	0d c0       	rjmp	.+26     	; 0xb62 <__stack+0x263>
 b48:	fe 01       	movw	r30, r28
 b4a:	ea 0d       	add	r30, r10
 b4c:	f1 1d       	adc	r31, r1
 b4e:	80 81       	ld	r24, Z
 b50:	80 33       	cpi	r24, 0x30	; 48
 b52:	11 f4       	brne	.+4      	; 0xb58 <__stack+0x259>
 b54:	39 7e       	andi	r19, 0xE9	; 233
 b56:	09 c0       	rjmp	.+18     	; 0xb6a <__stack+0x26b>
 b58:	32 ff       	sbrs	r19, 2
 b5a:	06 c0       	rjmp	.+12     	; 0xb68 <__stack+0x269>
 b5c:	b3 94       	inc	r11
 b5e:	b3 94       	inc	r11
 b60:	04 c0       	rjmp	.+8      	; 0xb6a <__stack+0x26b>
 b62:	83 2f       	mov	r24, r19
 b64:	86 78       	andi	r24, 0x86	; 134
 b66:	09 f0       	breq	.+2      	; 0xb6a <__stack+0x26b>
 b68:	b3 94       	inc	r11
 b6a:	33 fd       	sbrc	r19, 3
 b6c:	12 c0       	rjmp	.+36     	; 0xb92 <__stack+0x293>
 b6e:	30 ff       	sbrs	r19, 0
 b70:	06 c0       	rjmp	.+12     	; 0xb7e <__stack+0x27f>
 b72:	5a 2c       	mov	r5, r10
 b74:	b3 14       	cp	r11, r3
 b76:	18 f4       	brcc	.+6      	; 0xb7e <__stack+0x27f>
 b78:	53 0c       	add	r5, r3
 b7a:	5b 18       	sub	r5, r11
 b7c:	b3 2c       	mov	r11, r3
 b7e:	b3 14       	cp	r11, r3
 b80:	60 f4       	brcc	.+24     	; 0xb9a <__stack+0x29b>
 b82:	b7 01       	movw	r22, r14
 b84:	80 e2       	ldi	r24, 0x20	; 32
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	3c 87       	std	Y+12, r19	; 0x0c
 b8a:	62 d0       	rcall	.+196    	; 0xc50 <fputc>
 b8c:	b3 94       	inc	r11
 b8e:	3c 85       	ldd	r19, Y+12	; 0x0c
 b90:	f6 cf       	rjmp	.-20     	; 0xb7e <__stack+0x27f>
 b92:	b3 14       	cp	r11, r3
 b94:	10 f4       	brcc	.+4      	; 0xb9a <__stack+0x29b>
 b96:	3b 18       	sub	r3, r11
 b98:	01 c0       	rjmp	.+2      	; 0xb9c <__stack+0x29d>
 b9a:	31 2c       	mov	r3, r1
 b9c:	34 ff       	sbrs	r19, 4
 b9e:	11 c0       	rjmp	.+34     	; 0xbc2 <__stack+0x2c3>
 ba0:	b7 01       	movw	r22, r14
 ba2:	80 e3       	ldi	r24, 0x30	; 48
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	3c 87       	std	Y+12, r19	; 0x0c
 ba8:	53 d0       	rcall	.+166    	; 0xc50 <fputc>
 baa:	3c 85       	ldd	r19, Y+12	; 0x0c
 bac:	32 ff       	sbrs	r19, 2
 bae:	16 c0       	rjmp	.+44     	; 0xbdc <__stack+0x2dd>
 bb0:	31 fd       	sbrc	r19, 1
 bb2:	03 c0       	rjmp	.+6      	; 0xbba <__stack+0x2bb>
 bb4:	88 e7       	ldi	r24, 0x78	; 120
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	02 c0       	rjmp	.+4      	; 0xbbe <__stack+0x2bf>
 bba:	88 e5       	ldi	r24, 0x58	; 88
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	b7 01       	movw	r22, r14
 bc0:	0c c0       	rjmp	.+24     	; 0xbda <__stack+0x2db>
 bc2:	83 2f       	mov	r24, r19
 bc4:	86 78       	andi	r24, 0x86	; 134
 bc6:	51 f0       	breq	.+20     	; 0xbdc <__stack+0x2dd>
 bc8:	31 ff       	sbrs	r19, 1
 bca:	02 c0       	rjmp	.+4      	; 0xbd0 <__stack+0x2d1>
 bcc:	8b e2       	ldi	r24, 0x2B	; 43
 bce:	01 c0       	rjmp	.+2      	; 0xbd2 <__stack+0x2d3>
 bd0:	80 e2       	ldi	r24, 0x20	; 32
 bd2:	37 fd       	sbrc	r19, 7
 bd4:	8d e2       	ldi	r24, 0x2D	; 45
 bd6:	b7 01       	movw	r22, r14
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	3a d0       	rcall	.+116    	; 0xc50 <fputc>
 bdc:	a5 14       	cp	r10, r5
 bde:	30 f4       	brcc	.+12     	; 0xbec <__stack+0x2ed>
 be0:	b7 01       	movw	r22, r14
 be2:	80 e3       	ldi	r24, 0x30	; 48
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	34 d0       	rcall	.+104    	; 0xc50 <fputc>
 be8:	5a 94       	dec	r5
 bea:	f8 cf       	rjmp	.-16     	; 0xbdc <__stack+0x2dd>
 bec:	aa 94       	dec	r10
 bee:	f4 01       	movw	r30, r8
 bf0:	ea 0d       	add	r30, r10
 bf2:	f1 1d       	adc	r31, r1
 bf4:	80 81       	ld	r24, Z
 bf6:	b7 01       	movw	r22, r14
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	2a d0       	rcall	.+84     	; 0xc50 <fputc>
 bfc:	a1 10       	cpse	r10, r1
 bfe:	f6 cf       	rjmp	.-20     	; 0xbec <__stack+0x2ed>
 c00:	33 20       	and	r3, r3
 c02:	09 f4       	brne	.+2      	; 0xc06 <__stack+0x307>
 c04:	5d ce       	rjmp	.-838    	; 0x8c0 <vfprintf+0x22>
 c06:	b7 01       	movw	r22, r14
 c08:	80 e2       	ldi	r24, 0x20	; 32
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	21 d0       	rcall	.+66     	; 0xc50 <fputc>
 c0e:	3a 94       	dec	r3
 c10:	f7 cf       	rjmp	.-18     	; 0xc00 <__stack+0x301>
 c12:	f7 01       	movw	r30, r14
 c14:	86 81       	ldd	r24, Z+6	; 0x06
 c16:	97 81       	ldd	r25, Z+7	; 0x07
 c18:	02 c0       	rjmp	.+4      	; 0xc1e <__stack+0x31f>
 c1a:	8f ef       	ldi	r24, 0xFF	; 255
 c1c:	9f ef       	ldi	r25, 0xFF	; 255
 c1e:	2c 96       	adiw	r28, 0x0c	; 12
 c20:	e2 e1       	ldi	r30, 0x12	; 18
 c22:	c8 c0       	rjmp	.+400    	; 0xdb4 <__epilogue_restores__>

00000c24 <strnlen_P>:
 c24:	fc 01       	movw	r30, r24
 c26:	05 90       	lpm	r0, Z+
 c28:	61 50       	subi	r22, 0x01	; 1
 c2a:	70 40       	sbci	r23, 0x00	; 0
 c2c:	01 10       	cpse	r0, r1
 c2e:	d8 f7       	brcc	.-10     	; 0xc26 <strnlen_P+0x2>
 c30:	80 95       	com	r24
 c32:	90 95       	com	r25
 c34:	8e 0f       	add	r24, r30
 c36:	9f 1f       	adc	r25, r31
 c38:	08 95       	ret

00000c3a <strnlen>:
 c3a:	fc 01       	movw	r30, r24
 c3c:	61 50       	subi	r22, 0x01	; 1
 c3e:	70 40       	sbci	r23, 0x00	; 0
 c40:	01 90       	ld	r0, Z+
 c42:	01 10       	cpse	r0, r1
 c44:	d8 f7       	brcc	.-10     	; 0xc3c <strnlen+0x2>
 c46:	80 95       	com	r24
 c48:	90 95       	com	r25
 c4a:	8e 0f       	add	r24, r30
 c4c:	9f 1f       	adc	r25, r31
 c4e:	08 95       	ret

00000c50 <fputc>:
 c50:	0f 93       	push	r16
 c52:	1f 93       	push	r17
 c54:	cf 93       	push	r28
 c56:	df 93       	push	r29
 c58:	fb 01       	movw	r30, r22
 c5a:	23 81       	ldd	r18, Z+3	; 0x03
 c5c:	21 fd       	sbrc	r18, 1
 c5e:	03 c0       	rjmp	.+6      	; 0xc66 <fputc+0x16>
 c60:	8f ef       	ldi	r24, 0xFF	; 255
 c62:	9f ef       	ldi	r25, 0xFF	; 255
 c64:	28 c0       	rjmp	.+80     	; 0xcb6 <fputc+0x66>
 c66:	22 ff       	sbrs	r18, 2
 c68:	16 c0       	rjmp	.+44     	; 0xc96 <fputc+0x46>
 c6a:	46 81       	ldd	r20, Z+6	; 0x06
 c6c:	57 81       	ldd	r21, Z+7	; 0x07
 c6e:	24 81       	ldd	r18, Z+4	; 0x04
 c70:	35 81       	ldd	r19, Z+5	; 0x05
 c72:	42 17       	cp	r20, r18
 c74:	53 07       	cpc	r21, r19
 c76:	44 f4       	brge	.+16     	; 0xc88 <fputc+0x38>
 c78:	a0 81       	ld	r26, Z
 c7a:	b1 81       	ldd	r27, Z+1	; 0x01
 c7c:	9d 01       	movw	r18, r26
 c7e:	2f 5f       	subi	r18, 0xFF	; 255
 c80:	3f 4f       	sbci	r19, 0xFF	; 255
 c82:	31 83       	std	Z+1, r19	; 0x01
 c84:	20 83       	st	Z, r18
 c86:	8c 93       	st	X, r24
 c88:	26 81       	ldd	r18, Z+6	; 0x06
 c8a:	37 81       	ldd	r19, Z+7	; 0x07
 c8c:	2f 5f       	subi	r18, 0xFF	; 255
 c8e:	3f 4f       	sbci	r19, 0xFF	; 255
 c90:	37 83       	std	Z+7, r19	; 0x07
 c92:	26 83       	std	Z+6, r18	; 0x06
 c94:	10 c0       	rjmp	.+32     	; 0xcb6 <fputc+0x66>
 c96:	eb 01       	movw	r28, r22
 c98:	09 2f       	mov	r16, r25
 c9a:	18 2f       	mov	r17, r24
 c9c:	00 84       	ldd	r0, Z+8	; 0x08
 c9e:	f1 85       	ldd	r31, Z+9	; 0x09
 ca0:	e0 2d       	mov	r30, r0
 ca2:	09 95       	icall
 ca4:	89 2b       	or	r24, r25
 ca6:	e1 f6       	brne	.-72     	; 0xc60 <fputc+0x10>
 ca8:	8e 81       	ldd	r24, Y+6	; 0x06
 caa:	9f 81       	ldd	r25, Y+7	; 0x07
 cac:	01 96       	adiw	r24, 0x01	; 1
 cae:	9f 83       	std	Y+7, r25	; 0x07
 cb0:	8e 83       	std	Y+6, r24	; 0x06
 cb2:	81 2f       	mov	r24, r17
 cb4:	90 2f       	mov	r25, r16
 cb6:	df 91       	pop	r29
 cb8:	cf 91       	pop	r28
 cba:	1f 91       	pop	r17
 cbc:	0f 91       	pop	r16
 cbe:	08 95       	ret

00000cc0 <__ultoa_invert>:
 cc0:	fa 01       	movw	r30, r20
 cc2:	aa 27       	eor	r26, r26
 cc4:	28 30       	cpi	r18, 0x08	; 8
 cc6:	51 f1       	breq	.+84     	; 0xd1c <__ultoa_invert+0x5c>
 cc8:	20 31       	cpi	r18, 0x10	; 16
 cca:	81 f1       	breq	.+96     	; 0xd2c <__ultoa_invert+0x6c>
 ccc:	e8 94       	clt
 cce:	6f 93       	push	r22
 cd0:	6e 7f       	andi	r22, 0xFE	; 254
 cd2:	6e 5f       	subi	r22, 0xFE	; 254
 cd4:	7f 4f       	sbci	r23, 0xFF	; 255
 cd6:	8f 4f       	sbci	r24, 0xFF	; 255
 cd8:	9f 4f       	sbci	r25, 0xFF	; 255
 cda:	af 4f       	sbci	r26, 0xFF	; 255
 cdc:	b1 e0       	ldi	r27, 0x01	; 1
 cde:	3e d0       	rcall	.+124    	; 0xd5c <__ultoa_invert+0x9c>
 ce0:	b4 e0       	ldi	r27, 0x04	; 4
 ce2:	3c d0       	rcall	.+120    	; 0xd5c <__ultoa_invert+0x9c>
 ce4:	67 0f       	add	r22, r23
 ce6:	78 1f       	adc	r23, r24
 ce8:	89 1f       	adc	r24, r25
 cea:	9a 1f       	adc	r25, r26
 cec:	a1 1d       	adc	r26, r1
 cee:	68 0f       	add	r22, r24
 cf0:	79 1f       	adc	r23, r25
 cf2:	8a 1f       	adc	r24, r26
 cf4:	91 1d       	adc	r25, r1
 cf6:	a1 1d       	adc	r26, r1
 cf8:	6a 0f       	add	r22, r26
 cfa:	71 1d       	adc	r23, r1
 cfc:	81 1d       	adc	r24, r1
 cfe:	91 1d       	adc	r25, r1
 d00:	a1 1d       	adc	r26, r1
 d02:	20 d0       	rcall	.+64     	; 0xd44 <__ultoa_invert+0x84>
 d04:	09 f4       	brne	.+2      	; 0xd08 <__ultoa_invert+0x48>
 d06:	68 94       	set
 d08:	3f 91       	pop	r19
 d0a:	2a e0       	ldi	r18, 0x0A	; 10
 d0c:	26 9f       	mul	r18, r22
 d0e:	11 24       	eor	r1, r1
 d10:	30 19       	sub	r19, r0
 d12:	30 5d       	subi	r19, 0xD0	; 208
 d14:	31 93       	st	Z+, r19
 d16:	de f6       	brtc	.-74     	; 0xcce <__ultoa_invert+0xe>
 d18:	cf 01       	movw	r24, r30
 d1a:	08 95       	ret
 d1c:	46 2f       	mov	r20, r22
 d1e:	47 70       	andi	r20, 0x07	; 7
 d20:	40 5d       	subi	r20, 0xD0	; 208
 d22:	41 93       	st	Z+, r20
 d24:	b3 e0       	ldi	r27, 0x03	; 3
 d26:	0f d0       	rcall	.+30     	; 0xd46 <__ultoa_invert+0x86>
 d28:	c9 f7       	brne	.-14     	; 0xd1c <__ultoa_invert+0x5c>
 d2a:	f6 cf       	rjmp	.-20     	; 0xd18 <__ultoa_invert+0x58>
 d2c:	46 2f       	mov	r20, r22
 d2e:	4f 70       	andi	r20, 0x0F	; 15
 d30:	40 5d       	subi	r20, 0xD0	; 208
 d32:	4a 33       	cpi	r20, 0x3A	; 58
 d34:	18 f0       	brcs	.+6      	; 0xd3c <__ultoa_invert+0x7c>
 d36:	49 5d       	subi	r20, 0xD9	; 217
 d38:	31 fd       	sbrc	r19, 1
 d3a:	40 52       	subi	r20, 0x20	; 32
 d3c:	41 93       	st	Z+, r20
 d3e:	02 d0       	rcall	.+4      	; 0xd44 <__ultoa_invert+0x84>
 d40:	a9 f7       	brne	.-22     	; 0xd2c <__ultoa_invert+0x6c>
 d42:	ea cf       	rjmp	.-44     	; 0xd18 <__ultoa_invert+0x58>
 d44:	b4 e0       	ldi	r27, 0x04	; 4
 d46:	a6 95       	lsr	r26
 d48:	97 95       	ror	r25
 d4a:	87 95       	ror	r24
 d4c:	77 95       	ror	r23
 d4e:	67 95       	ror	r22
 d50:	ba 95       	dec	r27
 d52:	c9 f7       	brne	.-14     	; 0xd46 <__ultoa_invert+0x86>
 d54:	00 97       	sbiw	r24, 0x00	; 0
 d56:	61 05       	cpc	r22, r1
 d58:	71 05       	cpc	r23, r1
 d5a:	08 95       	ret
 d5c:	9b 01       	movw	r18, r22
 d5e:	ac 01       	movw	r20, r24
 d60:	0a 2e       	mov	r0, r26
 d62:	06 94       	lsr	r0
 d64:	57 95       	ror	r21
 d66:	47 95       	ror	r20
 d68:	37 95       	ror	r19
 d6a:	27 95       	ror	r18
 d6c:	ba 95       	dec	r27
 d6e:	c9 f7       	brne	.-14     	; 0xd62 <__ultoa_invert+0xa2>
 d70:	62 0f       	add	r22, r18
 d72:	73 1f       	adc	r23, r19
 d74:	84 1f       	adc	r24, r20
 d76:	95 1f       	adc	r25, r21
 d78:	a0 1d       	adc	r26, r0
 d7a:	08 95       	ret

00000d7c <__prologue_saves__>:
 d7c:	2f 92       	push	r2
 d7e:	3f 92       	push	r3
 d80:	4f 92       	push	r4
 d82:	5f 92       	push	r5
 d84:	6f 92       	push	r6
 d86:	7f 92       	push	r7
 d88:	8f 92       	push	r8
 d8a:	9f 92       	push	r9
 d8c:	af 92       	push	r10
 d8e:	bf 92       	push	r11
 d90:	cf 92       	push	r12
 d92:	df 92       	push	r13
 d94:	ef 92       	push	r14
 d96:	ff 92       	push	r15
 d98:	0f 93       	push	r16
 d9a:	1f 93       	push	r17
 d9c:	cf 93       	push	r28
 d9e:	df 93       	push	r29
 da0:	cd b7       	in	r28, 0x3d	; 61
 da2:	de b7       	in	r29, 0x3e	; 62
 da4:	ca 1b       	sub	r28, r26
 da6:	db 0b       	sbc	r29, r27
 da8:	0f b6       	in	r0, 0x3f	; 63
 daa:	f8 94       	cli
 dac:	de bf       	out	0x3e, r29	; 62
 dae:	0f be       	out	0x3f, r0	; 63
 db0:	cd bf       	out	0x3d, r28	; 61
 db2:	09 94       	ijmp

00000db4 <__epilogue_restores__>:
 db4:	2a 88       	ldd	r2, Y+18	; 0x12
 db6:	39 88       	ldd	r3, Y+17	; 0x11
 db8:	48 88       	ldd	r4, Y+16	; 0x10
 dba:	5f 84       	ldd	r5, Y+15	; 0x0f
 dbc:	6e 84       	ldd	r6, Y+14	; 0x0e
 dbe:	7d 84       	ldd	r7, Y+13	; 0x0d
 dc0:	8c 84       	ldd	r8, Y+12	; 0x0c
 dc2:	9b 84       	ldd	r9, Y+11	; 0x0b
 dc4:	aa 84       	ldd	r10, Y+10	; 0x0a
 dc6:	b9 84       	ldd	r11, Y+9	; 0x09
 dc8:	c8 84       	ldd	r12, Y+8	; 0x08
 dca:	df 80       	ldd	r13, Y+7	; 0x07
 dcc:	ee 80       	ldd	r14, Y+6	; 0x06
 dce:	fd 80       	ldd	r15, Y+5	; 0x05
 dd0:	0c 81       	ldd	r16, Y+4	; 0x04
 dd2:	1b 81       	ldd	r17, Y+3	; 0x03
 dd4:	aa 81       	ldd	r26, Y+2	; 0x02
 dd6:	b9 81       	ldd	r27, Y+1	; 0x01
 dd8:	ce 0f       	add	r28, r30
 dda:	d1 1d       	adc	r29, r1
 ddc:	0f b6       	in	r0, 0x3f	; 63
 dde:	f8 94       	cli
 de0:	de bf       	out	0x3e, r29	; 62
 de2:	0f be       	out	0x3f, r0	; 63
 de4:	cd bf       	out	0x3d, r28	; 61
 de6:	ed 01       	movw	r28, r26
 de8:	08 95       	ret

00000dea <_exit>:
 dea:	f8 94       	cli

00000dec <__stop_program>:
 dec:	ff cf       	rjmp	.-2      	; 0xdec <__stop_program>
