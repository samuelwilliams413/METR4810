
MEGA_UART_INTERRUPT_EXAMPLE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000053a  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  00800118  00800118  000005e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001110  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000802  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d09  00000000  00000000  00001fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00002cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000efe1  00000000  00000000  00002e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076b  00000000  00000000  00011e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00012584  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000058e  00000000  00000000  000126ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	73 c0       	rjmp	.+230    	; 0x130 <__vector_18>
  4a:	00 00       	nop
  4c:	29 c0       	rjmp	.+82     	; 0xa0 <__vector_19>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3e       	cpi	r26, 0xEA	; 234
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	42 d2       	rcall	.+1156   	; 0x520 <main>
  9c:	4c c2       	rjmp	.+1176   	; 0x536 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <__vector_19>:
 *
 * This handler is called each time the UART data register is available for
 * sending data.
 */
ISR(UART0_DATA_EMPTY_IRQ)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	4f 93       	push	r20
  b0:	5f 93       	push	r21
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
  be:	e5 ee       	ldi	r30, 0xE5	; 229
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	91 81       	ldd	r25, Z+1	; 0x01
  c4:	80 81       	ld	r24, Z
	// if there is data in the ring buffer, fetch it and send it
	if (!ring_buffer_is_empty(&ring_buffer_out)) {
  c6:	98 17       	cp	r25, r24
  c8:	f9 f0       	breq	.+62     	; 0x108 <__vector_19+0x68>
  ca:	91 81       	ldd	r25, Z+1	; 0x01
  cc:	80 81       	ld	r24, Z
 *
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
  ce:	98 13       	cpse	r25, r24
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <__vector_19+0x34>
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__vector_19+0x32>
	uint8_t data = ring->buffer[ring->read_offset];
  d4:	e5 ee       	ldi	r30, 0xE5	; 229
  d6:	f1 e0       	ldi	r31, 0x01	; 1
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	a3 81       	ldd	r26, Z+3	; 0x03
  dc:	b4 81       	ldd	r27, Z+4	; 0x04
  de:	a8 0f       	add	r26, r24
  e0:	b1 1d       	adc	r27, r1
  e2:	9c 91       	ld	r25, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
  e4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
  e6:	48 2f       	mov	r20, r24
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	22 81       	ldd	r18, Z+2	; 0x02
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	31 09       	sbc	r19, r1
  f2:	42 17       	cp	r20, r18
  f4:	53 07       	cpc	r21, r19
  f6:	11 f0       	breq	.+4      	; 0xfc <__vector_19+0x5c>
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	01 c0       	rjmp	.+2      	; 0xfe <__vector_19+0x5e>
  fc:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
  fe:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <ring_buffer_out+0x1>
		UDR0 = ring_buffer_get(&ring_buffer_out);
 102:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 106:	05 c0       	rjmp	.+10     	; 0x112 <__vector_19+0x72>
	}
	else {
		// no more data to send, turn off data ready interrupt
		UCSR0B &= ~(1 << UDRIE0);
 108:	e1 ec       	ldi	r30, 0xC1	; 193
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8f 7d       	andi	r24, 0xDF	; 223
 110:	80 83       	st	Z, r24
	}
}
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	5f 91       	pop	r21
 120:	4f 91       	pop	r20
 122:	3f 91       	pop	r19
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <__vector_18>:
 * \brief Data RX interrupt handler
 *
 * This is the handler for UART receive data
 */
ISR(UART0_RX_IRQ)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	ring_buffer_put(&ring_buffer_in, UDR0);
 152:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
 156:	e0 ee       	ldi	r30, 0xE0	; 224
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	41 81       	ldd	r20, Z+1	; 0x01
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 15c:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 15e:	68 2f       	mov	r22, r24
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	22 81       	ldd	r18, Z+2	; 0x02
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	21 50       	subi	r18, 0x01	; 1
 168:	31 09       	sbc	r19, r1
 16a:	62 17       	cp	r22, r18
 16c:	73 07       	cpc	r23, r19
 16e:	11 f0       	breq	.+4      	; 0x174 <__vector_18+0x44>
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	01 c0       	rjmp	.+2      	; 0x176 <__vector_18+0x46>
 174:	80 e0       	ldi	r24, 0x00	; 0
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
 176:	48 13       	cpse	r20, r24
 178:	01 c0       	rjmp	.+2      	; 0x17c <__vector_18+0x4c>
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__vector_18+0x4a>
	ring->buffer[ring->write_offset] = data;
 17c:	e0 ee       	ldi	r30, 0xE0	; 224
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	80 81       	ld	r24, Z
 182:	a3 81       	ldd	r26, Z+3	; 0x03
 184:	b4 81       	ldd	r27, Z+4	; 0x04
 186:	a8 0f       	add	r26, r24
 188:	b1 1d       	adc	r27, r1
 18a:	9c 93       	st	X, r25
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 18c:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 18e:	48 2f       	mov	r20, r24
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	22 81       	ldd	r18, Z+2	; 0x02
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	21 50       	subi	r18, 0x01	; 1
 198:	31 09       	sbc	r19, r1
 19a:	42 17       	cp	r20, r18
 19c:	53 07       	cpc	r21, r19
 19e:	11 f0       	breq	.+4      	; 0x1a4 <__vector_18+0x74>
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <__vector_18+0x76>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
 1a6:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <ring_buffer_in>
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <uart_init>:
 * This function will initialize the UART baud rate registers with the correct
 * values using the AVR libc setbaud utility. In addition set the UART to
 * 8-bit, 1 stop and no parity.
 */
extern void uart_init(void)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	69 97       	sbiw	r28, 0x19	; 25
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	de bf       	out	0x3e, r29	; 62
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	cd bf       	out	0x3d, r28	; 61
#if defined UBRR0H
	// get the values from the setbaud tool
	UBRR0H = UBRRH_VALUE;
 1e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 1e4:	8c e0       	ldi	r24, 0x0C	; 12
 1e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#else
#error "Device is not supported by the driver"
#endif

#if USE_2X
	UCSR0A |= (1 << U2X0);
 1ea:	e0 ec       	ldi	r30, 0xC0	; 192
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	80 83       	st	Z, r24
#endif

	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 1f4:	88 e9       	ldi	r24, 0x98	; 152
 1f6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
 200:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
 202:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
 204:	84 e6       	ldi	r24, 0x64	; 100
 206:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
 208:	28 e1       	ldi	r18, 0x18	; 24
 20a:	31 e0       	ldi	r19, 0x01	; 1
 20c:	39 8f       	std	Y+25, r19	; 0x19
 20e:	28 8f       	std	Y+24, r18	; 0x18
	return ring;
 210:	95 e0       	ldi	r25, 0x05	; 5
 212:	fe 01       	movw	r30, r28
 214:	75 96       	adiw	r30, 0x15	; 21
 216:	de 01       	movw	r26, r28
 218:	11 96       	adiw	r26, 0x01	; 1
 21a:	01 90       	ld	r0, Z+
 21c:	0d 92       	st	X+, r0
 21e:	9a 95       	dec	r25
 220:	e1 f7       	brne	.-8      	; 0x21a <uart_init+0x4e>
 222:	95 e0       	ldi	r25, 0x05	; 5
 224:	fe 01       	movw	r30, r28
 226:	31 96       	adiw	r30, 0x01	; 1
 228:	de 01       	movw	r26, r28
 22a:	16 96       	adiw	r26, 0x06	; 6
 22c:	01 90       	ld	r0, Z+
 22e:	0d 92       	st	X+, r0
 230:	9a 95       	dec	r25
 232:	e1 f7       	brne	.-8      	; 0x22c <uart_init+0x60>
			(0 << UPM01) | (0 << UPM00) | (0 << UMSEL01) |
			(0 << UMSEL00);

	// initialize the in and out buffer for the UART
	ring_buffer_out = ring_buffer_init(out_buffer, BUFFER_SIZE);
 234:	95 e0       	ldi	r25, 0x05	; 5
 236:	fe 01       	movw	r30, r28
 238:	36 96       	adiw	r30, 0x06	; 6
 23a:	a5 ee       	ldi	r26, 0xE5	; 229
 23c:	b1 e0       	ldi	r27, 0x01	; 1
 23e:	01 90       	ld	r0, Z+
 240:	0d 92       	st	X+, r0
 242:	9a 95       	dec	r25
 244:	e1 f7       	brne	.-8      	; 0x23e <uart_init+0x72>
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
 246:	1d 8a       	std	Y+21, r1	; 0x15
	ring.read_offset = 0;
 248:	1e 8a       	std	Y+22, r1	; 0x16
	ring.size = size;
 24a:	8f 8b       	std	Y+23, r24	; 0x17
	ring.buffer = buffer;
 24c:	8c e7       	ldi	r24, 0x7C	; 124
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	99 8f       	std	Y+25, r25	; 0x19
 252:	88 8f       	std	Y+24, r24	; 0x18
	return ring;
 254:	85 e0       	ldi	r24, 0x05	; 5
 256:	fe 01       	movw	r30, r28
 258:	75 96       	adiw	r30, 0x15	; 21
 25a:	de 01       	movw	r26, r28
 25c:	1b 96       	adiw	r26, 0x0b	; 11
 25e:	01 90       	ld	r0, Z+
 260:	0d 92       	st	X+, r0
 262:	8a 95       	dec	r24
 264:	e1 f7       	brne	.-8      	; 0x25e <uart_init+0x92>
 266:	85 e0       	ldi	r24, 0x05	; 5
 268:	fe 01       	movw	r30, r28
 26a:	3b 96       	adiw	r30, 0x0b	; 11
 26c:	de 01       	movw	r26, r28
 26e:	50 96       	adiw	r26, 0x10	; 16
 270:	01 90       	ld	r0, Z+
 272:	0d 92       	st	X+, r0
 274:	8a 95       	dec	r24
 276:	e1 f7       	brne	.-8      	; 0x270 <uart_init+0xa4>
	ring_buffer_in = ring_buffer_init(in_buffer, BUFFER_SIZE);
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	fe 01       	movw	r30, r28
 27c:	70 96       	adiw	r30, 0x10	; 16
 27e:	a0 ee       	ldi	r26, 0xE0	; 224
 280:	b1 e0       	ldi	r27, 0x01	; 1
 282:	01 90       	ld	r0, Z+
 284:	0d 92       	st	X+, r0
 286:	8a 95       	dec	r24
 288:	e1 f7       	brne	.-8      	; 0x282 <uart_init+0xb6>
}
 28a:	69 96       	adiw	r28, 0x19	; 25
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <send_confirmation_msg>:
	return !ring_buffer_is_empty(&ring_buffer_in);
}


extern void send_confirmation_msg(uint8_t data)
{
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	a0 e0       	ldi	r26, 0x00	; 0
 2aa:	b1 e0       	ldi	r27, 0x01	; 1
 2ac:	6a e0       	ldi	r22, 0x0A	; 10
 2ae:	71 e0       	ldi	r23, 0x01	; 1
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 2b0:	e5 ee       	ldi	r30, 0xE5	; 229
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 2b6:	21 81       	ldd	r18, Z+1	; 0x01
 2b8:	90 81       	ld	r25, Z
	uint8_t cnt = 0;
	for (cnt = 0; cnt < strlen(test_string); cnt++) {
		while(!ring_buffer_is_empty(&ring_buffer_out)) {
 2ba:	29 13       	cpse	r18, r25
 2bc:	fc cf       	rjmp	.-8      	; 0x2b6 <send_confirmation_msg+0x1a>
			;
		}
		uart_putchar(test_string[cnt]);
 2be:	1d 91       	ld	r17, X+
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
 2c0:	f8 94       	cli
 2c2:	21 81       	ldd	r18, Z+1	; 0x01
 2c4:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) {
 2c6:	29 13       	cpse	r18, r25
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <send_confirmation_msg+0x38>
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
 2ca:	c1 ec       	ldi	r28, 0xC1	; 193
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
 2ce:	98 81       	ld	r25, Y
 2d0:	90 62       	ori	r25, 0x20	; 32
 2d2:	98 83       	st	Y, r25
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
 2d4:	01 81       	ldd	r16, Z+1	; 0x01
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 2d6:	90 81       	ld	r25, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 2d8:	e9 2e       	mov	r14, r25
 2da:	f1 2c       	mov	r15, r1
 2dc:	22 81       	ldd	r18, Z+2	; 0x02
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	31 09       	sbc	r19, r1
 2e4:	e2 16       	cp	r14, r18
 2e6:	f3 06       	cpc	r15, r19
 2e8:	11 f0       	breq	.+4      	; 0x2ee <send_confirmation_msg+0x52>
 2ea:	9f 5f       	subi	r25, 0xFF	; 255
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <send_confirmation_msg+0x54>
 2ee:	94 2f       	mov	r25, r20
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
 2f0:	09 13       	cpse	r16, r25
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <send_confirmation_msg+0x5a>
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <send_confirmation_msg+0x58>
	ring->buffer[ring->write_offset] = data;
 2f6:	90 81       	ld	r25, Z
 2f8:	23 81       	ldd	r18, Z+3	; 0x03
 2fa:	34 81       	ldd	r19, Z+4	; 0x04
 2fc:	29 0f       	add	r18, r25
 2fe:	31 1d       	adc	r19, r1
 300:	e9 01       	movw	r28, r18
 302:	18 83       	st	Y, r17
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 304:	90 81       	ld	r25, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 306:	09 2f       	mov	r16, r25
 308:	10 e0       	ldi	r17, 0x00	; 0
 30a:	22 81       	ldd	r18, Z+2	; 0x02
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	31 09       	sbc	r19, r1
 312:	02 17       	cp	r16, r18
 314:	13 07       	cpc	r17, r19
 316:	11 f0       	breq	.+4      	; 0x31c <send_confirmation_msg+0x80>
 318:	9f 5f       	subi	r25, 0xFF	; 255
 31a:	01 c0       	rjmp	.+2      	; 0x31e <send_confirmation_msg+0x82>
 31c:	94 2f       	mov	r25, r20
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
 31e:	90 83       	st	Z, r25
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
 320:	78 94       	sei


extern void send_confirmation_msg(uint8_t data)
{
	uint8_t cnt = 0;
	for (cnt = 0; cnt < strlen(test_string); cnt++) {
 322:	6a 17       	cp	r22, r26
 324:	7b 07       	cpc	r23, r27
 326:	39 f6       	brne	.-114    	; 0x2b6 <send_confirmation_msg+0x1a>
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 328:	e5 ee       	ldi	r30, 0xE5	; 229
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	21 81       	ldd	r18, Z+1	; 0x01
 32e:	90 81       	ld	r25, Z
		while(!ring_buffer_is_empty(&ring_buffer_out)) {
			;
		}
		uart_putchar(test_string[cnt]);
	}
	while(!ring_buffer_is_empty(&ring_buffer_out)) {
 330:	29 13       	cpse	r18, r25
 332:	fc cf       	rjmp	.-8      	; 0x32c <send_confirmation_msg+0x90>
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
 334:	f8 94       	cli
 336:	e5 ee       	ldi	r30, 0xE5	; 229
 338:	f1 e0       	ldi	r31, 0x01	; 1
 33a:	21 81       	ldd	r18, Z+1	; 0x01
 33c:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) {
 33e:	29 13       	cpse	r18, r25
 340:	05 c0       	rjmp	.+10     	; 0x34c <send_confirmation_msg+0xb0>
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
 342:	e1 ec       	ldi	r30, 0xC1	; 193
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	90 81       	ld	r25, Z
 348:	90 62       	ori	r25, 0x20	; 32
 34a:	90 83       	st	Z, r25
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
 34c:	e5 ee       	ldi	r30, 0xE5	; 229
 34e:	f1 e0       	ldi	r31, 0x01	; 1
 350:	41 81       	ldd	r20, Z+1	; 0x01
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 352:	90 81       	ld	r25, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 354:	69 2f       	mov	r22, r25
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	22 81       	ldd	r18, Z+2	; 0x02
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	31 09       	sbc	r19, r1
 360:	62 17       	cp	r22, r18
 362:	73 07       	cpc	r23, r19
 364:	11 f0       	breq	.+4      	; 0x36a <send_confirmation_msg+0xce>
 366:	9f 5f       	subi	r25, 0xFF	; 255
 368:	01 c0       	rjmp	.+2      	; 0x36c <send_confirmation_msg+0xd0>
 36a:	90 e0       	ldi	r25, 0x00	; 0
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
 36c:	49 13       	cpse	r20, r25
 36e:	01 c0       	rjmp	.+2      	; 0x372 <send_confirmation_msg+0xd6>
 370:	ff cf       	rjmp	.-2      	; 0x370 <send_confirmation_msg+0xd4>
	ring->buffer[ring->write_offset] = data;
 372:	e5 ee       	ldi	r30, 0xE5	; 229
 374:	f1 e0       	ldi	r31, 0x01	; 1
 376:	90 81       	ld	r25, Z
 378:	a3 81       	ldd	r26, Z+3	; 0x03
 37a:	b4 81       	ldd	r27, Z+4	; 0x04
 37c:	a9 0f       	add	r26, r25
 37e:	b1 1d       	adc	r27, r1
 380:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 382:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 384:	48 2f       	mov	r20, r24
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	22 81       	ldd	r18, Z+2	; 0x02
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	31 09       	sbc	r19, r1
 390:	42 17       	cp	r20, r18
 392:	53 07       	cpc	r21, r19
 394:	11 f0       	breq	.+4      	; 0x39a <send_confirmation_msg+0xfe>
 396:	8f 5f       	subi	r24, 0xFF	; 255
 398:	01 c0       	rjmp	.+2      	; 0x39c <send_confirmation_msg+0x100>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
 39c:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <ring_buffer_out>
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
 3a0:	78 94       	sei
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 3a2:	e5 ee       	ldi	r30, 0xE5	; 229
 3a4:	f1 e0       	ldi	r31, 0x01	; 1
 3a6:	91 81       	ldd	r25, Z+1	; 0x01
 3a8:	80 81       	ld	r24, Z
	while(!ring_buffer_is_empty(&ring_buffer_out)) {
		;
	}
	uart_putchar(data);
	for (cnt = 0; cnt < strlen(test_string2); cnt++) {
		while(!ring_buffer_is_empty(&ring_buffer_out)) {
 3aa:	98 13       	cpse	r25, r24
 3ac:	fc cf       	rjmp	.-8      	; 0x3a6 <send_confirmation_msg+0x10a>
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
 3ae:	f8 94       	cli
 3b0:	e5 ee       	ldi	r30, 0xE5	; 229
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	91 81       	ldd	r25, Z+1	; 0x01
 3b6:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) {
 3b8:	98 13       	cpse	r25, r24
 3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <send_confirmation_msg+0x12a>
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
 3bc:	e1 ec       	ldi	r30, 0xC1	; 193
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	80 62       	ori	r24, 0x20	; 32
 3c4:	80 83       	st	Z, r24
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
 3c6:	e5 ee       	ldi	r30, 0xE5	; 229
 3c8:	f1 e0       	ldi	r31, 0x01	; 1
 3ca:	91 81       	ldd	r25, Z+1	; 0x01
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 3cc:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 3ce:	48 2f       	mov	r20, r24
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	22 81       	ldd	r18, Z+2	; 0x02
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	31 09       	sbc	r19, r1
 3da:	42 17       	cp	r20, r18
 3dc:	53 07       	cpc	r21, r19
 3de:	11 f0       	breq	.+4      	; 0x3e4 <send_confirmation_msg+0x148>
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <send_confirmation_msg+0x14a>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
 3e6:	98 13       	cpse	r25, r24
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <send_confirmation_msg+0x150>
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <send_confirmation_msg+0x14e>
	ring->buffer[ring->write_offset] = data;
 3ec:	e5 ee       	ldi	r30, 0xE5	; 229
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	80 81       	ld	r24, Z
 3f2:	a3 81       	ldd	r26, Z+3	; 0x03
 3f4:	b4 81       	ldd	r27, Z+4	; 0x04
 3f6:	a8 0f       	add	r26, r24
 3f8:	b1 1d       	adc	r27, r1
 3fa:	8d e5       	ldi	r24, 0x5D	; 93
 3fc:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 3fe:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 400:	48 2f       	mov	r20, r24
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	22 81       	ldd	r18, Z+2	; 0x02
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	21 50       	subi	r18, 0x01	; 1
 40a:	31 09       	sbc	r19, r1
 40c:	42 17       	cp	r20, r18
 40e:	53 07       	cpc	r21, r19
 410:	11 f0       	breq	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	8f 5f       	subi	r24, 0xFF	; 255
 414:	01 c0       	rjmp	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
 418:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <ring_buffer_out>
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
 41c:	78 94       	sei
		while(!ring_buffer_is_empty(&ring_buffer_out)) {
			;
		}
		uart_putchar(test_string2[cnt]);
	}
}
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	08 95       	ret

0000042c <send_str>:

extern void send_str(char msg[])
{
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	ac 01       	movw	r20, r24
	uint8_t cnt = 0;
	for (cnt = 0; cnt < strlen(msg); cnt++) {
 436:	10 e0       	ldi	r17, 0x00	; 0
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 438:	e5 ee       	ldi	r30, 0xE5	; 229
 43a:	f1 e0       	ldi	r31, 0x01	; 1
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) {
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
 43c:	61 ec       	ldi	r22, 0xC1	; 193
 43e:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 440:	00 e0       	ldi	r16, 0x00	; 0
}

extern void send_str(char msg[])
{
	uint8_t cnt = 0;
	for (cnt = 0; cnt < strlen(msg); cnt++) {
 442:	37 c0       	rjmp	.+110    	; 0x4b2 <send_str+0x86>
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 444:	21 81       	ldd	r18, Z+1	; 0x01
 446:	90 81       	ld	r25, Z
		while(!ring_buffer_is_empty(&ring_buffer_out)) {
 448:	29 13       	cpse	r18, r25
 44a:	fc cf       	rjmp	.-8      	; 0x444 <send_str+0x18>
			;
		}
		uart_putchar(msg[cnt]);
 44c:	c4 0f       	add	r28, r20
 44e:	d5 1f       	adc	r29, r21
 450:	98 81       	ld	r25, Y
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
 452:	f8 94       	cli
 454:	21 81       	ldd	r18, Z+1	; 0x01
 456:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) {
 458:	28 13       	cpse	r18, r24
 45a:	04 c0       	rjmp	.+8      	; 0x464 <send_str+0x38>
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
 45c:	db 01       	movw	r26, r22
 45e:	8c 91       	ld	r24, X
 460:	80 62       	ori	r24, 0x20	; 32
 462:	8c 93       	st	X, r24
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
 464:	a1 81       	ldd	r26, Z+1	; 0x01
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 466:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 468:	c8 2f       	mov	r28, r24
 46a:	d0 e0       	ldi	r29, 0x00	; 0
 46c:	22 81       	ldd	r18, Z+2	; 0x02
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	21 50       	subi	r18, 0x01	; 1
 472:	31 09       	sbc	r19, r1
 474:	c2 17       	cp	r28, r18
 476:	d3 07       	cpc	r29, r19
 478:	11 f0       	breq	.+4      	; 0x47e <send_str+0x52>
 47a:	8f 5f       	subi	r24, 0xFF	; 255
 47c:	01 c0       	rjmp	.+2      	; 0x480 <send_str+0x54>
 47e:	80 2f       	mov	r24, r16
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
 480:	a8 13       	cpse	r26, r24
 482:	01 c0       	rjmp	.+2      	; 0x486 <send_str+0x5a>
 484:	ff cf       	rjmp	.-2      	; 0x484 <send_str+0x58>
	ring->buffer[ring->write_offset] = data;
 486:	80 81       	ld	r24, Z
 488:	a3 81       	ldd	r26, Z+3	; 0x03
 48a:	b4 81       	ldd	r27, Z+4	; 0x04
 48c:	a8 0f       	add	r26, r24
 48e:	b1 1d       	adc	r27, r1
 490:	9c 93       	st	X, r25
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
 492:	90 81       	ld	r25, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 494:	a9 2f       	mov	r26, r25
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	22 81       	ldd	r18, Z+2	; 0x02
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	31 09       	sbc	r19, r1
 4a0:	a2 17       	cp	r26, r18
 4a2:	b3 07       	cpc	r27, r19
 4a4:	11 f0       	breq	.+4      	; 0x4aa <send_str+0x7e>
 4a6:	9f 5f       	subi	r25, 0xFF	; 255
 4a8:	01 c0       	rjmp	.+2      	; 0x4ac <send_str+0x80>
 4aa:	90 2f       	mov	r25, r16
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
 4ac:	90 83       	st	Z, r25
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
 4ae:	78 94       	sei
}

extern void send_str(char msg[])
{
	uint8_t cnt = 0;
	for (cnt = 0; cnt < strlen(msg); cnt++) {
 4b0:	1f 5f       	subi	r17, 0xFF	; 255
 4b2:	c1 2f       	mov	r28, r17
 4b4:	d0 e0       	ldi	r29, 0x00	; 0
 4b6:	da 01       	movw	r26, r20
 4b8:	0d 90       	ld	r0, X+
 4ba:	00 20       	and	r0, r0
 4bc:	e9 f7       	brne	.-6      	; 0x4b8 <send_str+0x8c>
 4be:	11 97       	sbiw	r26, 0x01	; 1
 4c0:	a4 1b       	sub	r26, r20
 4c2:	b5 0b       	sbc	r27, r21
 4c4:	ca 17       	cp	r28, r26
 4c6:	db 07       	cpc	r29, r27
 4c8:	08 f4       	brcc	.+2      	; 0x4cc <send_str+0xa0>
 4ca:	bc cf       	rjmp	.-136    	; 0x444 <send_str+0x18>
		while(!ring_buffer_is_empty(&ring_buffer_out)) {
			;
		}
		uart_putchar(msg[cnt]);
	}
}
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	08 95       	ret

000004d6 <get_char>:
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
 4d6:	e0 ee       	ldi	r30, 0xE0	; 224
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	91 81       	ldd	r25, Z+1	; 0x01
 4dc:	80 81       	ld	r24, Z

extern uint8_t get_char(void)
{	
	uint8_t data = '\0';
	if (uart_char_waiting()) {
 4de:	98 17       	cp	r25, r24
 4e0:	e9 f0       	breq	.+58     	; 0x51c <get_char+0x46>
 4e2:	91 81       	ldd	r25, Z+1	; 0x01
 4e4:	80 81       	ld	r24, Z
 *
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
 4e6:	98 13       	cpse	r25, r24
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <get_char+0x16>
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <get_char+0x14>
	uint8_t data = ring->buffer[ring->read_offset];
 4ec:	e0 ee       	ldi	r30, 0xE0	; 224
 4ee:	f1 e0       	ldi	r31, 0x01	; 1
 4f0:	81 81       	ldd	r24, Z+1	; 0x01
 4f2:	a3 81       	ldd	r26, Z+3	; 0x03
 4f4:	b4 81       	ldd	r27, Z+4	; 0x04
 4f6:	a8 0f       	add	r26, r24
 4f8:	b1 1d       	adc	r27, r1
 4fa:	8c 91       	ld	r24, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
 4fc:	91 81       	ldd	r25, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
 4fe:	49 2f       	mov	r20, r25
 500:	50 e0       	ldi	r21, 0x00	; 0
 502:	22 81       	ldd	r18, Z+2	; 0x02
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	21 50       	subi	r18, 0x01	; 1
 508:	31 09       	sbc	r19, r1
 50a:	42 17       	cp	r20, r18
 50c:	53 07       	cpc	r21, r19
 50e:	11 f0       	breq	.+4      	; 0x514 <get_char+0x3e>
 510:	9f 5f       	subi	r25, 0xFF	; 255
 512:	01 c0       	rjmp	.+2      	; 0x516 <get_char+0x40>
 514:	90 e0       	ldi	r25, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
 516:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <ring_buffer_in+0x1>
 51a:	08 95       	ret
	}
}

extern uint8_t get_char(void)
{	
	uint8_t data = '\0';
 51c:	80 e0       	ldi	r24, 0x00	; 0
	if (uart_char_waiting()) {
		data = uart_getchar(); // THIS IS THE RECEIVED CHARACTER
	}
	return data;
}
 51e:	08 95       	ret

00000520 <main>:
{

	uint8_t data = 0;

	cli();
	uart_init();
 520:	f8 94       	cli
	sei();
 522:	54 de       	rcall	.-856    	; 0x1cc <uart_init>
	send_str("HELLO WORLD");
 524:	78 94       	sei
 526:	8b e0       	ldi	r24, 0x0B	; 11
	while(1) {
		data = get_char(); // THIS IS THE RECEIVED CHARACTER
 528:	91 e0       	ldi	r25, 0x01	; 1
		if (data != '\0') {
 52a:	80 df       	rcall	.-256    	; 0x42c <send_str>
 52c:	d4 df       	rcall	.-88     	; 0x4d6 <get_char>
			send_confirmation_msg(data);
 52e:	88 23       	and	r24, r24
 530:	e9 f3       	breq	.-6      	; 0x52c <main+0xc>
 532:	b4 de       	rcall	.-664    	; 0x29c <send_confirmation_msg>
 534:	fb cf       	rjmp	.-10     	; 0x52c <main+0xc>

00000536 <_exit>:
 536:	f8 94       	cli

00000538 <__stop_program>:
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stop_program>
