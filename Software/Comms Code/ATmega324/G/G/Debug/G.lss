
G.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000016a  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b64  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000939  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e29  00000000  00000000  00001771  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  0000259c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000fa28  00000000  00000000  0000264c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010d  00000000  00000000  00012074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00012181  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003988  00000000  00000000  000121e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
   2:	00 00       	nop
   4:	56 c0       	rjmp	.+172    	; 0xb2 <__bad_interrupt>
   6:	00 00       	nop
   8:	54 c0       	rjmp	.+168    	; 0xb2 <__bad_interrupt>
   a:	00 00       	nop
   c:	52 c0       	rjmp	.+164    	; 0xb2 <__bad_interrupt>
   e:	00 00       	nop
  10:	50 c0       	rjmp	.+160    	; 0xb2 <__bad_interrupt>
  12:	00 00       	nop
  14:	4e c0       	rjmp	.+156    	; 0xb2 <__bad_interrupt>
  16:	00 00       	nop
  18:	4c c0       	rjmp	.+152    	; 0xb2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4a c0       	rjmp	.+148    	; 0xb2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	48 c0       	rjmp	.+144    	; 0xb2 <__bad_interrupt>
  22:	00 00       	nop
  24:	46 c0       	rjmp	.+140    	; 0xb2 <__bad_interrupt>
  26:	00 00       	nop
  28:	44 c0       	rjmp	.+136    	; 0xb2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	42 c0       	rjmp	.+132    	; 0xb2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	40 c0       	rjmp	.+128    	; 0xb2 <__bad_interrupt>
  32:	00 00       	nop
  34:	3e c0       	rjmp	.+124    	; 0xb2 <__bad_interrupt>
  36:	00 00       	nop
  38:	3c c0       	rjmp	.+120    	; 0xb2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3a c0       	rjmp	.+116    	; 0xb2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	38 c0       	rjmp	.+112    	; 0xb2 <__bad_interrupt>
  42:	00 00       	nop
  44:	36 c0       	rjmp	.+108    	; 0xb2 <__bad_interrupt>
  46:	00 00       	nop
  48:	34 c0       	rjmp	.+104    	; 0xb2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	32 c0       	rjmp	.+100    	; 0xb2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	30 c0       	rjmp	.+96     	; 0xb2 <__bad_interrupt>
  52:	00 00       	nop
  54:	2e c0       	rjmp	.+92     	; 0xb2 <__bad_interrupt>
  56:	00 00       	nop
  58:	2c c0       	rjmp	.+88     	; 0xb2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2a c0       	rjmp	.+84     	; 0xb2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	28 c0       	rjmp	.+80     	; 0xb2 <__bad_interrupt>
  62:	00 00       	nop
  64:	26 c0       	rjmp	.+76     	; 0xb2 <__bad_interrupt>
  66:	00 00       	nop
  68:	24 c0       	rjmp	.+72     	; 0xb2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	22 c0       	rjmp	.+68     	; 0xb2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	20 c0       	rjmp	.+64     	; 0xb2 <__bad_interrupt>
  72:	00 00       	nop
  74:	1e c0       	rjmp	.+60     	; 0xb2 <__bad_interrupt>
  76:	00 00       	nop
  78:	1c c0       	rjmp	.+56     	; 0xb2 <__bad_interrupt>
	...

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea e6       	ldi	r30, 0x6A	; 106
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 30       	cpi	r26, 0x0E	; 14
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	ae e0       	ldi	r26, 0x0E	; 14
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 30       	cpi	r26, 0x0E	; 14
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	50 d0       	rcall	.+160    	; 0x150 <main>
  b0:	5a c0       	rjmp	.+180    	; 0x166 <_exit>

000000b2 <__bad_interrupt>:
  b2:	a6 cf       	rjmp	.-180    	; 0x0 <__vectors>

000000b4 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  b4:	08 95       	ret

000000b6 <uart_init>:



extern void uart_init(void)
{	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  ba:	83 e3       	ldi	r24, 0x33	; 51
  bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  c0:	a1 ec       	ldi	r26, 0xC1	; 193
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	8c 93       	st	X, r24
	UCSR0C = (3<<UCSZ00)|(1<<USBS0);
  c8:	e2 ec       	ldi	r30, 0xC2	; 194
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	8e e0       	ldi	r24, 0x0E	; 14
  ce:	80 83       	st	Z, r24

	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
  d0:	88 e9       	ldi	r24, 0x98	; 152
  d2:	8c 93       	st	X, r24

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <send_str>:
		uart_putchar('\r');
	}
}

extern void send_str(char* StringPtr)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	dc 01       	movw	r26, r24
		while(*StringPtr != 0x00) {
  e0:	9c 91       	ld	r25, X
  e2:	99 23       	and	r25, r25
  e4:	69 f0       	breq	.+26     	; 0x100 <send_str+0x26>
  e6:	11 96       	adiw	r26, 0x01	; 1
 * \param data the data to add to the UART buffer and send
 *
 */
static inline void uart_putchar(uint8_t data)
{
		while(!(UCSR0A & (1<<UDRE0)));
  e8:	e0 ec       	ldi	r30, 0xC0	; 192
  ea:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data;
  ec:	c6 ec       	ldi	r28, 0xC6	; 198
  ee:	d0 e0       	ldi	r29, 0x00	; 0
}

extern void send_str(char* StringPtr)
{
		while(*StringPtr != 0x00) {
			uart_putchar(*StringPtr);
  f0:	29 2f       	mov	r18, r25
 * \param data the data to add to the UART buffer and send
 *
 */
static inline void uart_putchar(uint8_t data)
{
		while(!(UCSR0A & (1<<UDRE0)));
  f2:	90 81       	ld	r25, Z
  f4:	95 ff       	sbrs	r25, 5
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <send_str+0x18>
		UDR0 = data;
  f8:	28 83       	st	Y, r18
	}
}

extern void send_str(char* StringPtr)
{
		while(*StringPtr != 0x00) {
  fa:	9d 91       	ld	r25, X+
  fc:	91 11       	cpse	r25, r1
  fe:	f8 cf       	rjmp	.-16     	; 0xf0 <send_str+0x16>
			uart_putchar(*StringPtr);
			StringPtr++;
		}
		
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <send_confirmation_msg>:
		return UDR0;
}


extern void send_confirmation_msg(uint8_t data)
{
 106:	cf 93       	push	r28
	if((data > 32) && (data < 126)) {
 108:	9f ed       	ldi	r25, 0xDF	; 223
 10a:	98 0f       	add	r25, r24
 10c:	9d 35       	cpi	r25, 0x5D	; 93
 10e:	b0 f4       	brcc	.+44     	; 0x13c <send_confirmation_msg+0x36>
 110:	c8 2f       	mov	r28, r24
		send_str(test_string);
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	e1 df       	rcall	.-62     	; 0xda <send_str>
 * \param data the data to add to the UART buffer and send
 *
 */
static inline void uart_putchar(uint8_t data)
{
		while(!(UCSR0A & (1<<UDRE0)));
 118:	e0 ec       	ldi	r30, 0xC0	; 192
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	90 81       	ld	r25, Z
 11e:	95 ff       	sbrs	r25, 5
 120:	fd cf       	rjmp	.-6      	; 0x11c <send_confirmation_msg+0x16>
		UDR0 = data;
 122:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
extern void send_confirmation_msg(uint8_t data)
{
	if((data > 32) && (data < 126)) {
		send_str(test_string);
		uart_putchar(data);
		send_str(test_string2);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	d7 df       	rcall	.-82     	; 0xda <send_str>
 * \param data the data to add to the UART buffer and send
 *
 */
static inline void uart_putchar(uint8_t data)
{
		while(!(UCSR0A & (1<<UDRE0)));
 12c:	e0 ec       	ldi	r30, 0xC0	; 192
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	85 ff       	sbrs	r24, 5
 134:	fd cf       	rjmp	.-6      	; 0x130 <send_confirmation_msg+0x2a>
		UDR0 = data;
 136:	8d e0       	ldi	r24, 0x0D	; 13
 138:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		send_str(test_string);
		uart_putchar(data);
		send_str(test_string2);
		uart_putchar('\r');
	}
}
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <get_char>:
 *
 * \retval Next data byte in receive buffer
 */
static inline uint8_t uart_getchar(void)
{
		while(!(UCSR0A & (1<<RXC0)));
 140:	e0 ec       	ldi	r30, 0xC0	; 192
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 23       	and	r24, r24
 148:	ec f7       	brge	.-6      	; 0x144 <get_char+0x4>
		return UDR0;
 14a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
extern uint8_t get_char(void)
{	
	uint8_t data = '\0';
	data = uart_getchar();
	return data;
 14e:	08 95       	ret

00000150 <main>:
int main(void){
	board_init();
	uart_init();        //Call the USART initialization code
	
	while(1){        //Infinite loop
		send_confirmation_msg(get_char());
 150:	b1 df       	rcall	.-158    	; 0xb4 <board_init>
 152:	b1 df       	rcall	.-158    	; 0xb6 <uart_init>
 154:	f5 df       	rcall	.-22     	; 0x140 <get_char>
 156:	d7 df       	rcall	.-82     	; 0x106 <send_confirmation_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	9e e4       	ldi	r25, 0x4E	; 78
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0xc>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x12>
 162:	00 00       	nop
 164:	f7 cf       	rjmp	.-18     	; 0x154 <main+0x4>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
