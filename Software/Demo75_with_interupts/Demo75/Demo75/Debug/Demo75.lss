
Demo75.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000188  00800100  00001222  000012b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014f  00800288  00800288  0000143e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000142f  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8c  00000000  00000000  00002a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016f5  00000000  00000000  00003727  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000420  00000000  00000000  00004e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000104ca  00000000  00000000  0000523c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d9  00000000  00000000  00015706  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000160df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003ef0  00000000  00000000  00016227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
       2:	00 00       	nop
       4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
      32:	00 00       	nop
      34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c3       	rjmp	.+1844   	; 0x776 <__vector_16>
      42:	00 00       	nop
      44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7e c0       	rjmp	.+252    	; 0x14e <__vector_20>
      52:	00 00       	nop
      54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
      62:	00 00       	nop
      64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
      66:	00 00       	nop
      68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 04       	cpc	r15, r0
      7e:	ab 05       	cpc	r26, r11
      80:	ab 05       	cpc	r26, r11
      82:	4c 05       	cpc	r20, r12
      84:	32 05       	cpc	r19, r2
      86:	ab 05       	cpc	r26, r11
      88:	ab 05       	cpc	r26, r11
      8a:	ab 05       	cpc	r26, r11
      8c:	66 05       	cpc	r22, r6
      8e:	82 05       	cpc	r24, r2
      90:	9e 05       	cpc	r25, r14
      92:	90 05       	cpc	r25, r0
      94:	74 05       	cpc	r23, r4
      96:	ab 05       	cpc	r26, r11
      98:	ab 05       	cpc	r26, r11
      9a:	ab 05       	cpc	r26, r11
      9c:	e0 04       	cpc	r14, r0
      9e:	ab 05       	cpc	r26, r11
      a0:	19 05       	cpc	r17, r9
      a2:	ab 05       	cpc	r26, r11
      a4:	ab 05       	cpc	r26, r11
      a6:	ab 05       	cpc	r26, r11
      a8:	00 05       	cpc	r16, r0

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf ef       	ldi	r28, 0xFF	; 255
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	12 e0       	ldi	r17, 0x02	; 2
      b8:	a0 e0       	ldi	r26, 0x00	; 0
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	e2 e2       	ldi	r30, 0x22	; 34
      be:	f2 e1       	ldi	r31, 0x12	; 18
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	a8 38       	cpi	r26, 0x88	; 136
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	23 e0       	ldi	r18, 0x03	; 3
      ce:	a8 e8       	ldi	r26, 0x88	; 136
      d0:	b2 e0       	ldi	r27, 0x02	; 2
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	a7 3d       	cpi	r26, 0xD7	; 215
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
      dc:	33 d4       	rcall	.+2150   	; 0x944 <main>
      de:	0c 94 0f 09 	jmp	0x121e	; 0x121e <_exit>

000000e2 <__bad_interrupt>:
      e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <uart_init>:
		sprintf (buffer, "Received: '\\0'(0)\n");
	} else {
		sprintf (buffer, "Received: %c(%d)\n", data, data);
	}
	send_str(buffer);
}
      e4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
      e8:	83 e3       	ldi	r24, 0x33	; 51
      ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
      ee:	a1 ec       	ldi	r26, 0xC1	; 193
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	88 e1       	ldi	r24, 0x18	; 24
      f4:	8c 93       	st	X, r24
      f6:	e2 ec       	ldi	r30, 0xC2	; 194
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	8e e0       	ldi	r24, 0x0E	; 14
      fc:	80 83       	st	Z, r24
      fe:	88 e9       	ldi	r24, 0x98	; 152
     100:	8c 93       	st	X, r24
     102:	86 e0       	ldi	r24, 0x06	; 6
     104:	80 83       	st	Z, r24
     106:	08 95       	ret

00000108 <send_str>:
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	dc 01       	movw	r26, r24
     10e:	9c 91       	ld	r25, X
     110:	99 23       	and	r25, r25
     112:	69 f0       	breq	.+26     	; 0x12e <send_str+0x26>
     114:	11 96       	adiw	r26, 0x01	; 1
     116:	e0 ec       	ldi	r30, 0xC0	; 192
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	c6 ec       	ldi	r28, 0xC6	; 198
     11c:	d0 e0       	ldi	r29, 0x00	; 0
     11e:	29 2f       	mov	r18, r25
     120:	90 81       	ld	r25, Z
     122:	95 ff       	sbrs	r25, 5
     124:	fd cf       	rjmp	.-6      	; 0x120 <send_str+0x18>
     126:	28 83       	st	Y, r18
     128:	9d 91       	ld	r25, X+
     12a:	91 11       	cpse	r25, r1
     12c:	f8 cf       	rjmp	.-16     	; 0x11e <send_str+0x16>
     12e:	e0 ec       	ldi	r30, 0xC0	; 192
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	85 ff       	sbrs	r24, 5
     136:	fd cf       	rjmp	.-6      	; 0x132 <send_str+0x2a>
     138:	8d e0       	ldi	r24, 0x0D	; 13
     13a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <get_char>:
 *
 * \retval Next data byte in receive buffer
 */
static inline uint8_t uart_getchar(void)
{
		unsigned char temp = value;
     144:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <value>
		value = '\0';
     148:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <value>
extern uint8_t get_char(void)
{	
	uint8_t data = '\0';
	data = uart_getchar();
	return data;
}
     14c:	08 95       	ret

0000014e <__vector_20>:

ISR (USART0_RX_vect)
{
     14e:	1f 92       	push	r1
     150:	0f 92       	push	r0
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	0f 92       	push	r0
     156:	11 24       	eor	r1, r1
     158:	8f 93       	push	r24
	/* Put data into buffer, sends the data */
	value = UDR0;
     15a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     15e:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <value>
     162:	8f 91       	pop	r24
     164:	0f 90       	pop	r0
     166:	0f be       	out	0x3f, r0	; 63
     168:	0f 90       	pop	r0
     16a:	1f 90       	pop	r1
     16c:	18 95       	reti

0000016e <setPD>:
static int PB3_sta = 0;
static int PB4_sta = 0;

void setPD(int _PD2_state, int _PD3_state){

	if (_PD2_state == 0){
     16e:	89 2b       	or	r24, r25
     170:	39 f4       	brne	.+14     	; 0x180 <setPD+0x12>
		if (_PD3_state == 0) {
     172:	67 2b       	or	r22, r23
     174:	11 f4       	brne	.+4      	; 0x17a <setPD+0xc>
			PORTD = 0b0000;
     176:	1b b8       	out	0x0b, r1	; 11
     178:	08 95       	ret
		}
		else {
			PORTD = 0b1000;
     17a:	88 e0       	ldi	r24, 0x08	; 8
     17c:	8b b9       	out	0x0b, r24	; 11
     17e:	08 95       	ret
		}
	}

	else {
		if (_PD3_state == 0) {
     180:	67 2b       	or	r22, r23
     182:	19 f4       	brne	.+6      	; 0x18a <setPD+0x1c>
			PORTD = 0b0100;
     184:	84 e0       	ldi	r24, 0x04	; 4
     186:	8b b9       	out	0x0b, r24	; 11
     188:	08 95       	ret
		}
		else {
			PORTD = 0b1100;
     18a:	8c e0       	ldi	r24, 0x0C	; 12
     18c:	8b b9       	out	0x0b, r24	; 11
     18e:	08 95       	ret

00000190 <setPB>:
}


void setPB(int _PB3_state, int _PB4_state){

	if (_PB3_state == 0){
     190:	89 2b       	or	r24, r25
     192:	39 f4       	brne	.+14     	; 0x1a2 <setPB+0x12>
		if (_PB4_state == 0) {
     194:	67 2b       	or	r22, r23
     196:	11 f4       	brne	.+4      	; 0x19c <setPB+0xc>
			PORTB = 0b0000;
     198:	15 b8       	out	0x05, r1	; 5
     19a:	08 95       	ret
		}
		else {
			PORTB = 0b10000;
     19c:	80 e1       	ldi	r24, 0x10	; 16
     19e:	85 b9       	out	0x05, r24	; 5
     1a0:	08 95       	ret
		}
	}

	else {
		if (_PB4_state == 0) {
     1a2:	67 2b       	or	r22, r23
     1a4:	19 f4       	brne	.+6      	; 0x1ac <setPB+0x1c>
			PORTB = 0b01000;
     1a6:	88 e0       	ldi	r24, 0x08	; 8
     1a8:	85 b9       	out	0x05, r24	; 5
     1aa:	08 95       	ret
		}
		else {
			PORTB = 0b11000;
     1ac:	88 e1       	ldi	r24, 0x18	; 24
     1ae:	85 b9       	out	0x05, r24	; 5
     1b0:	08 95       	ret

000001b2 <motorRfwd>:
{
	
	//OCR0B = 255-pwm;
	
	//PORTD |=  (1<<PORTD2);
	PB3_sta = 0;
     1b2:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <PB3_sta+0x1>
     1b6:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <PB3_sta>
	setPB(PB3_sta, PB4_sta);
     1ba:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <__data_end>
     1be:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <__data_end+0x1>
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	e4 df       	rcall	.-56     	; 0x190 <setPB>
	PD2_sta = 1;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <PD2_sta+0x1>
     1d0:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <PD2_sta>
	setPD(PD2_sta, PD3_sta);
     1d4:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <PD3_sta>
     1d8:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <PD3_sta+0x1>
     1dc:	c8 cf       	rjmp	.-112    	; 0x16e <setPD>
     1de:	08 95       	ret

000001e0 <motorLfwd>:
void motorLfwd(uint16_t pwm)
{

	//OCR0A = 255-pwm;
	//PORTD |= (1<<PORTD3);
	PB4_sta = 0;
     1e0:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <__data_end+0x1>
     1e4:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__data_end>
	setPB(PB3_sta, PB4_sta);
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <PB3_sta>
     1f0:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <PB3_sta+0x1>
     1f4:	cd df       	rcall	.-102    	; 0x190 <setPB>
	PD3_sta = 1;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <PD3_sta+0x1>
     1fe:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <PD3_sta>
	setPD(PD2_sta, PD3_sta);
     202:	61 e0       	ldi	r22, 0x01	; 1
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <PD2_sta>
     20a:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <PD2_sta+0x1>
     20e:	af cf       	rjmp	.-162    	; 0x16e <setPD>
     210:	08 95       	ret

00000212 <motorRbwd>:
{
	
	//OCR0B = pwm;
	
	//PORTD &=  !(1<<PORTD2);
	PB3_sta = 1;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <PB3_sta+0x1>
     21a:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <PB3_sta>
	setPB(PB3_sta, PB4_sta);
     21e:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <__data_end>
     222:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <__data_end+0x1>
     226:	b4 df       	rcall	.-152    	; 0x190 <setPB>
	PD2_sta = 0;
     228:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <PD2_sta+0x1>
     22c:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <PD2_sta>
	setPD(PD2_sta, PD3_sta);
     230:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <PD3_sta>
     234:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <PD3_sta+0x1>
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	98 cf       	rjmp	.-208    	; 0x16e <setPD>
     23e:	08 95       	ret

00000240 <motorLbwd>:
{

	//OCR0A = pwm;

	//PORTD &= !(1<<PORTD3);
	PB4_sta = 1;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <__data_end+0x1>
     248:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end>
	setPB(PB3_sta, PB4_sta);
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <PB3_sta>
     254:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <PB3_sta+0x1>
     258:	9b df       	rcall	.-202    	; 0x190 <setPB>
	PD3_sta = 0;
     25a:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <PD3_sta+0x1>
     25e:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <PD3_sta>
	setPD(PD2_sta, PD3_sta);
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <PD2_sta>
     26a:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <PD2_sta+0x1>
     26e:	7f cf       	rjmp	.-258    	; 0x16e <setPD>
     270:	08 95       	ret

00000272 <motorR_stop>:

void motorR_stop(void){
	
	//OCR0B = 0;
	//PORTD &= !(1<<PORTD2);
	PB3_sta = 0;
     272:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <PB3_sta+0x1>
     276:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <PB3_sta>
	setPB(PB3_sta, PB4_sta);
     27a:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <__data_end>
     27e:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <__data_end+0x1>
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	84 df       	rcall	.-248    	; 0x190 <setPB>
	PD2_sta = 0;
     288:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <PD2_sta+0x1>
     28c:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <PD2_sta>
	setPD(PD2_sta, PD3_sta);
     290:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <PD3_sta>
     294:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <PD3_sta+0x1>
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	68 cf       	rjmp	.-304    	; 0x16e <setPD>
     29e:	08 95       	ret

000002a0 <motorL_stop>:

void motorL_stop(void){
	
	//OCR0A = 0;
	
	PB4_sta = 0;
     2a0:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <__data_end+0x1>
     2a4:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__data_end>
	setPB(PB3_sta, PB4_sta);//PORTD &= !(1<<PORTD3);
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <PB3_sta>
     2b0:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <PB3_sta+0x1>
     2b4:	6d df       	rcall	.-294    	; 0x190 <setPB>
	PD3_sta = 0;
     2b6:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <PD3_sta+0x1>
     2ba:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <PD3_sta>
	setPD(PD2_sta, PD3_sta);
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <PD2_sta>
     2c6:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <PD2_sta+0x1>
     2ca:	51 cf       	rjmp	.-350    	; 0x16e <setPD>
     2cc:	08 95       	ret

000002ce <motor_init>:
	// initialize all PWMs to 0% duty cycle (braking)
	//OCR0A =  0;
	//OCR0B  = 0;
	// set PWM pins as digital outputs (the PWM signals will not
	// appear on the lines if they are digital inputs)
	DDRB |= (1 << PORTB3) | (1 << PORTB4);
     2ce:	84 b1       	in	r24, 0x04	; 4
     2d0:	88 61       	ori	r24, 0x18	; 24
     2d2:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PORTD2) | (1 << PORTD3);
     2d4:	8a b1       	in	r24, 0x0a	; 10
     2d6:	8c 60       	ori	r24, 0x0C	; 12
     2d8:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b11111111;
     2da:	8f ef       	ldi	r24, 0xFF	; 255
     2dc:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111111;
     2de:	8a b9       	out	0x0a, r24	; 10
     2e0:	08 95       	ret

000002e2 <move_servo1>:
// Motor Control Functions -- pwm is an 16-bit value

void move_servo1(uint16_t angle)
{
	//OCR1A = /*(2500/180)**/angle;
	OCR1A = (int) (((249-125) / 180 ) * angle + 125);
     2e2:	8d e7       	ldi	r24, 0x7D	; 125
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     2ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     2ee:	08 95       	ret

000002f0 <move_servo2>:
}

void move_servo2(uint16_t angle)
{	
	//OCR1B = /*(2500/180)**/angle;
	OCR1B = (int) (((249-125) / 180 ) * angle + 125);	
     2f0:	8d e7       	ldi	r24, 0x7D	; 125
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     2f8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     2fc:	08 95       	ret

000002fe <servo_init>:
// Motor Initialization routine -- this function must be called
//  before you use any of the above functions
void servo_init()
{	
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
     2fe:	e0 e8       	ldi	r30, 0x80	; 128
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	82 6a       	ori	r24, 0xA2	; 162
     306:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
     308:	e1 e8       	ldi	r30, 0x81	; 129
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	8b 61       	ori	r24, 0x1B	; 27
     310:	80 83       	st	Z, r24
	ICR1=2499;  //fPWM=50Hz (Period = 20ms Standard).
     312:	83 ec       	ldi	r24, 0xC3	; 195
     314:	99 e0       	ldi	r25, 0x09	; 9
     316:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     31a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

	// set PWM pins as digital outputs (the PWM signals will not
	// appear on the lines if they are digital inputs)
	DDRD |= (1 << PORTD5)|(1<<PORTD4);
     31e:	8a b1       	in	r24, 0x0a	; 10
     320:	80 63       	ori	r24, 0x30	; 48
     322:	8a b9       	out	0x0a, r24	; 10
     324:	08 95       	ret

00000326 <stepper_init>:
extern volatile short stepperDirection;
extern volatile uint64_t stepperQueue;


void stepper_init(void){
	DDRC |= (1 << 5) | (1 << 4) | (1 << 3) | (1 << 2);
     326:	87 b1       	in	r24, 0x07	; 7
     328:	8c 63       	ori	r24, 0x3C	; 60
     32a:	87 b9       	out	0x07, r24	; 7
	currentPosition = 0;
     32c:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <currentPosition+0x1>
     330:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <currentPosition>
	stepperDirection = 0;
     334:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <stepperDirection+0x1>
     338:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <stepperDirection>
	stepperQueue = 0;
     33c:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <stepperQueue>
     340:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <stepperQueue+0x1>
     344:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <stepperQueue+0x2>
     348:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <stepperQueue+0x3>
     34c:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <stepperQueue+0x4>
     350:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <stepperQueue+0x5>
     354:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <stepperQueue+0x6>
     358:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <stepperQueue+0x7>
     35c:	08 95       	ret

0000035e <forward_stepper>:
	stepperQueue = (stepperQueue >> 1);

	step();
}

void forward_stepper(int n) {
     35e:	bf 92       	push	r11
     360:	cf 92       	push	r12
     362:	df 92       	push	r13
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	7c 01       	movw	r14, r24
	int i = 0;
	if (stepperDirection == 0) {
     372:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <stepperDirection>
     376:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <stepperDirection+0x1>
     37a:	89 2b       	or	r24, r25
     37c:	b1 f4       	brne	.+44     	; 0x3aa <forward_stepper+0x4c>
		stepperDirection = 1;
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <stepperDirection+0x1>
     386:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <stepperDirection>
		stepperQueue = 0;
     38a:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <stepperQueue>
     38e:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <stepperQueue+0x1>
     392:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <stepperQueue+0x2>
     396:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <stepperQueue+0x3>
     39a:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <stepperQueue+0x4>
     39e:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <stepperQueue+0x5>
     3a2:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <stepperQueue+0x6>
     3a6:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <stepperQueue+0x7>
	}
	for(i = 0; i < n; i++) {
     3aa:	1e 14       	cp	r1, r14
     3ac:	1f 04       	cpc	r1, r15
     3ae:	0c f0       	brlt	.+2      	; 0x3b2 <forward_stepper+0x54>
     3b0:	42 c0       	rjmp	.+132    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     3b2:	c0 e0       	ldi	r28, 0x00	; 0
     3b4:	d0 e0       	ldi	r29, 0x00	; 0
		stepperQueue |= (stepperQueue << 1) | (1 << 1);
     3b6:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <stepperQueue>
     3ba:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <stepperQueue+0x1>
     3be:	40 91 9f 03 	lds	r20, 0x039F	; 0x80039f <stepperQueue+0x2>
     3c2:	50 91 a0 03 	lds	r21, 0x03A0	; 0x8003a0 <stepperQueue+0x3>
     3c6:	60 91 a1 03 	lds	r22, 0x03A1	; 0x8003a1 <stepperQueue+0x4>
     3ca:	70 91 a2 03 	lds	r23, 0x03A2	; 0x8003a2 <stepperQueue+0x5>
     3ce:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <stepperQueue+0x6>
     3d2:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <stepperQueue+0x7>
     3d6:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <stepperQueue>
     3da:	b0 90 9e 03 	lds	r11, 0x039E	; 0x80039e <stepperQueue+0x1>
     3de:	c0 90 9f 03 	lds	r12, 0x039F	; 0x80039f <stepperQueue+0x2>
     3e2:	d0 90 a0 03 	lds	r13, 0x03A0	; 0x8003a0 <stepperQueue+0x3>
     3e6:	10 91 a1 03 	lds	r17, 0x03A1	; 0x8003a1 <stepperQueue+0x4>
     3ea:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <stepperQueue+0x5>
     3ee:	a0 91 a3 03 	lds	r26, 0x03A3	; 0x8003a3 <stepperQueue+0x6>
     3f2:	f0 91 a4 03 	lds	r31, 0x03A4	; 0x8003a4 <stepperQueue+0x7>
     3f6:	01 e0       	ldi	r16, 0x01	; 1
     3f8:	f7 d3       	rcall	.+2030   	; 0xbe8 <__ashldi3>
     3fa:	e2 60       	ori	r30, 0x02	; 2
     3fc:	2e 2b       	or	r18, r30
     3fe:	b3 2a       	or	r11, r19
     400:	c4 2a       	or	r12, r20
     402:	d5 2a       	or	r13, r21
     404:	16 2b       	or	r17, r22
     406:	b7 2b       	or	r27, r23
     408:	8a 2b       	or	r24, r26
     40a:	9f 2b       	or	r25, r31
     40c:	20 93 9d 03 	sts	0x039D, r18	; 0x80039d <stepperQueue>
     410:	b0 92 9e 03 	sts	0x039E, r11	; 0x80039e <stepperQueue+0x1>
     414:	c0 92 9f 03 	sts	0x039F, r12	; 0x80039f <stepperQueue+0x2>
     418:	d0 92 a0 03 	sts	0x03A0, r13	; 0x8003a0 <stepperQueue+0x3>
     41c:	10 93 a1 03 	sts	0x03A1, r17	; 0x8003a1 <stepperQueue+0x4>
     420:	b0 93 a2 03 	sts	0x03A2, r27	; 0x8003a2 <stepperQueue+0x5>
     424:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <stepperQueue+0x6>
     428:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <stepperQueue+0x7>
	int i = 0;
	if (stepperDirection == 0) {
		stepperDirection = 1;
		stepperQueue = 0;
	}
	for(i = 0; i < n; i++) {
     42c:	21 96       	adiw	r28, 0x01	; 1
     42e:	ec 16       	cp	r14, r28
     430:	fd 06       	cpc	r15, r29
     432:	09 f0       	breq	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	c0 cf       	rjmp	.-128    	; 0x3b6 <forward_stepper+0x58>
		stepperQueue |= (stepperQueue << 1) | (1 << 1);
	}
}
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	bf 90       	pop	r11
     448:	08 95       	ret

0000044a <backward_stepper>:

void backward_stepper(int n) {
     44a:	bf 92       	push	r11
     44c:	cf 92       	push	r12
     44e:	df 92       	push	r13
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	7c 01       	movw	r14, r24
	int i = 0; 
	if (stepperDirection == 1) {
     45e:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <stepperDirection>
     462:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <stepperDirection+0x1>
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	a1 f4       	brne	.+40     	; 0x492 <backward_stepper+0x48>
		stepperDirection = 0;
     46a:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <stepperDirection+0x1>
     46e:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <stepperDirection>
		stepperQueue = 0;
     472:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <stepperQueue>
     476:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <stepperQueue+0x1>
     47a:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <stepperQueue+0x2>
     47e:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <stepperQueue+0x3>
     482:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <stepperQueue+0x4>
     486:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <stepperQueue+0x5>
     48a:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <stepperQueue+0x6>
     48e:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <stepperQueue+0x7>
	}
	for(i = 0; i < n; i++) {
     492:	1e 14       	cp	r1, r14
     494:	1f 04       	cpc	r1, r15
     496:	0c f0       	brlt	.+2      	; 0x49a <backward_stepper+0x50>
     498:	42 c0       	rjmp	.+132    	; 0x51e <backward_stepper+0xd4>
     49a:	c0 e0       	ldi	r28, 0x00	; 0
     49c:	d0 e0       	ldi	r29, 0x00	; 0
		stepperQueue |= (stepperQueue << 1) | (1 << 1);
     49e:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <stepperQueue>
     4a2:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <stepperQueue+0x1>
     4a6:	40 91 9f 03 	lds	r20, 0x039F	; 0x80039f <stepperQueue+0x2>
     4aa:	50 91 a0 03 	lds	r21, 0x03A0	; 0x8003a0 <stepperQueue+0x3>
     4ae:	60 91 a1 03 	lds	r22, 0x03A1	; 0x8003a1 <stepperQueue+0x4>
     4b2:	70 91 a2 03 	lds	r23, 0x03A2	; 0x8003a2 <stepperQueue+0x5>
     4b6:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <stepperQueue+0x6>
     4ba:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <stepperQueue+0x7>
     4be:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <stepperQueue>
     4c2:	b0 90 9e 03 	lds	r11, 0x039E	; 0x80039e <stepperQueue+0x1>
     4c6:	c0 90 9f 03 	lds	r12, 0x039F	; 0x80039f <stepperQueue+0x2>
     4ca:	d0 90 a0 03 	lds	r13, 0x03A0	; 0x8003a0 <stepperQueue+0x3>
     4ce:	10 91 a1 03 	lds	r17, 0x03A1	; 0x8003a1 <stepperQueue+0x4>
     4d2:	b0 91 a2 03 	lds	r27, 0x03A2	; 0x8003a2 <stepperQueue+0x5>
     4d6:	a0 91 a3 03 	lds	r26, 0x03A3	; 0x8003a3 <stepperQueue+0x6>
     4da:	f0 91 a4 03 	lds	r31, 0x03A4	; 0x8003a4 <stepperQueue+0x7>
     4de:	01 e0       	ldi	r16, 0x01	; 1
     4e0:	83 d3       	rcall	.+1798   	; 0xbe8 <__ashldi3>
     4e2:	e2 60       	ori	r30, 0x02	; 2
     4e4:	2e 2b       	or	r18, r30
     4e6:	b3 2a       	or	r11, r19
     4e8:	c4 2a       	or	r12, r20
     4ea:	d5 2a       	or	r13, r21
     4ec:	16 2b       	or	r17, r22
     4ee:	b7 2b       	or	r27, r23
     4f0:	8a 2b       	or	r24, r26
     4f2:	9f 2b       	or	r25, r31
     4f4:	20 93 9d 03 	sts	0x039D, r18	; 0x80039d <stepperQueue>
     4f8:	b0 92 9e 03 	sts	0x039E, r11	; 0x80039e <stepperQueue+0x1>
     4fc:	c0 92 9f 03 	sts	0x039F, r12	; 0x80039f <stepperQueue+0x2>
     500:	d0 92 a0 03 	sts	0x03A0, r13	; 0x8003a0 <stepperQueue+0x3>
     504:	10 93 a1 03 	sts	0x03A1, r17	; 0x8003a1 <stepperQueue+0x4>
     508:	b0 93 a2 03 	sts	0x03A2, r27	; 0x8003a2 <stepperQueue+0x5>
     50c:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <stepperQueue+0x6>
     510:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <stepperQueue+0x7>
	int i = 0; 
	if (stepperDirection == 1) {
		stepperDirection = 0;
		stepperQueue = 0;
	}
	for(i = 0; i < n; i++) {
     514:	21 96       	adiw	r28, 0x01	; 1
     516:	ec 16       	cp	r14, r28
     518:	fd 06       	cpc	r15, r29
     51a:	09 f0       	breq	.+2      	; 0x51e <backward_stepper+0xd4>
     51c:	c0 cf       	rjmp	.-128    	; 0x49e <backward_stepper+0x54>
		stepperQueue |= (stepperQueue << 1) | (1 << 1);
	}
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	df 90       	pop	r13
     52c:	cf 90       	pop	r12
     52e:	bf 90       	pop	r11
     530:	08 95       	ret

00000532 <step>:

void step(void) {
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	cb 54       	subi	r28, 0x4B	; 75
     540:	d1 09       	sbc	r29, r1
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
	char buffer[75];
	int r0 = (((currentPosition+0) % 4) + 2);
     54c:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <currentPosition>
     550:	70 91 9a 03 	lds	r23, 0x039A	; 0x80039a <currentPosition+0x1>
     554:	63 70       	andi	r22, 0x03	; 3
     556:	70 78       	andi	r23, 0x80	; 128
     558:	77 23       	and	r23, r23
     55a:	34 f4       	brge	.+12     	; 0x568 <step+0x36>
     55c:	61 50       	subi	r22, 0x01	; 1
     55e:	71 09       	sbc	r23, r1
     560:	6c 6f       	ori	r22, 0xFC	; 252
     562:	7f 6f       	ori	r23, 0xFF	; 255
     564:	6f 5f       	subi	r22, 0xFF	; 255
     566:	7f 4f       	sbci	r23, 0xFF	; 255
     568:	6e 5f       	subi	r22, 0xFE	; 254
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
	int r1 = (((currentPosition+1) % 4) + 2);
     56c:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <currentPosition>
     570:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <currentPosition+0x1>
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	83 70       	andi	r24, 0x03	; 3
     578:	90 78       	andi	r25, 0x80	; 128
     57a:	99 23       	and	r25, r25
     57c:	24 f4       	brge	.+8      	; 0x586 <step+0x54>
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	8c 6f       	ori	r24, 0xFC	; 252
     582:	9f 6f       	ori	r25, 0xFF	; 255
     584:	01 96       	adiw	r24, 0x01	; 1
     586:	02 96       	adiw	r24, 0x02	; 2
	int r2 = (((currentPosition+2) % 4) + 2);
     588:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <currentPosition>
     58c:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <currentPosition+0x1>
     590:	2e 5f       	subi	r18, 0xFE	; 254
     592:	3f 4f       	sbci	r19, 0xFF	; 255
     594:	23 70       	andi	r18, 0x03	; 3
     596:	30 78       	andi	r19, 0x80	; 128
     598:	33 23       	and	r19, r19
     59a:	34 f4       	brge	.+12     	; 0x5a8 <step+0x76>
     59c:	21 50       	subi	r18, 0x01	; 1
     59e:	31 09       	sbc	r19, r1
     5a0:	2c 6f       	ori	r18, 0xFC	; 252
     5a2:	3f 6f       	ori	r19, 0xFF	; 255
     5a4:	2f 5f       	subi	r18, 0xFF	; 255
     5a6:	3f 4f       	sbci	r19, 0xFF	; 255
     5a8:	f9 01       	movw	r30, r18
     5aa:	32 96       	adiw	r30, 0x02	; 2
	int r3 = (((currentPosition+3) % 4) + 2);
     5ac:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <currentPosition>
     5b0:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <currentPosition+0x1>
     5b4:	2d 5f       	subi	r18, 0xFD	; 253
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	23 70       	andi	r18, 0x03	; 3
     5ba:	30 78       	andi	r19, 0x80	; 128
     5bc:	33 23       	and	r19, r19
     5be:	34 f4       	brge	.+12     	; 0x5cc <step+0x9a>
     5c0:	21 50       	subi	r18, 0x01	; 1
     5c2:	31 09       	sbc	r19, r1
     5c4:	2c 6f       	ori	r18, 0xFC	; 252
     5c6:	3f 6f       	ori	r19, 0xFF	; 255
     5c8:	2f 5f       	subi	r18, 0xFF	; 255
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	a9 01       	movw	r20, r18
     5ce:	4e 5f       	subi	r20, 0xFE	; 254
     5d0:	5f 4f       	sbci	r21, 0xFF	; 255

	PORTC |=  (1<<r0);
     5d2:	18 b1       	in	r17, 0x08	; 8
     5d4:	21 e0       	ldi	r18, 0x01	; 1
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	d9 01       	movw	r26, r18
     5da:	06 2e       	mov	r0, r22
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <step+0xb0>
     5de:	aa 0f       	add	r26, r26
     5e0:	bb 1f       	adc	r27, r27
     5e2:	0a 94       	dec	r0
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <step+0xac>
     5e6:	a1 2b       	or	r26, r17
     5e8:	a8 b9       	out	0x08, r26	; 8
	PORTC |=  (1<<r1);
     5ea:	18 b1       	in	r17, 0x08	; 8
     5ec:	d9 01       	movw	r26, r18
     5ee:	08 2e       	mov	r0, r24
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <step+0xc4>
     5f2:	aa 0f       	add	r26, r26
     5f4:	bb 1f       	adc	r27, r27
     5f6:	0a 94       	dec	r0
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <step+0xc0>
     5fa:	a1 2b       	or	r26, r17
     5fc:	a8 b9       	out	0x08, r26	; 8
	PORTC &= ~(1<<r2);
     5fe:	b8 b1       	in	r27, 0x08	; 8
     600:	89 01       	movw	r16, r18
     602:	0e 2e       	mov	r0, r30
     604:	02 c0       	rjmp	.+4      	; 0x60a <step+0xd8>
     606:	00 0f       	add	r16, r16
     608:	11 1f       	adc	r17, r17
     60a:	0a 94       	dec	r0
     60c:	e2 f7       	brpl	.-8      	; 0x606 <step+0xd4>
     60e:	a0 2f       	mov	r26, r16
     610:	a0 95       	com	r26
     612:	ab 23       	and	r26, r27
     614:	a8 b9       	out	0x08, r26	; 8
	PORTC &= ~(1<<r3);
     616:	a8 b1       	in	r26, 0x08	; 8
     618:	04 2e       	mov	r0, r20
     61a:	02 c0       	rjmp	.+4      	; 0x620 <step+0xee>
     61c:	22 0f       	add	r18, r18
     61e:	33 1f       	adc	r19, r19
     620:	0a 94       	dec	r0
     622:	e2 f7       	brpl	.-8      	; 0x61c <step+0xea>
     624:	20 95       	com	r18
     626:	2a 23       	and	r18, r26
     628:	28 b9       	out	0x08, r18	; 8

	sprintf(buffer, "stepperDirection: %d\tcurrentPosition: %d\tr0: %d\tr1: %d\tr2: %d\tr3: %d\n", stepperDirection, currentPosition, r0, r1, r2, r3);
     62a:	a0 91 99 03 	lds	r26, 0x0399	; 0x800399 <currentPosition>
     62e:	b0 91 9a 03 	lds	r27, 0x039A	; 0x80039a <currentPosition+0x1>
     632:	20 91 9b 03 	lds	r18, 0x039B	; 0x80039b <stepperDirection>
     636:	30 91 9c 03 	lds	r19, 0x039C	; 0x80039c <stepperDirection+0x1>
     63a:	5f 93       	push	r21
     63c:	4f 93       	push	r20
     63e:	ff 93       	push	r31
     640:	ef 93       	push	r30
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	7f 93       	push	r23
     648:	6f 93       	push	r22
     64a:	bf 93       	push	r27
     64c:	af 93       	push	r26
     64e:	3f 93       	push	r19
     650:	2f 93       	push	r18
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	8e 01       	movw	r16, r28
     65c:	0f 5f       	subi	r16, 0xFF	; 255
     65e:	1f 4f       	sbci	r17, 0xFF	; 255
     660:	1f 93       	push	r17
     662:	0f 93       	push	r16
	send_str(buffer);
     664:	04 d3       	rcall	.+1544   	; 0xc6e <sprintf>
     666:	c8 01       	movw	r24, r16
     668:	4f dd       	rcall	.-1378   	; 0x108 <send_str>
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	c5 5b       	subi	r28, 0xB5	; 181
     676:	df 4f       	sbci	r29, 0xFF	; 255
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <move_stepper>:
	currentPosition = 0;
	stepperDirection = 0;
	stepperQueue = 0;
}

void move_stepper(void) {
     68c:	0f 93       	push	r16
	if(stepperDirection) {
     68e:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <stepperDirection>
     692:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <stepperDirection+0x1>
     696:	89 2b       	or	r24, r25
     698:	91 f0       	breq	.+36     	; 0x6be <move_stepper+0x32>
		currentPosition = (currentPosition + 1) % 4;
     69a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <currentPosition>
     69e:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <currentPosition+0x1>
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	83 70       	andi	r24, 0x03	; 3
     6a6:	90 78       	andi	r25, 0x80	; 128
     6a8:	99 23       	and	r25, r25
     6aa:	24 f4       	brge	.+8      	; 0x6b4 <move_stepper+0x28>
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	8c 6f       	ori	r24, 0xFC	; 252
     6b0:	9f 6f       	ori	r25, 0xFF	; 255
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <currentPosition+0x1>
     6b8:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <currentPosition>
     6bc:	1d c0       	rjmp	.+58     	; 0x6f8 <move_stepper+0x6c>
	} else {
		currentPosition = (currentPosition - 1) % 4;
     6be:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <currentPosition>
     6c2:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <currentPosition+0x1>
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	83 70       	andi	r24, 0x03	; 3
     6ca:	90 78       	andi	r25, 0x80	; 128
     6cc:	99 23       	and	r25, r25
     6ce:	24 f4       	brge	.+8      	; 0x6d8 <move_stepper+0x4c>
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	8c 6f       	ori	r24, 0xFC	; 252
     6d4:	9f 6f       	ori	r25, 0xFF	; 255
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <currentPosition+0x1>
     6dc:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <currentPosition>
		if(currentPosition == -1){
     6e0:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <currentPosition>
     6e4:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <currentPosition+0x1>
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	31 f4       	brne	.+12     	; 0x6f8 <move_stepper+0x6c>
			currentPosition = 3;
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <currentPosition+0x1>
     6f4:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <currentPosition>
		}
	}
	stepperQueue = (stepperQueue >> 1);
     6f8:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <stepperQueue>
     6fc:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <stepperQueue+0x1>
     700:	40 91 9f 03 	lds	r20, 0x039F	; 0x80039f <stepperQueue+0x2>
     704:	50 91 a0 03 	lds	r21, 0x03A0	; 0x8003a0 <stepperQueue+0x3>
     708:	60 91 a1 03 	lds	r22, 0x03A1	; 0x8003a1 <stepperQueue+0x4>
     70c:	70 91 a2 03 	lds	r23, 0x03A2	; 0x8003a2 <stepperQueue+0x5>
     710:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <stepperQueue+0x6>
     714:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <stepperQueue+0x7>
     718:	01 e0       	ldi	r16, 0x01	; 1
     71a:	81 d2       	rcall	.+1282   	; 0xc1e <__lshrdi3>
     71c:	20 93 9d 03 	sts	0x039D, r18	; 0x80039d <stepperQueue>
     720:	30 93 9e 03 	sts	0x039E, r19	; 0x80039e <stepperQueue+0x1>
     724:	40 93 9f 03 	sts	0x039F, r20	; 0x80039f <stepperQueue+0x2>
     728:	50 93 a0 03 	sts	0x03A0, r21	; 0x8003a0 <stepperQueue+0x3>
     72c:	60 93 a1 03 	sts	0x03A1, r22	; 0x8003a1 <stepperQueue+0x4>
     730:	70 93 a2 03 	sts	0x03A2, r23	; 0x8003a2 <stepperQueue+0x5>
     734:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <stepperQueue+0x6>
     738:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <stepperQueue+0x7>

	step();
     73c:	fa de       	rcall	.-524    	; 0x532 <step>
}
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <timer_init>:
}
// Motor Initialization routine -- this function must be called
//  before you use any of the above functions
void timer_init()
{
	DDRA = 0xff;
     742:	8f ef       	ldi	r24, 0xFF	; 255
     744:	81 b9       	out	0x01, r24	; 1
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks = 0L;
     746:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <clock_ticks>
     74a:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <clock_ticks+0x1>
     74e:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <clock_ticks+0x2>
     752:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
     756:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
     758:	8c e7       	ldi	r24, 0x7C	; 124
     75a:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
     760:	83 e0       	ldi	r24, 0x03	; 3
     762:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
     764:	ee e6       	ldi	r30, 0x6E	; 110
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	82 60       	ori	r24, 0x02	; 2
     76c:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
     76e:	85 b3       	in	r24, 0x15	; 21
     770:	82 70       	andi	r24, 0x02	; 2
     772:	85 bb       	out	0x15, r24	; 21
     774:	08 95       	ret

00000776 <__vector_16>:

}

ISR (TIMER0_COMPA_vect) {
     776:	1f 92       	push	r1
     778:	0f 92       	push	r0
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	0f 92       	push	r0
     77e:	11 24       	eor	r1, r1
     780:	2f 93       	push	r18
     782:	3f 93       	push	r19
     784:	4f 93       	push	r20
     786:	5f 93       	push	r21
     788:	6f 93       	push	r22
     78a:	7f 93       	push	r23
     78c:	8f 93       	push	r24
     78e:	9f 93       	push	r25
     790:	af 93       	push	r26
     792:	bf 93       	push	r27
     794:	ef 93       	push	r30
     796:	ff 93       	push	r31
	clock_ticks++;
     798:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <clock_ticks>
     79c:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <clock_ticks+0x1>
     7a0:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <clock_ticks+0x2>
     7a4:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <clock_ticks+0x3>
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	a1 1d       	adc	r26, r1
     7ac:	b1 1d       	adc	r27, r1
     7ae:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <clock_ticks>
     7b2:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <clock_ticks+0x1>
     7b6:	a0 93 92 02 	sts	0x0292, r26	; 0x800292 <clock_ticks+0x2>
     7ba:	b0 93 93 02 	sts	0x0293, r27	; 0x800293 <clock_ticks+0x3>
	if (clock_ticks%25 == 0) {
     7be:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <clock_ticks>
     7c2:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <clock_ticks+0x1>
     7c6:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <clock_ticks+0x2>
     7ca:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <clock_ticks+0x3>
     7ce:	29 e1       	ldi	r18, 0x19	; 25
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	e0 d1       	rcall	.+960    	; 0xb98 <__udivmodsi4>
     7d8:	67 2b       	or	r22, r23
     7da:	68 2b       	or	r22, r24
     7dc:	69 2b       	or	r22, r25
     7de:	a1 f4       	brne	.+40     	; 0x808 <__vector_16+0x92>
		if (stepperQueue > 0) {
     7e0:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <stepperQueue>
     7e4:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <stepperQueue+0x1>
     7e8:	40 91 9f 03 	lds	r20, 0x039F	; 0x80039f <stepperQueue+0x2>
     7ec:	50 91 a0 03 	lds	r21, 0x03A0	; 0x8003a0 <stepperQueue+0x3>
     7f0:	60 91 a1 03 	lds	r22, 0x03A1	; 0x8003a1 <stepperQueue+0x4>
     7f4:	70 91 a2 03 	lds	r23, 0x03A2	; 0x8003a2 <stepperQueue+0x5>
     7f8:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <stepperQueue+0x6>
     7fc:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <stepperQueue+0x7>
     800:	a0 e0       	ldi	r26, 0x00	; 0
     802:	29 d2       	rcall	.+1106   	; 0xc56 <__cmpdi2_s8>
			move_stepper();
     804:	09 f0       	breq	.+2      	; 0x808 <__vector_16+0x92>
     806:	42 df       	rcall	.-380    	; 0x68c <move_stepper>
		}
	}
	if (clock_ticks%500 == 0) {
     808:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <clock_ticks>
     80c:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <clock_ticks+0x1>
     810:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <clock_ticks+0x2>
     814:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <clock_ticks+0x3>
     818:	24 ef       	ldi	r18, 0xF4	; 244
     81a:	31 e0       	ldi	r19, 0x01	; 1
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	bb d1       	rcall	.+886    	; 0xb98 <__udivmodsi4>
     822:	67 2b       	or	r22, r23
     824:	68 2b       	or	r22, r24
     826:	69 2b       	or	r22, r25
     828:	81 f5       	brne	.+96     	; 0x88a <__vector_16+0x114>
		PORTA ^= (1<<4);
     82a:	92 b1       	in	r25, 0x02	; 2
     82c:	80 e1       	ldi	r24, 0x10	; 16
     82e:	89 27       	eor	r24, r25
     830:	82 b9       	out	0x02, r24	; 2
		sprintf(buffer, "stepperQueue: %u\n", stepperQueue);
     832:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <stepperQueue>
     836:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <stepperQueue+0x1>
     83a:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <stepperQueue+0x2>
     83e:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <stepperQueue+0x3>
     842:	40 91 a1 03 	lds	r20, 0x03A1	; 0x8003a1 <stepperQueue+0x4>
     846:	50 91 a2 03 	lds	r21, 0x03A2	; 0x8003a2 <stepperQueue+0x5>
     84a:	60 91 a3 03 	lds	r22, 0x03A3	; 0x8003a3 <stepperQueue+0x6>
     84e:	70 91 a4 03 	lds	r23, 0x03A4	; 0x8003a4 <stepperQueue+0x7>
     852:	7f 93       	push	r23
     854:	6f 93       	push	r22
     856:	5f 93       	push	r21
     858:	4f 93       	push	r20
     85a:	3f 93       	push	r19
     85c:	2f 93       	push	r18
     85e:	9f 93       	push	r25
     860:	8f 93       	push	r24
     862:	86 e4       	ldi	r24, 0x46	; 70
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	9f 93       	push	r25
     868:	8f 93       	push	r24
     86a:	85 ea       	ldi	r24, 0xA5	; 165
     86c:	93 e0       	ldi	r25, 0x03	; 3
     86e:	9f 93       	push	r25
     870:	8f 93       	push	r24
		send_str(buffer);
     872:	fd d1       	rcall	.+1018   	; 0xc6e <sprintf>
     874:	85 ea       	ldi	r24, 0xA5	; 165
     876:	93 e0       	ldi	r25, 0x03	; 3
     878:	47 dc       	rcall	.-1906   	; 0x108 <send_str>
     87a:	8d b7       	in	r24, 0x3d	; 61
     87c:	9e b7       	in	r25, 0x3e	; 62
     87e:	0c 96       	adiw	r24, 0x0c	; 12
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	9e bf       	out	0x3e, r25	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	8d bf       	out	0x3d, r24	; 61
	}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	1f 90       	pop	r1
     8aa:	18 95       	reti

000008ac <forwards>:


////////////////////////////////////////////////DC motors function

void forwards(){
	 motorRfwd(0);
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	80 dc       	rcall	.-1792   	; 0x1b2 <motorRfwd>
	 motorLfwd(0);
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	94 dc       	rcall	.-1752   	; 0x1e0 <motorLfwd>
	 sprintf(carStatus, "Forward");
     8b8:	88 e0       	ldi	r24, 0x08	; 8
     8ba:	e8 e5       	ldi	r30, 0x58	; 88
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	a6 ec       	ldi	r26, 0xC6	; 198
     8c0:	b2 e0       	ldi	r27, 0x02	; 2
     8c2:	01 90       	ld	r0, Z+
     8c4:	0d 92       	st	X+, r0
     8c6:	8a 95       	dec	r24
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <forwards+0x16>
     8ca:	08 95       	ret

000008cc <reverse>:
}

void reverse(){
	motorRbwd(0);
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	a0 dc       	rcall	.-1728   	; 0x212 <motorRbwd>
	motorLbwd(0);
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	b4 dc       	rcall	.-1688   	; 0x240 <motorLbwd>
	sprintf(carStatus, "Reverse");
     8d8:	88 e0       	ldi	r24, 0x08	; 8
     8da:	e0 e6       	ldi	r30, 0x60	; 96
     8dc:	f1 e0       	ldi	r31, 0x01	; 1
     8de:	a6 ec       	ldi	r26, 0xC6	; 198
     8e0:	b2 e0       	ldi	r27, 0x02	; 2
     8e2:	01 90       	ld	r0, Z+
     8e4:	0d 92       	st	X+, r0
     8e6:	8a 95       	dec	r24
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <reverse+0x16>
     8ea:	08 95       	ret

000008ec <left>:
}

void left(){
	motorRfwd(0);
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	60 dc       	rcall	.-1856   	; 0x1b2 <motorRfwd>
	motorLbwd(0);
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	a4 dc       	rcall	.-1720   	; 0x240 <motorLbwd>
	sprintf(carStatus, "Left");
     8f8:	85 e0       	ldi	r24, 0x05	; 5
     8fa:	e8 e6       	ldi	r30, 0x68	; 104
     8fc:	f1 e0       	ldi	r31, 0x01	; 1
     8fe:	a6 ec       	ldi	r26, 0xC6	; 198
     900:	b2 e0       	ldi	r27, 0x02	; 2
     902:	01 90       	ld	r0, Z+
     904:	0d 92       	st	X+, r0
     906:	8a 95       	dec	r24
     908:	e1 f7       	brne	.-8      	; 0x902 <__stack+0x3>
     90a:	08 95       	ret

0000090c <right>:
}
void right(){
	motorRbwd(0);
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	80 dc       	rcall	.-1792   	; 0x212 <motorRbwd>
	motorLfwd(0);
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	64 dc       	rcall	.-1848   	; 0x1e0 <motorLfwd>
	sprintf(carStatus, "Right");
     918:	86 e0       	ldi	r24, 0x06	; 6
     91a:	ed e6       	ldi	r30, 0x6D	; 109
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	a6 ec       	ldi	r26, 0xC6	; 198
     920:	b2 e0       	ldi	r27, 0x02	; 2
     922:	01 90       	ld	r0, Z+
     924:	0d 92       	st	X+, r0
     926:	8a 95       	dec	r24
     928:	e1 f7       	brne	.-8      	; 0x922 <right+0x16>
     92a:	08 95       	ret

0000092c <stop>:
}

void stop(){
	motorL_stop();
	motorR_stop();
     92c:	b9 dc       	rcall	.-1678   	; 0x2a0 <motorL_stop>
     92e:	a1 dc       	rcall	.-1726   	; 0x272 <motorR_stop>
	sprintf(carStatus, "Stopped");
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	e3 e7       	ldi	r30, 0x73	; 115
     934:	f1 e0       	ldi	r31, 0x01	; 1
     936:	a6 ec       	ldi	r26, 0xC6	; 198
     938:	b2 e0       	ldi	r27, 0x02	; 2
     93a:	01 90       	ld	r0, Z+
     93c:	0d 92       	st	X+, r0
     93e:	8a 95       	dec	r24
     940:	e1 f7       	brne	.-8      	; 0x93a <stop+0xe>
     942:	08 95       	ret

00000944 <main>:
	cli();
	//Initialize timer2
	timer_init();
	
	//Initialize communication through bluetooth
	uart_init();
     944:	f8 94       	cli
     946:	fd de       	rcall	.-518    	; 0x742 <timer_init>
     948:	cd db       	rcall	.-2150   	; 0xe4 <uart_init>
     94a:	c1 dc       	rcall	.-1662   	; 0x2ce <motor_init>
     94c:	ef df       	rcall	.-34     	; 0x92c <stop>
     94e:	d7 dc       	rcall	.-1618   	; 0x2fe <servo_init>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	c6 dc       	rcall	.-1652   	; 0x2e2 <move_servo1>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	ca dc       	rcall	.-1644   	; 0x2f0 <move_servo2>
     95c:	89 e0       	ldi	r24, 0x09	; 9
     95e:	eb e7       	ldi	r30, 0x7B	; 123
     960:	f1 e0       	ldi	r31, 0x01	; 1
     962:	a4 e9       	ldi	r26, 0x94	; 148
     964:	b2 e0       	ldi	r27, 0x02	; 2
     966:	01 90       	ld	r0, Z+
     968:	0d 92       	st	X+, r0
     96a:	8a 95       	dec	r24
     96c:	e1 f7       	brne	.-8      	; 0x966 <main+0x22>
     96e:	84 e9       	ldi	r24, 0x94	; 148
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	ca db       	rcall	.-2156   	; 0x108 <send_str>
     974:	d8 dc       	rcall	.-1616   	; 0x326 <stepper_init>
     976:	78 94       	sei
     978:	00 e0       	ldi	r16, 0x00	; 0
     97a:	10 e0       	ldi	r17, 0x00	; 0
     97c:	c0 e0       	ldi	r28, 0x00	; 0
     97e:	d0 e0       	ldi	r29, 0x00	; 0
     980:	0f 2e       	mov	r0, r31
     982:	f7 ed       	ldi	r31, 0xD7	; 215
     984:	af 2e       	mov	r10, r31
     986:	f1 e0       	ldi	r31, 0x01	; 1
     988:	bf 2e       	mov	r11, r31
     98a:	f0 2d       	mov	r31, r0
     98c:	0f 2e       	mov	r0, r31
     98e:	f8 eb       	ldi	r31, 0xB8	; 184
     990:	cf 2e       	mov	r12, r31
     992:	f1 e0       	ldi	r31, 0x01	; 1
     994:	df 2e       	mov	r13, r31
     996:	f0 2d       	mov	r31, r0
     998:	0f 2e       	mov	r0, r31
     99a:	fb e6       	ldi	r31, 0x6B	; 107
     99c:	ef 2e       	mov	r14, r31
     99e:	f2 e0       	ldi	r31, 0x02	; 2
     9a0:	ff 2e       	mov	r15, r31
     9a2:	f0 2d       	mov	r31, r0
     9a4:	cf db       	rcall	.-2146   	; 0x144 <get_char>
     9a6:	88 23       	and	r24, r24
     9a8:	e9 f3       	breq	.-6      	; 0x9a4 <main+0x60>
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	fc 01       	movw	r30, r24
     9ae:	e1 56       	subi	r30, 0x61	; 97
     9b0:	f1 09       	sbc	r31, r1
     9b2:	e7 31       	cpi	r30, 0x17	; 23
     9b4:	f1 05       	cpc	r31, r1
     9b6:	08 f0       	brcs	.+2      	; 0x9ba <main+0x76>
     9b8:	ce c0       	rjmp	.+412    	; 0xb56 <main+0x212>
     9ba:	e2 5c       	subi	r30, 0xC2	; 194
     9bc:	ff 4f       	sbci	r31, 0xFF	; 255
     9be:	0e c1       	rjmp	.+540    	; 0xbdc <__tablejump2__>
     9c0:	8a e0       	ldi	r24, 0x0A	; 10
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	cc dc       	rcall	.-1640   	; 0x35e <forward_stepper>
     9c6:	89 e1       	ldi	r24, 0x19	; 25
     9c8:	e4 e8       	ldi	r30, 0x84	; 132
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	a4 e9       	ldi	r26, 0x94	; 148
     9ce:	b2 e0       	ldi	r27, 0x02	; 2
     9d0:	01 90       	ld	r0, Z+
     9d2:	0d 92       	st	X+, r0
     9d4:	8a 95       	dec	r24
     9d6:	e1 f7       	brne	.-8      	; 0x9d0 <main+0x8c>
     9d8:	84 e9       	ldi	r24, 0x94	; 148
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	95 db       	rcall	.-2262   	; 0x108 <send_str>
     9de:	bb c0       	rjmp	.+374    	; 0xb56 <main+0x212>
     9e0:	8a e0       	ldi	r24, 0x0A	; 10
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	32 dd       	rcall	.-1436   	; 0x44a <backward_stepper>
     9e6:	8b e1       	ldi	r24, 0x1B	; 27
     9e8:	ed e9       	ldi	r30, 0x9D	; 157
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	a4 e9       	ldi	r26, 0x94	; 148
     9ee:	b2 e0       	ldi	r27, 0x02	; 2
     9f0:	01 90       	ld	r0, Z+
     9f2:	0d 92       	st	X+, r0
     9f4:	8a 95       	dec	r24
     9f6:	e1 f7       	brne	.-8      	; 0x9f0 <main+0xac>
     9f8:	84 e9       	ldi	r24, 0x94	; 148
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	85 db       	rcall	.-2294   	; 0x108 <send_str>
     9fe:	ab c0       	rjmp	.+342    	; 0xb56 <main+0x212>
     a00:	c4 3b       	cpi	r28, 0xB4	; 180
     a02:	d1 05       	cpc	r29, r1
     a04:	0c f4       	brge	.+2      	; 0xa08 <main+0xc4>
     a06:	25 96       	adiw	r28, 0x05	; 5
     a08:	ce 01       	movw	r24, r28
     a0a:	6b dc       	rcall	.-1834   	; 0x2e2 <move_servo1>
     a0c:	df 93       	push	r29
     a0e:	cf 93       	push	r28
     a10:	df 92       	push	r13
     a12:	cf 92       	push	r12
     a14:	84 e9       	ldi	r24, 0x94	; 148
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	9f 93       	push	r25
     a1a:	8f 93       	push	r24
     a1c:	28 d1       	rcall	.+592    	; 0xc6e <sprintf>
     a1e:	84 e9       	ldi	r24, 0x94	; 148
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	72 db       	rcall	.-2332   	; 0x108 <send_str>
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	92 c0       	rjmp	.+292    	; 0xb56 <main+0x212>
     a32:	1c 16       	cp	r1, r28
     a34:	1d 06       	cpc	r1, r29
     a36:	0c f4       	brge	.+2      	; 0xa3a <main+0xf6>
     a38:	25 97       	sbiw	r28, 0x05	; 5
     a3a:	ce 01       	movw	r24, r28
     a3c:	52 dc       	rcall	.-1884   	; 0x2e2 <move_servo1>
     a3e:	df 93       	push	r29
     a40:	cf 93       	push	r28
     a42:	df 92       	push	r13
     a44:	cf 92       	push	r12
     a46:	84 e9       	ldi	r24, 0x94	; 148
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	9f 93       	push	r25
     a4c:	8f 93       	push	r24
     a4e:	0f d1       	rcall	.+542    	; 0xc6e <sprintf>
     a50:	84 e9       	ldi	r24, 0x94	; 148
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	59 db       	rcall	.-2382   	; 0x108 <send_str>
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	79 c0       	rjmp	.+242    	; 0xb56 <main+0x212>
     a64:	04 3b       	cpi	r16, 0xB4	; 180
     a66:	11 05       	cpc	r17, r1
     a68:	14 f4       	brge	.+4      	; 0xa6e <main+0x12a>
     a6a:	0b 5f       	subi	r16, 0xFB	; 251
     a6c:	1f 4f       	sbci	r17, 0xFF	; 255
     a6e:	c8 01       	movw	r24, r16
     a70:	3f dc       	rcall	.-1922   	; 0x2f0 <move_servo2>
     a72:	1f 93       	push	r17
     a74:	0f 93       	push	r16
     a76:	bf 92       	push	r11
     a78:	af 92       	push	r10
     a7a:	84 e9       	ldi	r24, 0x94	; 148
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	9f 93       	push	r25
     a80:	8f 93       	push	r24
     a82:	f5 d0       	rcall	.+490    	; 0xc6e <sprintf>
     a84:	84 e9       	ldi	r24, 0x94	; 148
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	3f db       	rcall	.-2434   	; 0x108 <send_str>
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	5f c0       	rjmp	.+190    	; 0xb56 <main+0x212>
     a98:	10 16       	cp	r1, r16
     a9a:	11 06       	cpc	r1, r17
     a9c:	14 f4       	brge	.+4      	; 0xaa2 <main+0x15e>
     a9e:	05 50       	subi	r16, 0x05	; 5
     aa0:	11 09       	sbc	r17, r1
     aa2:	c8 01       	movw	r24, r16
     aa4:	25 dc       	rcall	.-1974   	; 0x2f0 <move_servo2>
     aa6:	1f 93       	push	r17
     aa8:	0f 93       	push	r16
     aaa:	bf 92       	push	r11
     aac:	af 92       	push	r10
     aae:	84 e9       	ldi	r24, 0x94	; 148
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	db d0       	rcall	.+438    	; 0xc6e <sprintf>
     ab8:	84 e9       	ldi	r24, 0x94	; 148
     aba:	92 e0       	ldi	r25, 0x02	; 2
     abc:	25 db       	rcall	.-2486   	; 0x108 <send_str>
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	45 c0       	rjmp	.+138    	; 0xb56 <main+0x212>
     acc:	ef de       	rcall	.-546    	; 0x8ac <forwards>
     ace:	88 e1       	ldi	r24, 0x18	; 24
     ad0:	e6 ef       	ldi	r30, 0xF6	; 246
     ad2:	f1 e0       	ldi	r31, 0x01	; 1
     ad4:	a4 e9       	ldi	r26, 0x94	; 148
     ad6:	b2 e0       	ldi	r27, 0x02	; 2
     ad8:	01 90       	ld	r0, Z+
     ada:	0d 92       	st	X+, r0
     adc:	8a 95       	dec	r24
     ade:	e1 f7       	brne	.-8      	; 0xad8 <main+0x194>
     ae0:	84 e9       	ldi	r24, 0x94	; 148
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	11 db       	rcall	.-2526   	; 0x108 <send_str>
     ae6:	37 c0       	rjmp	.+110    	; 0xb56 <main+0x212>
     ae8:	f1 de       	rcall	.-542    	; 0x8cc <reverse>
     aea:	89 e1       	ldi	r24, 0x19	; 25
     aec:	ee e0       	ldi	r30, 0x0E	; 14
     aee:	f2 e0       	ldi	r31, 0x02	; 2
     af0:	a4 e9       	ldi	r26, 0x94	; 148
     af2:	b2 e0       	ldi	r27, 0x02	; 2
     af4:	01 90       	ld	r0, Z+
     af6:	0d 92       	st	X+, r0
     af8:	8a 95       	dec	r24
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <main+0x1b0>
     afc:	84 e9       	ldi	r24, 0x94	; 148
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	03 db       	rcall	.-2554   	; 0x108 <send_str>
     b02:	29 c0       	rjmp	.+82     	; 0xb56 <main+0x212>
     b04:	03 df       	rcall	.-506    	; 0x90c <right>
     b06:	8c e1       	ldi	r24, 0x1C	; 28
     b08:	e7 e2       	ldi	r30, 0x27	; 39
     b0a:	f2 e0       	ldi	r31, 0x02	; 2
     b0c:	a4 e9       	ldi	r26, 0x94	; 148
     b0e:	b2 e0       	ldi	r27, 0x02	; 2
     b10:	01 90       	ld	r0, Z+
     b12:	0d 92       	st	X+, r0
     b14:	8a 95       	dec	r24
     b16:	e1 f7       	brne	.-8      	; 0xb10 <main+0x1cc>
     b18:	84 e9       	ldi	r24, 0x94	; 148
     b1a:	92 e0       	ldi	r25, 0x02	; 2
     b1c:	f5 da       	rcall	.-2582   	; 0x108 <send_str>
     b1e:	1b c0       	rjmp	.+54     	; 0xb56 <main+0x212>
     b20:	e5 de       	rcall	.-566    	; 0x8ec <left>
     b22:	8b e1       	ldi	r24, 0x1B	; 27
     b24:	e3 e4       	ldi	r30, 0x43	; 67
     b26:	f2 e0       	ldi	r31, 0x02	; 2
     b28:	a4 e9       	ldi	r26, 0x94	; 148
     b2a:	b2 e0       	ldi	r27, 0x02	; 2
     b2c:	01 90       	ld	r0, Z+
     b2e:	0d 92       	st	X+, r0
     b30:	8a 95       	dec	r24
     b32:	e1 f7       	brne	.-8      	; 0xb2c <main+0x1e8>
     b34:	84 e9       	ldi	r24, 0x94	; 148
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	e7 da       	rcall	.-2610   	; 0x108 <send_str>
     b3a:	0d c0       	rjmp	.+26     	; 0xb56 <main+0x212>
     b3c:	f7 de       	rcall	.-530    	; 0x92c <stop>
     b3e:	8d e0       	ldi	r24, 0x0D	; 13
     b40:	ee e5       	ldi	r30, 0x5E	; 94
     b42:	f2 e0       	ldi	r31, 0x02	; 2
     b44:	a4 e9       	ldi	r26, 0x94	; 148
     b46:	b2 e0       	ldi	r27, 0x02	; 2
     b48:	01 90       	ld	r0, Z+
     b4a:	0d 92       	st	X+, r0
     b4c:	8a 95       	dec	r24
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <main+0x204>
     b50:	84 e9       	ldi	r24, 0x94	; 148
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	d9 da       	rcall	.-2638   	; 0x108 <send_str>
     b56:	1f 93       	push	r17
     b58:	0f 93       	push	r16
     b5a:	df 93       	push	r29
     b5c:	cf 93       	push	r28
     b5e:	ff 92       	push	r15
     b60:	ef 92       	push	r14
     b62:	0f 2e       	mov	r0, r31
     b64:	f4 e9       	ldi	r31, 0x94	; 148
     b66:	8f 2e       	mov	r8, r31
     b68:	f2 e0       	ldi	r31, 0x02	; 2
     b6a:	9f 2e       	mov	r9, r31
     b6c:	f0 2d       	mov	r31, r0
     b6e:	9f 92       	push	r9
     b70:	8f 92       	push	r8
     b72:	7d d0       	rcall	.+250    	; 0xc6e <sprintf>
     b74:	c4 01       	movw	r24, r8
     b76:	c8 da       	rcall	.-2672   	; 0x108 <send_str>
     b78:	8a e0       	ldi	r24, 0x0A	; 10
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	f4 01       	movw	r30, r8
     b7e:	91 83       	std	Z+1, r25	; 0x01
     b80:	80 83       	st	Z, r24
     b82:	c4 01       	movw	r24, r8
     b84:	c1 da       	rcall	.-2686   	; 0x108 <send_str>
     b86:	8d b7       	in	r24, 0x3d	; 61
     b88:	9e b7       	in	r25, 0x3e	; 62
     b8a:	08 96       	adiw	r24, 0x08	; 8
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	9e bf       	out	0x3e, r25	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	8d bf       	out	0x3d, r24	; 61
     b96:	06 cf       	rjmp	.-500    	; 0x9a4 <main+0x60>

00000b98 <__udivmodsi4>:
     b98:	a1 e2       	ldi	r26, 0x21	; 33
     b9a:	1a 2e       	mov	r1, r26
     b9c:	aa 1b       	sub	r26, r26
     b9e:	bb 1b       	sub	r27, r27
     ba0:	fd 01       	movw	r30, r26
     ba2:	0d c0       	rjmp	.+26     	; 0xbbe <__udivmodsi4_ep>

00000ba4 <__udivmodsi4_loop>:
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	ee 1f       	adc	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	a2 17       	cp	r26, r18
     bae:	b3 07       	cpc	r27, r19
     bb0:	e4 07       	cpc	r30, r20
     bb2:	f5 07       	cpc	r31, r21
     bb4:	20 f0       	brcs	.+8      	; 0xbbe <__udivmodsi4_ep>
     bb6:	a2 1b       	sub	r26, r18
     bb8:	b3 0b       	sbc	r27, r19
     bba:	e4 0b       	sbc	r30, r20
     bbc:	f5 0b       	sbc	r31, r21

00000bbe <__udivmodsi4_ep>:
     bbe:	66 1f       	adc	r22, r22
     bc0:	77 1f       	adc	r23, r23
     bc2:	88 1f       	adc	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	1a 94       	dec	r1
     bc8:	69 f7       	brne	.-38     	; 0xba4 <__udivmodsi4_loop>
     bca:	60 95       	com	r22
     bcc:	70 95       	com	r23
     bce:	80 95       	com	r24
     bd0:	90 95       	com	r25
     bd2:	9b 01       	movw	r18, r22
     bd4:	ac 01       	movw	r20, r24
     bd6:	bd 01       	movw	r22, r26
     bd8:	cf 01       	movw	r24, r30
     bda:	08 95       	ret

00000bdc <__tablejump2__>:
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	05 90       	lpm	r0, Z+
     be2:	f4 91       	lpm	r31, Z
     be4:	e0 2d       	mov	r30, r0
     be6:	09 94       	ijmp

00000be8 <__ashldi3>:
     be8:	0f 93       	push	r16
     bea:	08 30       	cpi	r16, 0x08	; 8
     bec:	90 f0       	brcs	.+36     	; 0xc12 <__ashldi3+0x2a>
     bee:	98 2f       	mov	r25, r24
     bf0:	87 2f       	mov	r24, r23
     bf2:	76 2f       	mov	r23, r22
     bf4:	65 2f       	mov	r22, r21
     bf6:	54 2f       	mov	r21, r20
     bf8:	43 2f       	mov	r20, r19
     bfa:	32 2f       	mov	r19, r18
     bfc:	22 27       	eor	r18, r18
     bfe:	08 50       	subi	r16, 0x08	; 8
     c00:	f4 cf       	rjmp	.-24     	; 0xbea <__ashldi3+0x2>
     c02:	22 0f       	add	r18, r18
     c04:	33 1f       	adc	r19, r19
     c06:	44 1f       	adc	r20, r20
     c08:	55 1f       	adc	r21, r21
     c0a:	66 1f       	adc	r22, r22
     c0c:	77 1f       	adc	r23, r23
     c0e:	88 1f       	adc	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	0a 95       	dec	r16
     c14:	b2 f7       	brpl	.-20     	; 0xc02 <__ashldi3+0x1a>
     c16:	0f 91       	pop	r16
     c18:	08 95       	ret

00000c1a <__ashrdi3>:
     c1a:	97 fb       	bst	r25, 7
     c1c:	10 f8       	bld	r1, 0

00000c1e <__lshrdi3>:
     c1e:	16 94       	lsr	r1
     c20:	00 08       	sbc	r0, r0
     c22:	0f 93       	push	r16
     c24:	08 30       	cpi	r16, 0x08	; 8
     c26:	98 f0       	brcs	.+38     	; 0xc4e <__lshrdi3+0x30>
     c28:	08 50       	subi	r16, 0x08	; 8
     c2a:	23 2f       	mov	r18, r19
     c2c:	34 2f       	mov	r19, r20
     c2e:	45 2f       	mov	r20, r21
     c30:	56 2f       	mov	r21, r22
     c32:	67 2f       	mov	r22, r23
     c34:	78 2f       	mov	r23, r24
     c36:	89 2f       	mov	r24, r25
     c38:	90 2d       	mov	r25, r0
     c3a:	f4 cf       	rjmp	.-24     	; 0xc24 <__lshrdi3+0x6>
     c3c:	05 94       	asr	r0
     c3e:	97 95       	ror	r25
     c40:	87 95       	ror	r24
     c42:	77 95       	ror	r23
     c44:	67 95       	ror	r22
     c46:	57 95       	ror	r21
     c48:	47 95       	ror	r20
     c4a:	37 95       	ror	r19
     c4c:	27 95       	ror	r18
     c4e:	0a 95       	dec	r16
     c50:	aa f7       	brpl	.-22     	; 0xc3c <__lshrdi3+0x1e>
     c52:	0f 91       	pop	r16
     c54:	08 95       	ret

00000c56 <__cmpdi2_s8>:
     c56:	00 24       	eor	r0, r0
     c58:	a7 fd       	sbrc	r26, 7
     c5a:	00 94       	com	r0
     c5c:	2a 17       	cp	r18, r26
     c5e:	30 05       	cpc	r19, r0
     c60:	40 05       	cpc	r20, r0
     c62:	50 05       	cpc	r21, r0
     c64:	60 05       	cpc	r22, r0
     c66:	70 05       	cpc	r23, r0
     c68:	80 05       	cpc	r24, r0
     c6a:	90 05       	cpc	r25, r0
     c6c:	08 95       	ret

00000c6e <sprintf>:
     c6e:	ae e0       	ldi	r26, 0x0E	; 14
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ec e3       	ldi	r30, 0x3C	; 60
     c74:	f6 e0       	ldi	r31, 0x06	; 6
     c76:	aa c2       	rjmp	.+1364   	; 0x11cc <__prologue_saves__+0x1c>
     c78:	0d 89       	ldd	r16, Y+21	; 0x15
     c7a:	1e 89       	ldd	r17, Y+22	; 0x16
     c7c:	86 e0       	ldi	r24, 0x06	; 6
     c7e:	8c 83       	std	Y+4, r24	; 0x04
     c80:	1a 83       	std	Y+2, r17	; 0x02
     c82:	09 83       	std	Y+1, r16	; 0x01
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	9f e7       	ldi	r25, 0x7F	; 127
     c88:	9e 83       	std	Y+6, r25	; 0x06
     c8a:	8d 83       	std	Y+5, r24	; 0x05
     c8c:	ae 01       	movw	r20, r28
     c8e:	47 5e       	subi	r20, 0xE7	; 231
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	6f 89       	ldd	r22, Y+23	; 0x17
     c94:	78 8d       	ldd	r23, Y+24	; 0x18
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	08 d0       	rcall	.+16     	; 0xcac <vfprintf>
     c9c:	ef 81       	ldd	r30, Y+7	; 0x07
     c9e:	f8 85       	ldd	r31, Y+8	; 0x08
     ca0:	e0 0f       	add	r30, r16
     ca2:	f1 1f       	adc	r31, r17
     ca4:	10 82       	st	Z, r1
     ca6:	2e 96       	adiw	r28, 0x0e	; 14
     ca8:	e4 e0       	ldi	r30, 0x04	; 4
     caa:	ac c2       	rjmp	.+1368   	; 0x1204 <__epilogue_restores__+0x1c>

00000cac <vfprintf>:
     cac:	ab e0       	ldi	r26, 0x0B	; 11
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	eb e5       	ldi	r30, 0x5B	; 91
     cb2:	f6 e0       	ldi	r31, 0x06	; 6
     cb4:	7d c2       	rjmp	.+1274   	; 0x11b0 <__prologue_saves__>
     cb6:	6c 01       	movw	r12, r24
     cb8:	7b 01       	movw	r14, r22
     cba:	8a 01       	movw	r16, r20
     cbc:	fc 01       	movw	r30, r24
     cbe:	17 82       	std	Z+7, r1	; 0x07
     cc0:	16 82       	std	Z+6, r1	; 0x06
     cc2:	83 81       	ldd	r24, Z+3	; 0x03
     cc4:	81 ff       	sbrs	r24, 1
     cc6:	bf c1       	rjmp	.+894    	; 0x1046 <vfprintf+0x39a>
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	3c 01       	movw	r6, r24
     cce:	f6 01       	movw	r30, r12
     cd0:	93 81       	ldd	r25, Z+3	; 0x03
     cd2:	f7 01       	movw	r30, r14
     cd4:	93 fd       	sbrc	r25, 3
     cd6:	85 91       	lpm	r24, Z+
     cd8:	93 ff       	sbrs	r25, 3
     cda:	81 91       	ld	r24, Z+
     cdc:	7f 01       	movw	r14, r30
     cde:	88 23       	and	r24, r24
     ce0:	09 f4       	brne	.+2      	; 0xce4 <vfprintf+0x38>
     ce2:	ad c1       	rjmp	.+858    	; 0x103e <vfprintf+0x392>
     ce4:	85 32       	cpi	r24, 0x25	; 37
     ce6:	39 f4       	brne	.+14     	; 0xcf6 <vfprintf+0x4a>
     ce8:	93 fd       	sbrc	r25, 3
     cea:	85 91       	lpm	r24, Z+
     cec:	93 ff       	sbrs	r25, 3
     cee:	81 91       	ld	r24, Z+
     cf0:	7f 01       	movw	r14, r30
     cf2:	85 32       	cpi	r24, 0x25	; 37
     cf4:	21 f4       	brne	.+8      	; 0xcfe <vfprintf+0x52>
     cf6:	b6 01       	movw	r22, r12
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	c0 d1       	rcall	.+896    	; 0x107c <fputc>
     cfc:	e8 cf       	rjmp	.-48     	; 0xcce <vfprintf+0x22>
     cfe:	91 2c       	mov	r9, r1
     d00:	21 2c       	mov	r2, r1
     d02:	31 2c       	mov	r3, r1
     d04:	ff e1       	ldi	r31, 0x1F	; 31
     d06:	f3 15       	cp	r31, r3
     d08:	d8 f0       	brcs	.+54     	; 0xd40 <vfprintf+0x94>
     d0a:	8b 32       	cpi	r24, 0x2B	; 43
     d0c:	79 f0       	breq	.+30     	; 0xd2c <vfprintf+0x80>
     d0e:	38 f4       	brcc	.+14     	; 0xd1e <vfprintf+0x72>
     d10:	80 32       	cpi	r24, 0x20	; 32
     d12:	79 f0       	breq	.+30     	; 0xd32 <vfprintf+0x86>
     d14:	83 32       	cpi	r24, 0x23	; 35
     d16:	a1 f4       	brne	.+40     	; 0xd40 <vfprintf+0x94>
     d18:	23 2d       	mov	r18, r3
     d1a:	20 61       	ori	r18, 0x10	; 16
     d1c:	1d c0       	rjmp	.+58     	; 0xd58 <vfprintf+0xac>
     d1e:	8d 32       	cpi	r24, 0x2D	; 45
     d20:	61 f0       	breq	.+24     	; 0xd3a <vfprintf+0x8e>
     d22:	80 33       	cpi	r24, 0x30	; 48
     d24:	69 f4       	brne	.+26     	; 0xd40 <vfprintf+0x94>
     d26:	23 2d       	mov	r18, r3
     d28:	21 60       	ori	r18, 0x01	; 1
     d2a:	16 c0       	rjmp	.+44     	; 0xd58 <vfprintf+0xac>
     d2c:	83 2d       	mov	r24, r3
     d2e:	82 60       	ori	r24, 0x02	; 2
     d30:	38 2e       	mov	r3, r24
     d32:	e3 2d       	mov	r30, r3
     d34:	e4 60       	ori	r30, 0x04	; 4
     d36:	3e 2e       	mov	r3, r30
     d38:	2a c0       	rjmp	.+84     	; 0xd8e <vfprintf+0xe2>
     d3a:	f3 2d       	mov	r31, r3
     d3c:	f8 60       	ori	r31, 0x08	; 8
     d3e:	1d c0       	rjmp	.+58     	; 0xd7a <vfprintf+0xce>
     d40:	37 fc       	sbrc	r3, 7
     d42:	2d c0       	rjmp	.+90     	; 0xd9e <vfprintf+0xf2>
     d44:	20 ed       	ldi	r18, 0xD0	; 208
     d46:	28 0f       	add	r18, r24
     d48:	2a 30       	cpi	r18, 0x0A	; 10
     d4a:	40 f0       	brcs	.+16     	; 0xd5c <vfprintf+0xb0>
     d4c:	8e 32       	cpi	r24, 0x2E	; 46
     d4e:	b9 f4       	brne	.+46     	; 0xd7e <vfprintf+0xd2>
     d50:	36 fc       	sbrc	r3, 6
     d52:	75 c1       	rjmp	.+746    	; 0x103e <vfprintf+0x392>
     d54:	23 2d       	mov	r18, r3
     d56:	20 64       	ori	r18, 0x40	; 64
     d58:	32 2e       	mov	r3, r18
     d5a:	19 c0       	rjmp	.+50     	; 0xd8e <vfprintf+0xe2>
     d5c:	36 fe       	sbrs	r3, 6
     d5e:	06 c0       	rjmp	.+12     	; 0xd6c <vfprintf+0xc0>
     d60:	8a e0       	ldi	r24, 0x0A	; 10
     d62:	98 9e       	mul	r9, r24
     d64:	20 0d       	add	r18, r0
     d66:	11 24       	eor	r1, r1
     d68:	92 2e       	mov	r9, r18
     d6a:	11 c0       	rjmp	.+34     	; 0xd8e <vfprintf+0xe2>
     d6c:	ea e0       	ldi	r30, 0x0A	; 10
     d6e:	2e 9e       	mul	r2, r30
     d70:	20 0d       	add	r18, r0
     d72:	11 24       	eor	r1, r1
     d74:	22 2e       	mov	r2, r18
     d76:	f3 2d       	mov	r31, r3
     d78:	f0 62       	ori	r31, 0x20	; 32
     d7a:	3f 2e       	mov	r3, r31
     d7c:	08 c0       	rjmp	.+16     	; 0xd8e <vfprintf+0xe2>
     d7e:	8c 36       	cpi	r24, 0x6C	; 108
     d80:	21 f4       	brne	.+8      	; 0xd8a <vfprintf+0xde>
     d82:	83 2d       	mov	r24, r3
     d84:	80 68       	ori	r24, 0x80	; 128
     d86:	38 2e       	mov	r3, r24
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <vfprintf+0xe2>
     d8a:	88 36       	cpi	r24, 0x68	; 104
     d8c:	41 f4       	brne	.+16     	; 0xd9e <vfprintf+0xf2>
     d8e:	f7 01       	movw	r30, r14
     d90:	93 fd       	sbrc	r25, 3
     d92:	85 91       	lpm	r24, Z+
     d94:	93 ff       	sbrs	r25, 3
     d96:	81 91       	ld	r24, Z+
     d98:	7f 01       	movw	r14, r30
     d9a:	81 11       	cpse	r24, r1
     d9c:	b3 cf       	rjmp	.-154    	; 0xd04 <vfprintf+0x58>
     d9e:	98 2f       	mov	r25, r24
     da0:	9f 7d       	andi	r25, 0xDF	; 223
     da2:	95 54       	subi	r25, 0x45	; 69
     da4:	93 30       	cpi	r25, 0x03	; 3
     da6:	28 f4       	brcc	.+10     	; 0xdb2 <vfprintf+0x106>
     da8:	0c 5f       	subi	r16, 0xFC	; 252
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	9f e3       	ldi	r25, 0x3F	; 63
     dae:	99 83       	std	Y+1, r25	; 0x01
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <vfprintf+0x120>
     db2:	83 36       	cpi	r24, 0x63	; 99
     db4:	31 f0       	breq	.+12     	; 0xdc2 <vfprintf+0x116>
     db6:	83 37       	cpi	r24, 0x73	; 115
     db8:	71 f0       	breq	.+28     	; 0xdd6 <vfprintf+0x12a>
     dba:	83 35       	cpi	r24, 0x53	; 83
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <vfprintf+0x114>
     dbe:	55 c0       	rjmp	.+170    	; 0xe6a <vfprintf+0x1be>
     dc0:	20 c0       	rjmp	.+64     	; 0xe02 <vfprintf+0x156>
     dc2:	f8 01       	movw	r30, r16
     dc4:	80 81       	ld	r24, Z
     dc6:	89 83       	std	Y+1, r24	; 0x01
     dc8:	0e 5f       	subi	r16, 0xFE	; 254
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	88 24       	eor	r8, r8
     dce:	83 94       	inc	r8
     dd0:	91 2c       	mov	r9, r1
     dd2:	53 01       	movw	r10, r6
     dd4:	12 c0       	rjmp	.+36     	; 0xdfa <vfprintf+0x14e>
     dd6:	28 01       	movw	r4, r16
     dd8:	f2 e0       	ldi	r31, 0x02	; 2
     dda:	4f 0e       	add	r4, r31
     ddc:	51 1c       	adc	r5, r1
     dde:	f8 01       	movw	r30, r16
     de0:	a0 80       	ld	r10, Z
     de2:	b1 80       	ldd	r11, Z+1	; 0x01
     de4:	36 fe       	sbrs	r3, 6
     de6:	03 c0       	rjmp	.+6      	; 0xdee <vfprintf+0x142>
     de8:	69 2d       	mov	r22, r9
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <vfprintf+0x146>
     dee:	6f ef       	ldi	r22, 0xFF	; 255
     df0:	7f ef       	ldi	r23, 0xFF	; 255
     df2:	c5 01       	movw	r24, r10
     df4:	38 d1       	rcall	.+624    	; 0x1066 <strnlen>
     df6:	4c 01       	movw	r8, r24
     df8:	82 01       	movw	r16, r4
     dfa:	f3 2d       	mov	r31, r3
     dfc:	ff 77       	andi	r31, 0x7F	; 127
     dfe:	3f 2e       	mov	r3, r31
     e00:	15 c0       	rjmp	.+42     	; 0xe2c <vfprintf+0x180>
     e02:	28 01       	movw	r4, r16
     e04:	22 e0       	ldi	r18, 0x02	; 2
     e06:	42 0e       	add	r4, r18
     e08:	51 1c       	adc	r5, r1
     e0a:	f8 01       	movw	r30, r16
     e0c:	a0 80       	ld	r10, Z
     e0e:	b1 80       	ldd	r11, Z+1	; 0x01
     e10:	36 fe       	sbrs	r3, 6
     e12:	03 c0       	rjmp	.+6      	; 0xe1a <vfprintf+0x16e>
     e14:	69 2d       	mov	r22, r9
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <vfprintf+0x172>
     e1a:	6f ef       	ldi	r22, 0xFF	; 255
     e1c:	7f ef       	ldi	r23, 0xFF	; 255
     e1e:	c5 01       	movw	r24, r10
     e20:	17 d1       	rcall	.+558    	; 0x1050 <strnlen_P>
     e22:	4c 01       	movw	r8, r24
     e24:	f3 2d       	mov	r31, r3
     e26:	f0 68       	ori	r31, 0x80	; 128
     e28:	3f 2e       	mov	r3, r31
     e2a:	82 01       	movw	r16, r4
     e2c:	33 fc       	sbrc	r3, 3
     e2e:	19 c0       	rjmp	.+50     	; 0xe62 <vfprintf+0x1b6>
     e30:	82 2d       	mov	r24, r2
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	88 16       	cp	r8, r24
     e36:	99 06       	cpc	r9, r25
     e38:	a0 f4       	brcc	.+40     	; 0xe62 <vfprintf+0x1b6>
     e3a:	b6 01       	movw	r22, r12
     e3c:	80 e2       	ldi	r24, 0x20	; 32
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	1d d1       	rcall	.+570    	; 0x107c <fputc>
     e42:	2a 94       	dec	r2
     e44:	f5 cf       	rjmp	.-22     	; 0xe30 <vfprintf+0x184>
     e46:	f5 01       	movw	r30, r10
     e48:	37 fc       	sbrc	r3, 7
     e4a:	85 91       	lpm	r24, Z+
     e4c:	37 fe       	sbrs	r3, 7
     e4e:	81 91       	ld	r24, Z+
     e50:	5f 01       	movw	r10, r30
     e52:	b6 01       	movw	r22, r12
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	12 d1       	rcall	.+548    	; 0x107c <fputc>
     e58:	21 10       	cpse	r2, r1
     e5a:	2a 94       	dec	r2
     e5c:	21 e0       	ldi	r18, 0x01	; 1
     e5e:	82 1a       	sub	r8, r18
     e60:	91 08       	sbc	r9, r1
     e62:	81 14       	cp	r8, r1
     e64:	91 04       	cpc	r9, r1
     e66:	79 f7       	brne	.-34     	; 0xe46 <vfprintf+0x19a>
     e68:	e1 c0       	rjmp	.+450    	; 0x102c <vfprintf+0x380>
     e6a:	84 36       	cpi	r24, 0x64	; 100
     e6c:	11 f0       	breq	.+4      	; 0xe72 <vfprintf+0x1c6>
     e6e:	89 36       	cpi	r24, 0x69	; 105
     e70:	39 f5       	brne	.+78     	; 0xec0 <vfprintf+0x214>
     e72:	f8 01       	movw	r30, r16
     e74:	37 fe       	sbrs	r3, 7
     e76:	07 c0       	rjmp	.+14     	; 0xe86 <vfprintf+0x1da>
     e78:	60 81       	ld	r22, Z
     e7a:	71 81       	ldd	r23, Z+1	; 0x01
     e7c:	82 81       	ldd	r24, Z+2	; 0x02
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	0c 5f       	subi	r16, 0xFC	; 252
     e82:	1f 4f       	sbci	r17, 0xFF	; 255
     e84:	08 c0       	rjmp	.+16     	; 0xe96 <vfprintf+0x1ea>
     e86:	60 81       	ld	r22, Z
     e88:	71 81       	ldd	r23, Z+1	; 0x01
     e8a:	07 2e       	mov	r0, r23
     e8c:	00 0c       	add	r0, r0
     e8e:	88 0b       	sbc	r24, r24
     e90:	99 0b       	sbc	r25, r25
     e92:	0e 5f       	subi	r16, 0xFE	; 254
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	f3 2d       	mov	r31, r3
     e98:	ff 76       	andi	r31, 0x6F	; 111
     e9a:	3f 2e       	mov	r3, r31
     e9c:	97 ff       	sbrs	r25, 7
     e9e:	09 c0       	rjmp	.+18     	; 0xeb2 <vfprintf+0x206>
     ea0:	90 95       	com	r25
     ea2:	80 95       	com	r24
     ea4:	70 95       	com	r23
     ea6:	61 95       	neg	r22
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	8f 4f       	sbci	r24, 0xFF	; 255
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	f0 68       	ori	r31, 0x80	; 128
     eb0:	3f 2e       	mov	r3, r31
     eb2:	2a e0       	ldi	r18, 0x0A	; 10
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	a3 01       	movw	r20, r6
     eb8:	1d d1       	rcall	.+570    	; 0x10f4 <__ultoa_invert>
     eba:	88 2e       	mov	r8, r24
     ebc:	86 18       	sub	r8, r6
     ebe:	44 c0       	rjmp	.+136    	; 0xf48 <vfprintf+0x29c>
     ec0:	85 37       	cpi	r24, 0x75	; 117
     ec2:	31 f4       	brne	.+12     	; 0xed0 <vfprintf+0x224>
     ec4:	23 2d       	mov	r18, r3
     ec6:	2f 7e       	andi	r18, 0xEF	; 239
     ec8:	b2 2e       	mov	r11, r18
     eca:	2a e0       	ldi	r18, 0x0A	; 10
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	25 c0       	rjmp	.+74     	; 0xf1a <vfprintf+0x26e>
     ed0:	93 2d       	mov	r25, r3
     ed2:	99 7f       	andi	r25, 0xF9	; 249
     ed4:	b9 2e       	mov	r11, r25
     ed6:	8f 36       	cpi	r24, 0x6F	; 111
     ed8:	c1 f0       	breq	.+48     	; 0xf0a <vfprintf+0x25e>
     eda:	18 f4       	brcc	.+6      	; 0xee2 <vfprintf+0x236>
     edc:	88 35       	cpi	r24, 0x58	; 88
     ede:	79 f0       	breq	.+30     	; 0xefe <vfprintf+0x252>
     ee0:	ae c0       	rjmp	.+348    	; 0x103e <vfprintf+0x392>
     ee2:	80 37       	cpi	r24, 0x70	; 112
     ee4:	19 f0       	breq	.+6      	; 0xeec <vfprintf+0x240>
     ee6:	88 37       	cpi	r24, 0x78	; 120
     ee8:	21 f0       	breq	.+8      	; 0xef2 <vfprintf+0x246>
     eea:	a9 c0       	rjmp	.+338    	; 0x103e <vfprintf+0x392>
     eec:	e9 2f       	mov	r30, r25
     eee:	e0 61       	ori	r30, 0x10	; 16
     ef0:	be 2e       	mov	r11, r30
     ef2:	b4 fe       	sbrs	r11, 4
     ef4:	0d c0       	rjmp	.+26     	; 0xf10 <vfprintf+0x264>
     ef6:	fb 2d       	mov	r31, r11
     ef8:	f4 60       	ori	r31, 0x04	; 4
     efa:	bf 2e       	mov	r11, r31
     efc:	09 c0       	rjmp	.+18     	; 0xf10 <vfprintf+0x264>
     efe:	34 fe       	sbrs	r3, 4
     f00:	0a c0       	rjmp	.+20     	; 0xf16 <vfprintf+0x26a>
     f02:	29 2f       	mov	r18, r25
     f04:	26 60       	ori	r18, 0x06	; 6
     f06:	b2 2e       	mov	r11, r18
     f08:	06 c0       	rjmp	.+12     	; 0xf16 <vfprintf+0x26a>
     f0a:	28 e0       	ldi	r18, 0x08	; 8
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	05 c0       	rjmp	.+10     	; 0xf1a <vfprintf+0x26e>
     f10:	20 e1       	ldi	r18, 0x10	; 16
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0x26e>
     f16:	20 e1       	ldi	r18, 0x10	; 16
     f18:	32 e0       	ldi	r19, 0x02	; 2
     f1a:	f8 01       	movw	r30, r16
     f1c:	b7 fe       	sbrs	r11, 7
     f1e:	07 c0       	rjmp	.+14     	; 0xf2e <vfprintf+0x282>
     f20:	60 81       	ld	r22, Z
     f22:	71 81       	ldd	r23, Z+1	; 0x01
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	0c 5f       	subi	r16, 0xFC	; 252
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <vfprintf+0x28e>
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 5f       	subi	r16, 0xFE	; 254
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	a3 01       	movw	r20, r6
     f3c:	db d0       	rcall	.+438    	; 0x10f4 <__ultoa_invert>
     f3e:	88 2e       	mov	r8, r24
     f40:	86 18       	sub	r8, r6
     f42:	fb 2d       	mov	r31, r11
     f44:	ff 77       	andi	r31, 0x7F	; 127
     f46:	3f 2e       	mov	r3, r31
     f48:	36 fe       	sbrs	r3, 6
     f4a:	0d c0       	rjmp	.+26     	; 0xf66 <vfprintf+0x2ba>
     f4c:	23 2d       	mov	r18, r3
     f4e:	2e 7f       	andi	r18, 0xFE	; 254
     f50:	a2 2e       	mov	r10, r18
     f52:	89 14       	cp	r8, r9
     f54:	58 f4       	brcc	.+22     	; 0xf6c <vfprintf+0x2c0>
     f56:	34 fe       	sbrs	r3, 4
     f58:	0b c0       	rjmp	.+22     	; 0xf70 <vfprintf+0x2c4>
     f5a:	32 fc       	sbrc	r3, 2
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <vfprintf+0x2c4>
     f5e:	83 2d       	mov	r24, r3
     f60:	8e 7e       	andi	r24, 0xEE	; 238
     f62:	a8 2e       	mov	r10, r24
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <vfprintf+0x2c4>
     f66:	b8 2c       	mov	r11, r8
     f68:	a3 2c       	mov	r10, r3
     f6a:	03 c0       	rjmp	.+6      	; 0xf72 <vfprintf+0x2c6>
     f6c:	b8 2c       	mov	r11, r8
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <vfprintf+0x2c6>
     f70:	b9 2c       	mov	r11, r9
     f72:	a4 fe       	sbrs	r10, 4
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <vfprintf+0x2e8>
     f76:	fe 01       	movw	r30, r28
     f78:	e8 0d       	add	r30, r8
     f7a:	f1 1d       	adc	r31, r1
     f7c:	80 81       	ld	r24, Z
     f7e:	80 33       	cpi	r24, 0x30	; 48
     f80:	21 f4       	brne	.+8      	; 0xf8a <vfprintf+0x2de>
     f82:	9a 2d       	mov	r25, r10
     f84:	99 7e       	andi	r25, 0xE9	; 233
     f86:	a9 2e       	mov	r10, r25
     f88:	09 c0       	rjmp	.+18     	; 0xf9c <vfprintf+0x2f0>
     f8a:	a2 fe       	sbrs	r10, 2
     f8c:	06 c0       	rjmp	.+12     	; 0xf9a <vfprintf+0x2ee>
     f8e:	b3 94       	inc	r11
     f90:	b3 94       	inc	r11
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <vfprintf+0x2f0>
     f94:	8a 2d       	mov	r24, r10
     f96:	86 78       	andi	r24, 0x86	; 134
     f98:	09 f0       	breq	.+2      	; 0xf9c <vfprintf+0x2f0>
     f9a:	b3 94       	inc	r11
     f9c:	a3 fc       	sbrc	r10, 3
     f9e:	10 c0       	rjmp	.+32     	; 0xfc0 <vfprintf+0x314>
     fa0:	a0 fe       	sbrs	r10, 0
     fa2:	06 c0       	rjmp	.+12     	; 0xfb0 <vfprintf+0x304>
     fa4:	b2 14       	cp	r11, r2
     fa6:	80 f4       	brcc	.+32     	; 0xfc8 <vfprintf+0x31c>
     fa8:	28 0c       	add	r2, r8
     faa:	92 2c       	mov	r9, r2
     fac:	9b 18       	sub	r9, r11
     fae:	0d c0       	rjmp	.+26     	; 0xfca <vfprintf+0x31e>
     fb0:	b2 14       	cp	r11, r2
     fb2:	58 f4       	brcc	.+22     	; 0xfca <vfprintf+0x31e>
     fb4:	b6 01       	movw	r22, r12
     fb6:	80 e2       	ldi	r24, 0x20	; 32
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	60 d0       	rcall	.+192    	; 0x107c <fputc>
     fbc:	b3 94       	inc	r11
     fbe:	f8 cf       	rjmp	.-16     	; 0xfb0 <vfprintf+0x304>
     fc0:	b2 14       	cp	r11, r2
     fc2:	18 f4       	brcc	.+6      	; 0xfca <vfprintf+0x31e>
     fc4:	2b 18       	sub	r2, r11
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <vfprintf+0x320>
     fc8:	98 2c       	mov	r9, r8
     fca:	21 2c       	mov	r2, r1
     fcc:	a4 fe       	sbrs	r10, 4
     fce:	0f c0       	rjmp	.+30     	; 0xfee <vfprintf+0x342>
     fd0:	b6 01       	movw	r22, r12
     fd2:	80 e3       	ldi	r24, 0x30	; 48
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	52 d0       	rcall	.+164    	; 0x107c <fputc>
     fd8:	a2 fe       	sbrs	r10, 2
     fda:	16 c0       	rjmp	.+44     	; 0x1008 <vfprintf+0x35c>
     fdc:	a1 fc       	sbrc	r10, 1
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <vfprintf+0x33a>
     fe0:	88 e7       	ldi	r24, 0x78	; 120
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <vfprintf+0x33e>
     fe6:	88 e5       	ldi	r24, 0x58	; 88
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	b6 01       	movw	r22, r12
     fec:	0c c0       	rjmp	.+24     	; 0x1006 <vfprintf+0x35a>
     fee:	8a 2d       	mov	r24, r10
     ff0:	86 78       	andi	r24, 0x86	; 134
     ff2:	51 f0       	breq	.+20     	; 0x1008 <vfprintf+0x35c>
     ff4:	a1 fe       	sbrs	r10, 1
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <vfprintf+0x350>
     ff8:	8b e2       	ldi	r24, 0x2B	; 43
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <vfprintf+0x352>
     ffc:	80 e2       	ldi	r24, 0x20	; 32
     ffe:	a7 fc       	sbrc	r10, 7
    1000:	8d e2       	ldi	r24, 0x2D	; 45
    1002:	b6 01       	movw	r22, r12
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	3a d0       	rcall	.+116    	; 0x107c <fputc>
    1008:	89 14       	cp	r8, r9
    100a:	30 f4       	brcc	.+12     	; 0x1018 <vfprintf+0x36c>
    100c:	b6 01       	movw	r22, r12
    100e:	80 e3       	ldi	r24, 0x30	; 48
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	34 d0       	rcall	.+104    	; 0x107c <fputc>
    1014:	9a 94       	dec	r9
    1016:	f8 cf       	rjmp	.-16     	; 0x1008 <vfprintf+0x35c>
    1018:	8a 94       	dec	r8
    101a:	f3 01       	movw	r30, r6
    101c:	e8 0d       	add	r30, r8
    101e:	f1 1d       	adc	r31, r1
    1020:	80 81       	ld	r24, Z
    1022:	b6 01       	movw	r22, r12
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	2a d0       	rcall	.+84     	; 0x107c <fputc>
    1028:	81 10       	cpse	r8, r1
    102a:	f6 cf       	rjmp	.-20     	; 0x1018 <vfprintf+0x36c>
    102c:	22 20       	and	r2, r2
    102e:	09 f4       	brne	.+2      	; 0x1032 <vfprintf+0x386>
    1030:	4e ce       	rjmp	.-868    	; 0xcce <vfprintf+0x22>
    1032:	b6 01       	movw	r22, r12
    1034:	80 e2       	ldi	r24, 0x20	; 32
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	21 d0       	rcall	.+66     	; 0x107c <fputc>
    103a:	2a 94       	dec	r2
    103c:	f7 cf       	rjmp	.-18     	; 0x102c <vfprintf+0x380>
    103e:	f6 01       	movw	r30, r12
    1040:	86 81       	ldd	r24, Z+6	; 0x06
    1042:	97 81       	ldd	r25, Z+7	; 0x07
    1044:	02 c0       	rjmp	.+4      	; 0x104a <vfprintf+0x39e>
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	9f ef       	ldi	r25, 0xFF	; 255
    104a:	2b 96       	adiw	r28, 0x0b	; 11
    104c:	e2 e1       	ldi	r30, 0x12	; 18
    104e:	cc c0       	rjmp	.+408    	; 0x11e8 <__epilogue_restores__>

00001050 <strnlen_P>:
    1050:	fc 01       	movw	r30, r24
    1052:	05 90       	lpm	r0, Z+
    1054:	61 50       	subi	r22, 0x01	; 1
    1056:	70 40       	sbci	r23, 0x00	; 0
    1058:	01 10       	cpse	r0, r1
    105a:	d8 f7       	brcc	.-10     	; 0x1052 <strnlen_P+0x2>
    105c:	80 95       	com	r24
    105e:	90 95       	com	r25
    1060:	8e 0f       	add	r24, r30
    1062:	9f 1f       	adc	r25, r31
    1064:	08 95       	ret

00001066 <strnlen>:
    1066:	fc 01       	movw	r30, r24
    1068:	61 50       	subi	r22, 0x01	; 1
    106a:	70 40       	sbci	r23, 0x00	; 0
    106c:	01 90       	ld	r0, Z+
    106e:	01 10       	cpse	r0, r1
    1070:	d8 f7       	brcc	.-10     	; 0x1068 <strnlen+0x2>
    1072:	80 95       	com	r24
    1074:	90 95       	com	r25
    1076:	8e 0f       	add	r24, r30
    1078:	9f 1f       	adc	r25, r31
    107a:	08 95       	ret

0000107c <fputc>:
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	fb 01       	movw	r30, r22
    1086:	23 81       	ldd	r18, Z+3	; 0x03
    1088:	21 fd       	sbrc	r18, 1
    108a:	03 c0       	rjmp	.+6      	; 0x1092 <fputc+0x16>
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	9f ef       	ldi	r25, 0xFF	; 255
    1090:	2c c0       	rjmp	.+88     	; 0x10ea <fputc+0x6e>
    1092:	22 ff       	sbrs	r18, 2
    1094:	16 c0       	rjmp	.+44     	; 0x10c2 <fputc+0x46>
    1096:	46 81       	ldd	r20, Z+6	; 0x06
    1098:	57 81       	ldd	r21, Z+7	; 0x07
    109a:	24 81       	ldd	r18, Z+4	; 0x04
    109c:	35 81       	ldd	r19, Z+5	; 0x05
    109e:	42 17       	cp	r20, r18
    10a0:	53 07       	cpc	r21, r19
    10a2:	44 f4       	brge	.+16     	; 0x10b4 <fputc+0x38>
    10a4:	a0 81       	ld	r26, Z
    10a6:	b1 81       	ldd	r27, Z+1	; 0x01
    10a8:	9d 01       	movw	r18, r26
    10aa:	2f 5f       	subi	r18, 0xFF	; 255
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	31 83       	std	Z+1, r19	; 0x01
    10b0:	20 83       	st	Z, r18
    10b2:	8c 93       	st	X, r24
    10b4:	26 81       	ldd	r18, Z+6	; 0x06
    10b6:	37 81       	ldd	r19, Z+7	; 0x07
    10b8:	2f 5f       	subi	r18, 0xFF	; 255
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	37 83       	std	Z+7, r19	; 0x07
    10be:	26 83       	std	Z+6, r18	; 0x06
    10c0:	14 c0       	rjmp	.+40     	; 0x10ea <fputc+0x6e>
    10c2:	8b 01       	movw	r16, r22
    10c4:	ec 01       	movw	r28, r24
    10c6:	fb 01       	movw	r30, r22
    10c8:	00 84       	ldd	r0, Z+8	; 0x08
    10ca:	f1 85       	ldd	r31, Z+9	; 0x09
    10cc:	e0 2d       	mov	r30, r0
    10ce:	09 95       	icall
    10d0:	89 2b       	or	r24, r25
    10d2:	e1 f6       	brne	.-72     	; 0x108c <fputc+0x10>
    10d4:	d8 01       	movw	r26, r16
    10d6:	16 96       	adiw	r26, 0x06	; 6
    10d8:	8d 91       	ld	r24, X+
    10da:	9c 91       	ld	r25, X
    10dc:	17 97       	sbiw	r26, 0x07	; 7
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	17 96       	adiw	r26, 0x07	; 7
    10e2:	9c 93       	st	X, r25
    10e4:	8e 93       	st	-X, r24
    10e6:	16 97       	sbiw	r26, 0x06	; 6
    10e8:	ce 01       	movw	r24, r28
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	08 95       	ret

000010f4 <__ultoa_invert>:
    10f4:	fa 01       	movw	r30, r20
    10f6:	aa 27       	eor	r26, r26
    10f8:	28 30       	cpi	r18, 0x08	; 8
    10fa:	51 f1       	breq	.+84     	; 0x1150 <__ultoa_invert+0x5c>
    10fc:	20 31       	cpi	r18, 0x10	; 16
    10fe:	81 f1       	breq	.+96     	; 0x1160 <__ultoa_invert+0x6c>
    1100:	e8 94       	clt
    1102:	6f 93       	push	r22
    1104:	6e 7f       	andi	r22, 0xFE	; 254
    1106:	6e 5f       	subi	r22, 0xFE	; 254
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	8f 4f       	sbci	r24, 0xFF	; 255
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	af 4f       	sbci	r26, 0xFF	; 255
    1110:	b1 e0       	ldi	r27, 0x01	; 1
    1112:	3e d0       	rcall	.+124    	; 0x1190 <__ultoa_invert+0x9c>
    1114:	b4 e0       	ldi	r27, 0x04	; 4
    1116:	3c d0       	rcall	.+120    	; 0x1190 <__ultoa_invert+0x9c>
    1118:	67 0f       	add	r22, r23
    111a:	78 1f       	adc	r23, r24
    111c:	89 1f       	adc	r24, r25
    111e:	9a 1f       	adc	r25, r26
    1120:	a1 1d       	adc	r26, r1
    1122:	68 0f       	add	r22, r24
    1124:	79 1f       	adc	r23, r25
    1126:	8a 1f       	adc	r24, r26
    1128:	91 1d       	adc	r25, r1
    112a:	a1 1d       	adc	r26, r1
    112c:	6a 0f       	add	r22, r26
    112e:	71 1d       	adc	r23, r1
    1130:	81 1d       	adc	r24, r1
    1132:	91 1d       	adc	r25, r1
    1134:	a1 1d       	adc	r26, r1
    1136:	20 d0       	rcall	.+64     	; 0x1178 <__ultoa_invert+0x84>
    1138:	09 f4       	brne	.+2      	; 0x113c <__ultoa_invert+0x48>
    113a:	68 94       	set
    113c:	3f 91       	pop	r19
    113e:	2a e0       	ldi	r18, 0x0A	; 10
    1140:	26 9f       	mul	r18, r22
    1142:	11 24       	eor	r1, r1
    1144:	30 19       	sub	r19, r0
    1146:	30 5d       	subi	r19, 0xD0	; 208
    1148:	31 93       	st	Z+, r19
    114a:	de f6       	brtc	.-74     	; 0x1102 <__ultoa_invert+0xe>
    114c:	cf 01       	movw	r24, r30
    114e:	08 95       	ret
    1150:	46 2f       	mov	r20, r22
    1152:	47 70       	andi	r20, 0x07	; 7
    1154:	40 5d       	subi	r20, 0xD0	; 208
    1156:	41 93       	st	Z+, r20
    1158:	b3 e0       	ldi	r27, 0x03	; 3
    115a:	0f d0       	rcall	.+30     	; 0x117a <__ultoa_invert+0x86>
    115c:	c9 f7       	brne	.-14     	; 0x1150 <__ultoa_invert+0x5c>
    115e:	f6 cf       	rjmp	.-20     	; 0x114c <__ultoa_invert+0x58>
    1160:	46 2f       	mov	r20, r22
    1162:	4f 70       	andi	r20, 0x0F	; 15
    1164:	40 5d       	subi	r20, 0xD0	; 208
    1166:	4a 33       	cpi	r20, 0x3A	; 58
    1168:	18 f0       	brcs	.+6      	; 0x1170 <__ultoa_invert+0x7c>
    116a:	49 5d       	subi	r20, 0xD9	; 217
    116c:	31 fd       	sbrc	r19, 1
    116e:	40 52       	subi	r20, 0x20	; 32
    1170:	41 93       	st	Z+, r20
    1172:	02 d0       	rcall	.+4      	; 0x1178 <__ultoa_invert+0x84>
    1174:	a9 f7       	brne	.-22     	; 0x1160 <__ultoa_invert+0x6c>
    1176:	ea cf       	rjmp	.-44     	; 0x114c <__ultoa_invert+0x58>
    1178:	b4 e0       	ldi	r27, 0x04	; 4
    117a:	a6 95       	lsr	r26
    117c:	97 95       	ror	r25
    117e:	87 95       	ror	r24
    1180:	77 95       	ror	r23
    1182:	67 95       	ror	r22
    1184:	ba 95       	dec	r27
    1186:	c9 f7       	brne	.-14     	; 0x117a <__ultoa_invert+0x86>
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	61 05       	cpc	r22, r1
    118c:	71 05       	cpc	r23, r1
    118e:	08 95       	ret
    1190:	9b 01       	movw	r18, r22
    1192:	ac 01       	movw	r20, r24
    1194:	0a 2e       	mov	r0, r26
    1196:	06 94       	lsr	r0
    1198:	57 95       	ror	r21
    119a:	47 95       	ror	r20
    119c:	37 95       	ror	r19
    119e:	27 95       	ror	r18
    11a0:	ba 95       	dec	r27
    11a2:	c9 f7       	brne	.-14     	; 0x1196 <__ultoa_invert+0xa2>
    11a4:	62 0f       	add	r22, r18
    11a6:	73 1f       	adc	r23, r19
    11a8:	84 1f       	adc	r24, r20
    11aa:	95 1f       	adc	r25, r21
    11ac:	a0 1d       	adc	r26, r0
    11ae:	08 95       	ret

000011b0 <__prologue_saves__>:
    11b0:	2f 92       	push	r2
    11b2:	3f 92       	push	r3
    11b4:	4f 92       	push	r4
    11b6:	5f 92       	push	r5
    11b8:	6f 92       	push	r6
    11ba:	7f 92       	push	r7
    11bc:	8f 92       	push	r8
    11be:	9f 92       	push	r9
    11c0:	af 92       	push	r10
    11c2:	bf 92       	push	r11
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	ca 1b       	sub	r28, r26
    11da:	db 0b       	sbc	r29, r27
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	de bf       	out	0x3e, r29	; 62
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	09 94       	ijmp

000011e8 <__epilogue_restores__>:
    11e8:	2a 88       	ldd	r2, Y+18	; 0x12
    11ea:	39 88       	ldd	r3, Y+17	; 0x11
    11ec:	48 88       	ldd	r4, Y+16	; 0x10
    11ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    11f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    11f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    11f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    11f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    11f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    11fa:	b9 84       	ldd	r11, Y+9	; 0x09
    11fc:	c8 84       	ldd	r12, Y+8	; 0x08
    11fe:	df 80       	ldd	r13, Y+7	; 0x07
    1200:	ee 80       	ldd	r14, Y+6	; 0x06
    1202:	fd 80       	ldd	r15, Y+5	; 0x05
    1204:	0c 81       	ldd	r16, Y+4	; 0x04
    1206:	1b 81       	ldd	r17, Y+3	; 0x03
    1208:	aa 81       	ldd	r26, Y+2	; 0x02
    120a:	b9 81       	ldd	r27, Y+1	; 0x01
    120c:	ce 0f       	add	r28, r30
    120e:	d1 1d       	adc	r29, r1
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	ed 01       	movw	r28, r26
    121c:	08 95       	ret

0000121e <_exit>:
    121e:	f8 94       	cli

00001220 <__stop_program>:
    1220:	ff cf       	rjmp	.-2      	; 0x1220 <__stop_program>
