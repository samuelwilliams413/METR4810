
Stepper324A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002af  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b7  00000000  00000000  0000055f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000231  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00000948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000175  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000028  00000000  00000000  00000b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a4 30       	cpi	r26, 0x04	; 4
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  9c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <motor_initB>:
void motor_initB()
{
	// configure for inverted PWM output on motor control pins:
	//  set OCxx on compare match, clear on timer overflow
	//  Timer0 count up from 0 to 255
	TCCR0A = 0b11110001;
  a4:	81 ef       	ldi	r24, 0xF1	; 241
  a6:	84 bd       	out	0x24, r24	; 36
	
	// use the system clock/8 (=2.5 MHz) as the timer clock
	TCCR0B = 0b00001010;
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	85 bd       	out	0x25, r24	; 37
	
	// initialize all PWMs to 0% duty cycle (braking)
	OCR0A =  0;
  ac:	17 bc       	out	0x27, r1	; 39
	OCR0B  = 0;
  ae:	18 bc       	out	0x28, r1	; 40
	// set PWM pins as digital outputs (the PWM signals will not
	// appear on the lines if they are digital inputs)
	DDRB |= (1 << PORTB3) | (1 << PORTB4);
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	88 61       	ori	r24, 0x18	; 24
  b4:	84 b9       	out	0x04, r24	; 4
  b6:	08 95       	ret

000000b8 <main>:

	
int main() {
	 // set port D to output

	DDRA = 0x00;
  b8:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a b9       	out	0x0a, r24	; 10
	motor_initB();
  be:	0e 94 52 00 	call	0xa4	; 0xa4 <motor_initB>
	servo_init();
  c2:	0e 94 86 00 	call	0x10c	; 0x10c <servo_init>

		//_delay_ms(1000);
		/*move_servo(0xff);*/
		//counterclockwiseB(0xff);
		cw = PINA0;
		ccw = PINA1;
  c6:	c1 e0       	ldi	r28, 0x01	; 1
  c8:	d0 e0       	ldi	r29, 0x00	; 0
	DDRA = 0x00;
	DDRD = 0xff;
	motor_initB();
	servo_init();
	while (1) {
		 move_servo(135);   //0 degree
  ca:	87 e8       	ldi	r24, 0x87	; 135
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 74 00 	call	0xe8	; 0xe8 <move_servo>
		

		//_delay_ms(1000);
		/*move_servo(0xff);*/
		//counterclockwiseB(0xff);
		cw = PINA0;
  d2:	10 92 01 01 	sts	0x0101, r1
  d6:	10 92 00 01 	sts	0x0100, r1
		ccw = PINA1;
  da:	d0 93 03 01 	sts	0x0103, r29
  de:	c0 93 02 01 	sts	0x0102, r28
		PINA |= PINA0;
  e2:	80 b1       	in	r24, 0x00	; 0
  e4:	80 b9       	out	0x00, r24	; 0
  e6:	f1 cf       	rjmp	.-30     	; 0xca <main+0x12>

000000e8 <move_servo>:
	OCR2B = pwm;
}*/

void move_servo(uint16_t angle)
{
	OCR1A = angle/5;
  e8:	9c 01       	movw	r18, r24
  ea:	ad ec       	ldi	r26, 0xCD	; 205
  ec:	bc ec       	ldi	r27, 0xCC	; 204
  ee:	0e 94 98 00 	call	0x130	; 0x130 <__umulhisi3>
  f2:	96 95       	lsr	r25
  f4:	87 95       	ror	r24
  f6:	96 95       	lsr	r25
  f8:	87 95       	ror	r24
  fa:	90 93 89 00 	sts	0x0089, r25
  fe:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;
 102:	10 92 8b 00 	sts	0x008B, r1
 106:	10 92 8a 00 	sts	0x008A, r1
 10a:	08 95       	ret

0000010c <servo_init>:
{
	// configure for inverted PWM output on motor control pins:
	//  set OCxx on compare match, clear on timer overflow
	//  Timer0 count up from 0 to 255
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 10c:	e0 e8       	ldi	r30, 0x80	; 128
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	82 6a       	ori	r24, 0xA2	; 162
 114:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 116:	e1 e8       	ldi	r30, 0x81	; 129
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8b 61       	ori	r24, 0x1B	; 27
 11e:	80 83       	st	Z, r24
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 120:	87 e8       	ldi	r24, 0x87	; 135
 122:	93 e1       	ldi	r25, 0x13	; 19
 124:	90 93 87 00 	sts	0x0087, r25
 128:	80 93 86 00 	sts	0x0086, r24

	// set PWM pins as digital outputs (the PWM signals will not
	// appear on the lines if they are digital inputs)
	DDRD |= (1 << PORTD5);
 12c:	55 9a       	sbi	0x0a, 5	; 10
 12e:	08 95       	ret

00000130 <__umulhisi3>:
 130:	a2 9f       	mul	r26, r18
 132:	b0 01       	movw	r22, r0
 134:	b3 9f       	mul	r27, r19
 136:	c0 01       	movw	r24, r0
 138:	a3 9f       	mul	r26, r19
 13a:	70 0d       	add	r23, r0
 13c:	81 1d       	adc	r24, r1
 13e:	11 24       	eor	r1, r1
 140:	91 1d       	adc	r25, r1
 142:	b2 9f       	mul	r27, r18
 144:	70 0d       	add	r23, r0
 146:	81 1d       	adc	r24, r1
 148:	11 24       	eor	r1, r1
 14a:	91 1d       	adc	r25, r1
 14c:	08 95       	ret

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
