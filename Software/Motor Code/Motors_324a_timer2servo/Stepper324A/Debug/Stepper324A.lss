
Stepper324A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000023d  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a5  00000000  00000000  00000441  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021a  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ab  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  00000a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000a37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:


	
int main() {
	 // set port D to output
	DDRC = 0xff;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	87 b9       	out	0x07, r24	; 7
	//DDRA = 0x00;
	//DDRD = 0b00000100;
	//motor_init();
	//ADCSRA |= _BV(ADEN);
	//init_timer2();
	servo_init();
  98:	0e 94 67 00 	call	0xce	; 0xce <servo_init>
		//PORTD = 0xff;
		
		//motorR(100,0);
		//PORTC = 0b00000000;
		//SERVO ANGLE POSITION//
		for (int i =0;i<256;i++)
  9c:	00 e0       	ldi	r16, 0x00	; 0
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c0 2f       	mov	r28, r16
  a2:	d1 2f       	mov	r29, r17
		{
			move_servo1(i);
  a4:	8c 2f       	mov	r24, r28
  a6:	0e 94 64 00 	call	0xc8	; 0xc8 <move_servo1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	9f e3       	ldi	r25, 0x3F	; 63
  ac:	2d e0       	ldi	r18, 0x0D	; 13
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	91 50       	subi	r25, 0x01	; 1
  b2:	20 40       	sbci	r18, 0x00	; 0
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x1c>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x26>
  ba:	00 00       	nop
		//PORTD = 0xff;
		
		//motorR(100,0);
		//PORTC = 0b00000000;
		//SERVO ANGLE POSITION//
		for (int i =0;i<256;i++)
  bc:	21 96       	adiw	r28, 0x01	; 1
  be:	c1 15       	cp	r28, r1
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	d9 07       	cpc	r29, r25
  c4:	79 f7       	brne	.-34     	; 0xa4 <main+0x10>
  c6:	ec cf       	rjmp	.-40     	; 0xa0 <main+0xc>

000000c8 <move_servo1>:
}

void move_servo2(uint8_t angle)
{
	
	OCR2B = angle;
  c8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  cc:	08 95       	ret

000000ce <servo_init>:
//  before you use any of the above functions
void servo_init()
{
	
	//Configure TIMER2
	TCCR2A|=(1<<COM2A1)|(1<<COM2B1)|(1<<WGM21)|(1<<WGM20); //NON Inverted PWM
  ce:	e0 eb       	ldi	r30, 0xB0	; 176
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	83 6a       	ori	r24, 0xA3	; 163
  d6:	80 83       	st	Z, r24
	TCCR2B|=(0<<WGM22)|(1<<CS22)|(0<<CS20); //PRESCALER=8 MODE 3(FAST PWM)
  d8:	e1 eb       	ldi	r30, 0xB1	; 177
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	80 83       	st	Z, r24
	

	// set PWM pins as digital outputs (the PWM signals will not
	// appear on the lines if they are digital inputs)
	DDRD |= (1 << DDD6)|(1<<DDD7);
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	80 6c       	ori	r24, 0xC0	; 192
  e6:	8a b9       	out	0x0a, r24	; 10
  e8:	08 95       	ret

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
