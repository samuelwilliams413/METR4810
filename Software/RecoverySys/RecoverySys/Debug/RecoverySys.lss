
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025c  00800100  00001250  000012e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  0080035c  0080035c  00001540  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000185c  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ea  00000000  00000000  00002ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001149  00000000  00000000  000032ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00004414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000fc35  00000000  00000000  0000463c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dbd  00000000  00000000  00014271  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0001502e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003914  00000000  00000000  000151ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c7 c0       	rjmp	.+398    	; 0x190 <__ctors_end>
       2:	00 00       	nop
       4:	e1 c0       	rjmp	.+450    	; 0x1c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	df c0       	rjmp	.+446    	; 0x1c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	dd c0       	rjmp	.+442    	; 0x1c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	db c0       	rjmp	.+438    	; 0x1c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	d9 c0       	rjmp	.+434    	; 0x1c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	d7 c0       	rjmp	.+430    	; 0x1c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d5 c0       	rjmp	.+426    	; 0x1c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d3 c0       	rjmp	.+422    	; 0x1c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d1 c0       	rjmp	.+418    	; 0x1c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	cf c0       	rjmp	.+414    	; 0x1c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cd c0       	rjmp	.+410    	; 0x1c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	cb c0       	rjmp	.+406    	; 0x1c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	c9 c0       	rjmp	.+402    	; 0x1c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	c7 c0       	rjmp	.+398    	; 0x1c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c5 c0       	rjmp	.+394    	; 0x1c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c3 c0       	rjmp	.+390    	; 0x1c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	c1 c0       	rjmp	.+386    	; 0x1c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	08 c1       	rjmp	.+528    	; 0x25a <__vector_18>
      4a:	00 00       	nop
      4c:	be c0       	rjmp	.+380    	; 0x1ca <__vector_19>
      4e:	00 00       	nop
      50:	bb c0       	rjmp	.+374    	; 0x1c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	b9 c0       	rjmp	.+370    	; 0x1c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	b7 c0       	rjmp	.+366    	; 0x1c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b5 c0       	rjmp	.+362    	; 0x1c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b3 c0       	rjmp	.+358    	; 0x1c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	b1 c0       	rjmp	.+354    	; 0x1c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	84 04       	cpc	r8, r4
      6a:	93 04       	cpc	r9, r3
      6c:	b3 05       	cpc	r27, r3
      6e:	b3 05       	cpc	r27, r3
      70:	b3 05       	cpc	r27, r3
      72:	b3 05       	cpc	r27, r3
      74:	b3 05       	cpc	r27, r3
      76:	b3 05       	cpc	r27, r3
      78:	b3 05       	cpc	r27, r3
      7a:	b3 05       	cpc	r27, r3
      7c:	b3 05       	cpc	r27, r3
      7e:	b3 05       	cpc	r27, r3
      80:	b3 05       	cpc	r27, r3
      82:	b3 05       	cpc	r27, r3
      84:	b3 05       	cpc	r27, r3
      86:	b3 05       	cpc	r27, r3
      88:	b3 05       	cpc	r27, r3
      8a:	b3 05       	cpc	r27, r3
      8c:	b3 05       	cpc	r27, r3
      8e:	b3 05       	cpc	r27, r3
      90:	b3 05       	cpc	r27, r3
      92:	b3 05       	cpc	r27, r3
      94:	b3 05       	cpc	r27, r3
      96:	b3 05       	cpc	r27, r3
      98:	b3 05       	cpc	r27, r3
      9a:	ca 04       	cpc	r12, r10
      9c:	b3 05       	cpc	r27, r3
      9e:	e8 04       	cpc	r14, r8
      a0:	b3 05       	cpc	r27, r3
      a2:	b3 05       	cpc	r27, r3
      a4:	b3 05       	cpc	r27, r3
      a6:	b3 05       	cpc	r27, r3
      a8:	b3 05       	cpc	r27, r3
      aa:	b3 05       	cpc	r27, r3
      ac:	b3 05       	cpc	r27, r3
      ae:	b3 05       	cpc	r27, r3
      b0:	b3 05       	cpc	r27, r3
      b2:	b3 05       	cpc	r27, r3
      b4:	b3 05       	cpc	r27, r3
      b6:	b3 05       	cpc	r27, r3
      b8:	b3 05       	cpc	r27, r3
      ba:	b3 05       	cpc	r27, r3
      bc:	b3 05       	cpc	r27, r3
      be:	b3 05       	cpc	r27, r3
      c0:	b3 05       	cpc	r27, r3
      c2:	b3 05       	cpc	r27, r3
      c4:	b3 05       	cpc	r27, r3
      c6:	b3 05       	cpc	r27, r3
      c8:	f0 03       	fmuls	r23, r16
      ca:	b3 05       	cpc	r27, r3
      cc:	b3 05       	cpc	r27, r3
      ce:	b3 05       	cpc	r27, r3
      d0:	b3 05       	cpc	r27, r3
      d2:	20 04       	cpc	r2, r0
      d4:	63 04       	cpc	r6, r3
      d6:	b0 04       	cpc	r11, r0
      d8:	06 05       	cpc	r16, r6
      da:	78 05       	cpc	r23, r8
      dc:	5b 05       	cpc	r21, r11
      de:	96 05       	cpc	r25, r6
      e0:	30 05       	cpc	r19, r0
      e2:	bd 04       	cpc	r11, r13
      e4:	b3 05       	cpc	r27, r3
      e6:	b3 05       	cpc	r27, r3
      e8:	e2 03       	fmuls	r22, r18
      ea:	fe 03       	fmulsu	r23, r22
      ec:	b3 05       	cpc	r27, r3
      ee:	41 04       	cpc	r4, r1
      f0:	b3 05       	cpc	r27, r3
      f2:	b3 05       	cpc	r27, r3
      f4:	b3 05       	cpc	r27, r3
      f6:	c4 03       	fmuls	r20, r20
      f8:	a3 04       	cpc	r10, r3
      fa:	a3 03       	fmuls	r18, r19
      fc:	84 04       	cpc	r8, r4
      fe:	93 04       	cpc	r9, r3
     100:	b3 05       	cpc	r27, r3
     102:	b3 05       	cpc	r27, r3
     104:	b3 05       	cpc	r27, r3
     106:	b3 05       	cpc	r27, r3
     108:	b3 05       	cpc	r27, r3
     10a:	b3 05       	cpc	r27, r3
     10c:	b3 05       	cpc	r27, r3
     10e:	b3 05       	cpc	r27, r3
     110:	b3 05       	cpc	r27, r3
     112:	b3 05       	cpc	r27, r3
     114:	b3 05       	cpc	r27, r3
     116:	b3 05       	cpc	r27, r3
     118:	b3 05       	cpc	r27, r3
     11a:	b3 05       	cpc	r27, r3
     11c:	b3 05       	cpc	r27, r3
     11e:	b3 05       	cpc	r27, r3
     120:	b3 05       	cpc	r27, r3
     122:	b3 05       	cpc	r27, r3
     124:	b3 05       	cpc	r27, r3
     126:	b3 05       	cpc	r27, r3
     128:	b3 05       	cpc	r27, r3
     12a:	b3 05       	cpc	r27, r3
     12c:	b3 05       	cpc	r27, r3
     12e:	2e 06       	cpc	r2, r30
     130:	b3 05       	cpc	r27, r3
     132:	e8 04       	cpc	r14, r8
     134:	b3 05       	cpc	r27, r3
     136:	b3 05       	cpc	r27, r3
     138:	b3 05       	cpc	r27, r3
     13a:	b3 05       	cpc	r27, r3
     13c:	b3 05       	cpc	r27, r3
     13e:	b3 05       	cpc	r27, r3
     140:	b3 05       	cpc	r27, r3
     142:	b3 05       	cpc	r27, r3
     144:	b3 05       	cpc	r27, r3
     146:	b3 05       	cpc	r27, r3
     148:	b3 05       	cpc	r27, r3
     14a:	b3 05       	cpc	r27, r3
     14c:	b3 05       	cpc	r27, r3
     14e:	b3 05       	cpc	r27, r3
     150:	b3 05       	cpc	r27, r3
     152:	b3 05       	cpc	r27, r3
     154:	b3 05       	cpc	r27, r3
     156:	b3 05       	cpc	r27, r3
     158:	b3 05       	cpc	r27, r3
     15a:	b3 05       	cpc	r27, r3
     15c:	f0 03       	fmuls	r23, r16
     15e:	b3 05       	cpc	r27, r3
     160:	b3 05       	cpc	r27, r3
     162:	b3 05       	cpc	r27, r3
     164:	b3 05       	cpc	r27, r3
     166:	20 04       	cpc	r2, r0
     168:	63 04       	cpc	r6, r3
     16a:	b0 04       	cpc	r11, r0
     16c:	06 05       	cpc	r16, r6
     16e:	78 05       	cpc	r23, r8
     170:	5b 05       	cpc	r21, r11
     172:	96 05       	cpc	r25, r6
     174:	30 05       	cpc	r19, r0
     176:	bd 04       	cpc	r11, r13
     178:	b3 05       	cpc	r27, r3
     17a:	b3 05       	cpc	r27, r3
     17c:	e2 03       	fmuls	r22, r18
     17e:	fe 03       	fmulsu	r23, r22
     180:	b3 05       	cpc	r27, r3
     182:	41 04       	cpc	r4, r1
     184:	b3 05       	cpc	r27, r3
     186:	b3 05       	cpc	r27, r3
     188:	b3 05       	cpc	r27, r3
     18a:	c4 03       	fmuls	r20, r20
     18c:	a3 04       	cpc	r10, r3
     18e:	a3 03       	fmuls	r18, r19

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	d8 e0       	ldi	r29, 0x08	; 8
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	13 e0       	ldi	r17, 0x03	; 3
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	e0 e5       	ldi	r30, 0x50	; 80
     1a4:	f2 e1       	ldi	r31, 0x12	; 18
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x10>
     1a8:	05 90       	lpm	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	ac 35       	cpi	r26, 0x5C	; 92
     1ae:	b1 07       	cpc	r27, r17
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0xc>

000001b2 <__do_clear_bss>:
     1b2:	24 e0       	ldi	r18, 0x04	; 4
     1b4:	ac e5       	ldi	r26, 0x5C	; 92
     1b6:	b3 e0       	ldi	r27, 0x03	; 3
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	ae 32       	cpi	r26, 0x2E	; 46
     1be:	b2 07       	cpc	r27, r18
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>
     1c2:	40 d2       	rcall	.+1152   	; 0x644 <main>
     1c4:	0c 94 26 09 	jmp	0x124c	; 0x124c <_exit>

000001c8 <__bad_interrupt>:
     1c8:	1b cf       	rjmp	.-458    	; 0x0 <__vectors>

000001ca <__vector_19>:
		while(!ring_buffer_is_empty(&ring_buffer_out)) {
			;
		}
		uart_putchar(test_string2[cnt]);
	}
}
     1ca:	1f 92       	push	r1
     1cc:	0f 92       	push	r0
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	0f 92       	push	r0
     1d2:	11 24       	eor	r1, r1
     1d4:	2f 93       	push	r18
     1d6:	3f 93       	push	r19
     1d8:	4f 93       	push	r20
     1da:	5f 93       	push	r21
     1dc:	8f 93       	push	r24
     1de:	9f 93       	push	r25
     1e0:	af 93       	push	r26
     1e2:	bf 93       	push	r27
     1e4:	ef 93       	push	r30
     1e6:	ff 93       	push	r31
     1e8:	e9 e2       	ldi	r30, 0x29	; 41
     1ea:	f4 e0       	ldi	r31, 0x04	; 4
     1ec:	91 81       	ldd	r25, Z+1	; 0x01
     1ee:	80 81       	ld	r24, Z
     1f0:	98 17       	cp	r25, r24
     1f2:	f9 f0       	breq	.+62     	; 0x232 <__vector_19+0x68>
     1f4:	91 81       	ldd	r25, Z+1	; 0x01
     1f6:	80 81       	ld	r24, Z
     1f8:	98 13       	cpse	r25, r24
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <__vector_19+0x34>
     1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__vector_19+0x32>
     1fe:	e9 e2       	ldi	r30, 0x29	; 41
     200:	f4 e0       	ldi	r31, 0x04	; 4
     202:	81 81       	ldd	r24, Z+1	; 0x01
     204:	a3 81       	ldd	r26, Z+3	; 0x03
     206:	b4 81       	ldd	r27, Z+4	; 0x04
     208:	a8 0f       	add	r26, r24
     20a:	b1 1d       	adc	r27, r1
     20c:	9c 91       	ld	r25, X
     20e:	81 81       	ldd	r24, Z+1	; 0x01
     210:	48 2f       	mov	r20, r24
     212:	50 e0       	ldi	r21, 0x00	; 0
     214:	22 81       	ldd	r18, Z+2	; 0x02
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	21 50       	subi	r18, 0x01	; 1
     21a:	31 09       	sbc	r19, r1
     21c:	42 17       	cp	r20, r18
     21e:	53 07       	cpc	r21, r19
     220:	11 f0       	breq	.+4      	; 0x226 <__vector_19+0x5c>
     222:	8f 5f       	subi	r24, 0xFF	; 255
     224:	01 c0       	rjmp	.+2      	; 0x228 <__vector_19+0x5e>
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <ring_buffer_out+0x1>
     22c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     230:	05 c0       	rjmp	.+10     	; 0x23c <__vector_19+0x72>
     232:	e1 ec       	ldi	r30, 0xC1	; 193
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	8f 7d       	andi	r24, 0xDF	; 223
     23a:	80 83       	st	Z, r24
     23c:	ff 91       	pop	r31
     23e:	ef 91       	pop	r30
     240:	bf 91       	pop	r27
     242:	af 91       	pop	r26
     244:	9f 91       	pop	r25
     246:	8f 91       	pop	r24
     248:	5f 91       	pop	r21
     24a:	4f 91       	pop	r20
     24c:	3f 91       	pop	r19
     24e:	2f 91       	pop	r18
     250:	0f 90       	pop	r0
     252:	0f be       	out	0x3f, r0	; 63
     254:	0f 90       	pop	r0
     256:	1f 90       	pop	r1
     258:	18 95       	reti

0000025a <__vector_18>:
     25a:	1f 92       	push	r1
     25c:	0f 92       	push	r0
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	0f 92       	push	r0
     262:	11 24       	eor	r1, r1
     264:	2f 93       	push	r18
     266:	3f 93       	push	r19
     268:	4f 93       	push	r20
     26a:	5f 93       	push	r21
     26c:	6f 93       	push	r22
     26e:	7f 93       	push	r23
     270:	8f 93       	push	r24
     272:	9f 93       	push	r25
     274:	af 93       	push	r26
     276:	bf 93       	push	r27
     278:	ef 93       	push	r30
     27a:	ff 93       	push	r31
     27c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     280:	e4 e2       	ldi	r30, 0x24	; 36
     282:	f4 e0       	ldi	r31, 0x04	; 4
     284:	41 81       	ldd	r20, Z+1	; 0x01
     286:	80 81       	ld	r24, Z
     288:	68 2f       	mov	r22, r24
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	22 81       	ldd	r18, Z+2	; 0x02
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	21 50       	subi	r18, 0x01	; 1
     292:	31 09       	sbc	r19, r1
     294:	62 17       	cp	r22, r18
     296:	73 07       	cpc	r23, r19
     298:	11 f0       	breq	.+4      	; 0x29e <__vector_18+0x44>
     29a:	8f 5f       	subi	r24, 0xFF	; 255
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <__vector_18+0x46>
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	48 13       	cpse	r20, r24
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <__vector_18+0x4c>
     2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__vector_18+0x4a>
     2a6:	e4 e2       	ldi	r30, 0x24	; 36
     2a8:	f4 e0       	ldi	r31, 0x04	; 4
     2aa:	80 81       	ld	r24, Z
     2ac:	a3 81       	ldd	r26, Z+3	; 0x03
     2ae:	b4 81       	ldd	r27, Z+4	; 0x04
     2b0:	a8 0f       	add	r26, r24
     2b2:	b1 1d       	adc	r27, r1
     2b4:	9c 93       	st	X, r25
     2b6:	80 81       	ld	r24, Z
     2b8:	48 2f       	mov	r20, r24
     2ba:	50 e0       	ldi	r21, 0x00	; 0
     2bc:	22 81       	ldd	r18, Z+2	; 0x02
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	21 50       	subi	r18, 0x01	; 1
     2c2:	31 09       	sbc	r19, r1
     2c4:	42 17       	cp	r20, r18
     2c6:	53 07       	cpc	r21, r19
     2c8:	11 f0       	breq	.+4      	; 0x2ce <__vector_18+0x74>
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <__vector_18+0x76>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <ring_buffer_in>
     2d4:	ff 91       	pop	r31
     2d6:	ef 91       	pop	r30
     2d8:	bf 91       	pop	r27
     2da:	af 91       	pop	r26
     2dc:	9f 91       	pop	r25
     2de:	8f 91       	pop	r24
     2e0:	7f 91       	pop	r23
     2e2:	6f 91       	pop	r22
     2e4:	5f 91       	pop	r21
     2e6:	4f 91       	pop	r20
     2e8:	3f 91       	pop	r19
     2ea:	2f 91       	pop	r18
     2ec:	0f 90       	pop	r0
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	0f 90       	pop	r0
     2f2:	1f 90       	pop	r1
     2f4:	18 95       	reti

000002f6 <uart_init>:
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	69 97       	sbiw	r28, 0x19	; 25
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     30e:	8c e0       	ldi	r24, 0x0C	; 12
     310:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     314:	e0 ec       	ldi	r30, 0xC0	; 192
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	82 60       	ori	r24, 0x02	; 2
     31c:	80 83       	st	Z, r24
     31e:	88 e9       	ldi	r24, 0x98	; 152
     320:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     324:	86 e0       	ldi	r24, 0x06	; 6
     326:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     32a:	1d 8a       	std	Y+21, r1	; 0x15
     32c:	1e 8a       	std	Y+22, r1	; 0x16
     32e:	84 e6       	ldi	r24, 0x64	; 100
     330:	8f 8b       	std	Y+23, r24	; 0x17
     332:	2c e5       	ldi	r18, 0x5C	; 92
     334:	33 e0       	ldi	r19, 0x03	; 3
     336:	39 8f       	std	Y+25, r19	; 0x19
     338:	28 8f       	std	Y+24, r18	; 0x18
     33a:	95 e0       	ldi	r25, 0x05	; 5
     33c:	fe 01       	movw	r30, r28
     33e:	75 96       	adiw	r30, 0x15	; 21
     340:	de 01       	movw	r26, r28
     342:	1b 96       	adiw	r26, 0x0b	; 11
     344:	01 90       	ld	r0, Z+
     346:	0d 92       	st	X+, r0
     348:	9a 95       	dec	r25
     34a:	e1 f7       	brne	.-8      	; 0x344 <uart_init+0x4e>
     34c:	95 e0       	ldi	r25, 0x05	; 5
     34e:	fe 01       	movw	r30, r28
     350:	3b 96       	adiw	r30, 0x0b	; 11
     352:	de 01       	movw	r26, r28
     354:	50 96       	adiw	r26, 0x10	; 16
     356:	01 90       	ld	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	9a 95       	dec	r25
     35c:	e1 f7       	brne	.-8      	; 0x356 <uart_init+0x60>
     35e:	95 e0       	ldi	r25, 0x05	; 5
     360:	fe 01       	movw	r30, r28
     362:	70 96       	adiw	r30, 0x10	; 16
     364:	a9 e2       	ldi	r26, 0x29	; 41
     366:	b4 e0       	ldi	r27, 0x04	; 4
     368:	01 90       	ld	r0, Z+
     36a:	0d 92       	st	X+, r0
     36c:	9a 95       	dec	r25
     36e:	e1 f7       	brne	.-8      	; 0x368 <uart_init+0x72>
     370:	1d 8a       	std	Y+21, r1	; 0x15
     372:	1e 8a       	std	Y+22, r1	; 0x16
     374:	8f 8b       	std	Y+23, r24	; 0x17
     376:	80 ec       	ldi	r24, 0xC0	; 192
     378:	93 e0       	ldi	r25, 0x03	; 3
     37a:	99 8f       	std	Y+25, r25	; 0x19
     37c:	88 8f       	std	Y+24, r24	; 0x18
     37e:	85 e0       	ldi	r24, 0x05	; 5
     380:	fe 01       	movw	r30, r28
     382:	75 96       	adiw	r30, 0x15	; 21
     384:	de 01       	movw	r26, r28
     386:	11 96       	adiw	r26, 0x01	; 1
     388:	01 90       	ld	r0, Z+
     38a:	0d 92       	st	X+, r0
     38c:	8a 95       	dec	r24
     38e:	e1 f7       	brne	.-8      	; 0x388 <uart_init+0x92>
     390:	85 e0       	ldi	r24, 0x05	; 5
     392:	fe 01       	movw	r30, r28
     394:	31 96       	adiw	r30, 0x01	; 1
     396:	de 01       	movw	r26, r28
     398:	16 96       	adiw	r26, 0x06	; 6
     39a:	01 90       	ld	r0, Z+
     39c:	0d 92       	st	X+, r0
     39e:	8a 95       	dec	r24
     3a0:	e1 f7       	brne	.-8      	; 0x39a <uart_init+0xa4>
     3a2:	85 e0       	ldi	r24, 0x05	; 5
     3a4:	fe 01       	movw	r30, r28
     3a6:	36 96       	adiw	r30, 0x06	; 6
     3a8:	a4 e2       	ldi	r26, 0x24	; 36
     3aa:	b4 e0       	ldi	r27, 0x04	; 4
     3ac:	01 90       	ld	r0, Z+
     3ae:	0d 92       	st	X+, r0
     3b0:	8a 95       	dec	r24
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <uart_init+0xb6>
     3b4:	69 96       	adiw	r28, 0x19	; 25
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <send_str>:

extern void send_str(char msg[])
{
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	ac 01       	movw	r20, r24
	uint8_t cnt = 0;
	for (cnt = 0; cnt < strlen(msg); cnt++) {
     3d0:	10 e0       	ldi	r17, 0x00	; 0
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     3d2:	e9 e2       	ldi	r30, 0x29	; 41
     3d4:	f4 e0       	ldi	r31, 0x04	; 4
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
	if (ring_buffer_is_empty(&ring_buffer_out)) {
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     3d6:	61 ec       	ldi	r22, 0xC1	; 193
     3d8:	70 e0       	ldi	r23, 0x00	; 0
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     3da:	00 e0       	ldi	r16, 0x00	; 0
}

extern void send_str(char msg[])
{
	uint8_t cnt = 0;
	for (cnt = 0; cnt < strlen(msg); cnt++) {
     3dc:	37 c0       	rjmp	.+110    	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     3de:	21 81       	ldd	r18, Z+1	; 0x01
     3e0:	90 81       	ld	r25, Z
		while(!ring_buffer_is_empty(&ring_buffer_out)) {
     3e2:	29 13       	cpse	r18, r25
     3e4:	fc cf       	rjmp	.-8      	; 0x3de <send_str+0x18>
			;
		}
		uart_putchar(msg[cnt]);
     3e6:	c4 0f       	add	r28, r20
     3e8:	d5 1f       	adc	r29, r21
     3ea:	98 81       	ld	r25, Y
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     3ec:	f8 94       	cli
     3ee:	21 81       	ldd	r18, Z+1	; 0x01
     3f0:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) {
     3f2:	28 13       	cpse	r18, r24
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <send_str+0x38>
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     3f6:	db 01       	movw	r26, r22
     3f8:	8c 91       	ld	r24, X
     3fa:	80 62       	ori	r24, 0x20	; 32
     3fc:	8c 93       	st	X, r24
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
     3fe:	a1 81       	ldd	r26, Z+1	; 0x01
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     400:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     402:	c8 2f       	mov	r28, r24
     404:	d0 e0       	ldi	r29, 0x00	; 0
     406:	22 81       	ldd	r18, Z+2	; 0x02
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	21 50       	subi	r18, 0x01	; 1
     40c:	31 09       	sbc	r19, r1
     40e:	c2 17       	cp	r28, r18
     410:	d3 07       	cpc	r29, r19
     412:	11 f0       	breq	.+4      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	01 c0       	rjmp	.+2      	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
     418:	80 2f       	mov	r24, r16
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
     41a:	a8 13       	cpse	r26, r24
     41c:	01 c0       	rjmp	.+2      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
     41e:	ff cf       	rjmp	.-2      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
	ring->buffer[ring->write_offset] = data;
     420:	80 81       	ld	r24, Z
     422:	a3 81       	ldd	r26, Z+3	; 0x03
     424:	b4 81       	ldd	r27, Z+4	; 0x04
     426:	a8 0f       	add	r26, r24
     428:	b1 1d       	adc	r27, r1
     42a:	9c 93       	st	X, r25
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     42c:	90 81       	ld	r25, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     42e:	a9 2f       	mov	r26, r25
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	22 81       	ldd	r18, Z+2	; 0x02
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	21 50       	subi	r18, 0x01	; 1
     438:	31 09       	sbc	r19, r1
     43a:	a2 17       	cp	r26, r18
     43c:	b3 07       	cpc	r27, r19
     43e:	11 f0       	breq	.+4      	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
     440:	9f 5f       	subi	r25, 0xFF	; 255
     442:	01 c0       	rjmp	.+2      	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
     444:	90 2f       	mov	r25, r16
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     446:	90 83       	st	Z, r25
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     448:	78 94       	sei
}

extern void send_str(char msg[])
{
	uint8_t cnt = 0;
	for (cnt = 0; cnt < strlen(msg); cnt++) {
     44a:	1f 5f       	subi	r17, 0xFF	; 255
     44c:	c1 2f       	mov	r28, r17
     44e:	d0 e0       	ldi	r29, 0x00	; 0
     450:	da 01       	movw	r26, r20
     452:	0d 90       	ld	r0, X+
     454:	00 20       	and	r0, r0
     456:	e9 f7       	brne	.-6      	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
     458:	11 97       	sbiw	r26, 0x01	; 1
     45a:	a4 1b       	sub	r26, r20
     45c:	b5 0b       	sbc	r27, r21
     45e:	ca 17       	cp	r28, r26
     460:	db 07       	cpc	r29, r27
     462:	08 f4       	brcc	.+2      	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
     464:	bc cf       	rjmp	.-136    	; 0x3de <send_str+0x18>
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     466:	e9 e2       	ldi	r30, 0x29	; 41
     468:	f4 e0       	ldi	r31, 0x04	; 4
     46a:	91 81       	ldd	r25, Z+1	; 0x01
     46c:	80 81       	ld	r24, Z
		while(!ring_buffer_is_empty(&ring_buffer_out)) {
			;
		}
		uart_putchar(msg[cnt]);
	}
	while(!ring_buffer_is_empty(&ring_buffer_out)) {
     46e:	98 13       	cpse	r25, r24
     470:	fc cf       	rjmp	.-8      	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
 *
 */
static inline void uart_putchar(uint8_t data)
{
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
     472:	f8 94       	cli
     474:	e9 e2       	ldi	r30, 0x29	; 41
     476:	f4 e0       	ldi	r31, 0x04	; 4
     478:	91 81       	ldd	r25, Z+1	; 0x01
     47a:	80 81       	ld	r24, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) {
     47c:	98 13       	cpse	r25, r24
     47e:	05 c0       	rjmp	.+10     	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
     480:	e1 ec       	ldi	r30, 0xC1	; 193
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	80 62       	ori	r24, 0x20	; 32
     488:	80 83       	st	Z, r24
 * \retval true  if the buffer is full
 * \retval false if there is space available in the ring buffer
 */
static inline bool ring_buffer_is_full(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring_buffer_get_next_write(ring));
     48a:	e9 e2       	ldi	r30, 0x29	; 41
     48c:	f4 e0       	ldi	r31, 0x04	; 4
     48e:	91 81       	ldd	r25, Z+1	; 0x01
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     490:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     492:	48 2f       	mov	r20, r24
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	22 81       	ldd	r18, Z+2	; 0x02
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	21 50       	subi	r18, 0x01	; 1
     49c:	31 09       	sbc	r19, r1
     49e:	42 17       	cp	r20, r18
     4a0:	53 07       	cpc	r21, r19
     4a2:	11 f0       	breq	.+4      	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	01 c0       	rjmp	.+2      	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     4a8:	80 e0       	ldi	r24, 0x00	; 0
 * \param data the byte to put to the buffer
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
     4aa:	98 13       	cpse	r25, r24
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
     4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
	ring->buffer[ring->write_offset] = data;
     4b0:	e9 e2       	ldi	r30, 0x29	; 41
     4b2:	f4 e0       	ldi	r31, 0x04	; 4
     4b4:	80 81       	ld	r24, Z
     4b6:	a3 81       	ldd	r26, Z+3	; 0x03
     4b8:	b4 81       	ldd	r27, Z+4	; 0x04
     4ba:	a8 0f       	add	r26, r24
     4bc:	b1 1d       	adc	r27, r1
     4be:	8d e0       	ldi	r24, 0x0D	; 13
     4c0:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
     4c2:	80 81       	ld	r24, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     4c4:	48 2f       	mov	r20, r24
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	22 81       	ldd	r18, Z+2	; 0x02
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	31 09       	sbc	r19, r1
     4d0:	42 17       	cp	r20, r18
     4d2:	53 07       	cpc	r21, r19
     4d4:	11 f0       	breq	.+4      	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
     4d6:	8f 5f       	subi	r24, 0xFF	; 255
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
     4da:	80 e0       	ldi	r24, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
     4dc:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <ring_buffer_out>
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
     4e0:	78 94       	sei
	}
	while(!ring_buffer_is_empty(&ring_buffer_out)) {
		;
	}
	uart_putchar('\r');
}
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	08 95       	ret

000004ec <get_char>:
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
     4ec:	e4 e2       	ldi	r30, 0x24	; 36
     4ee:	f4 e0       	ldi	r31, 0x04	; 4
     4f0:	91 81       	ldd	r25, Z+1	; 0x01
     4f2:	80 81       	ld	r24, Z

extern uint8_t get_char(void)
{	
	uint8_t data = '\0';
	if (uart_char_waiting()) {
     4f4:	98 17       	cp	r25, r24
     4f6:	e9 f0       	breq	.+58     	; 0x532 <get_char+0x46>
     4f8:	91 81       	ldd	r25, Z+1	; 0x01
     4fa:	80 81       	ld	r24, Z
 *
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
     4fc:	98 13       	cpse	r25, r24
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <get_char+0x16>
     500:	ff cf       	rjmp	.-2      	; 0x500 <get_char+0x14>
	uint8_t data = ring->buffer[ring->read_offset];
     502:	e4 e2       	ldi	r30, 0x24	; 36
     504:	f4 e0       	ldi	r31, 0x04	; 4
     506:	81 81       	ldd	r24, Z+1	; 0x01
     508:	a3 81       	ldd	r26, Z+3	; 0x03
     50a:	b4 81       	ldd	r27, Z+4	; 0x04
     50c:	a8 0f       	add	r26, r24
     50e:	b1 1d       	adc	r27, r1
     510:	8c 91       	ld	r24, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
     512:	91 81       	ldd	r25, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
     514:	49 2f       	mov	r20, r25
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	22 81       	ldd	r18, Z+2	; 0x02
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	21 50       	subi	r18, 0x01	; 1
     51e:	31 09       	sbc	r19, r1
     520:	42 17       	cp	r20, r18
     522:	53 07       	cpc	r21, r19
     524:	11 f0       	breq	.+4      	; 0x52a <get_char+0x3e>
     526:	9f 5f       	subi	r25, 0xFF	; 255
     528:	01 c0       	rjmp	.+2      	; 0x52c <get_char+0x40>
     52a:	90 e0       	ldi	r25, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
     52c:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <ring_buffer_in+0x1>
     530:	08 95       	ret
	uart_putchar('\r');
}

extern uint8_t get_char(void)
{	
	uint8_t data = '\0';
     532:	80 e0       	ldi	r24, 0x00	; 0
	if (uart_char_waiting()) {
		data = uart_getchar(); // THIS IS THE RECEIVED CHARACTER
	}
	return data;
     534:	08 95       	ret

00000536 <stepUp>:
	switch (mode) {
		case 0: return 255;
		case 1: return 130;
		case 2: return 190;
	}
}
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	45 cf       	rjmp	.-374    	; 0x3c6 <send_str>
     53c:	08 95       	ret

0000053e <stepDown>:
     53e:	89 e0       	ldi	r24, 0x09	; 9
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	41 cf       	rjmp	.-382    	; 0x3c6 <send_str>
     544:	08 95       	ret

00000546 <setServo>:
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	e2 97       	sbiw	r28, 0x32	; 50
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	7f 93       	push	r23
     560:	6f 93       	push	r22
     562:	84 e1       	ldi	r24, 0x14	; 20
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	8e 01       	movw	r16, r28
     56c:	0f 5f       	subi	r16, 0xFF	; 255
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
     570:	1f 93       	push	r17
     572:	0f 93       	push	r16
     574:	a5 d3       	rcall	.+1866   	; 0xcc0 <sprintf>
     576:	c8 01       	movw	r24, r16
     578:	26 df       	rcall	.-436    	; 0x3c6 <send_str>
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	e2 96       	adiw	r28, 0x32	; 50
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	f8 94       	cli
     58c:	de bf       	out	0x3e, r29	; 62
     58e:	0f be       	out	0x3f, r0	; 63
     590:	cd bf       	out	0x3d, r28	; 61
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	08 95       	ret

0000059c <setSpeedDC>:
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	e2 97       	sbiw	r28, 0x32	; 50
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	4f 3f       	cpi	r20, 0xFF	; 255
     5b6:	51 05       	cpc	r21, r1
     5b8:	09 f0       	breq	.+2      	; 0x5bc <setSpeedDC+0x20>
     5ba:	5c f4       	brge	.+22     	; 0x5d2 <setSpeedDC+0x36>
     5bc:	41 30       	cpi	r20, 0x01	; 1
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	58 07       	cpc	r21, r24
     5c2:	54 f0       	brlt	.+20     	; 0x5d8 <setSpeedDC+0x3c>
     5c4:	ca 01       	movw	r24, r20
     5c6:	09 96       	adiw	r24, 0x09	; 9
     5c8:	43 97       	sbiw	r24, 0x13	; 19
     5ca:	40 f4       	brcc	.+16     	; 0x5dc <setSpeedDC+0x40>
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	05 c0       	rjmp	.+10     	; 0x5dc <setSpeedDC+0x40>
     5d2:	4f ef       	ldi	r20, 0xFF	; 255
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <setSpeedDC+0x40>
     5d8:	41 e0       	ldi	r20, 0x01	; 1
     5da:	5f ef       	ldi	r21, 0xFF	; 255
     5dc:	5f 93       	push	r21
     5de:	4f 93       	push	r20
     5e0:	85 e3       	ldi	r24, 0x35	; 53
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	9f 93       	push	r25
     5e6:	8f 93       	push	r24
     5e8:	8e 01       	movw	r16, r28
     5ea:	0f 5f       	subi	r16, 0xFF	; 255
     5ec:	1f 4f       	sbci	r17, 0xFF	; 255
     5ee:	1f 93       	push	r17
     5f0:	0f 93       	push	r16
     5f2:	66 d3       	rcall	.+1740   	; 0xcc0 <sprintf>
     5f4:	c8 01       	movw	r24, r16
     5f6:	e7 de       	rcall	.-562    	; 0x3c6 <send_str>
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	e2 96       	adiw	r28, 0x32	; 50
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	08 95       	ret

0000061a <INITMOTOR>:
     61a:	4a b1       	in	r20, 0x0a	; 10
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	f9 01       	movw	r30, r18
     622:	02 c0       	rjmp	.+4      	; 0x628 <INITMOTOR+0xe>
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	8a 95       	dec	r24
     62a:	e2 f7       	brpl	.-8      	; 0x624 <INITMOTOR+0xa>
     62c:	cf 01       	movw	r24, r30
     62e:	84 2b       	or	r24, r20
     630:	8a b9       	out	0x0a, r24	; 10
     632:	8a b1       	in	r24, 0x0a	; 10
     634:	02 c0       	rjmp	.+4      	; 0x63a <INITMOTOR+0x20>
     636:	22 0f       	add	r18, r18
     638:	33 1f       	adc	r19, r19
     63a:	6a 95       	dec	r22
     63c:	e2 f7       	brpl	.-8      	; 0x636 <INITMOTOR+0x1c>
     63e:	28 2b       	or	r18, r24
     640:	2a b9       	out	0x0a, r18	; 10
     642:	08 95       	ret

00000644 <main>:


int main(void) {
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	e6 97       	sbiw	r28, 0x36	; 54
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
	int staticPinL = 7;
	int pwmPinL = 8;
	
	//Initialisations

	INITMOTOR(DDD3, DDD6); //Initialise DCmotor1
     658:	66 e0       	ldi	r22, 0x06	; 6
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	dc df       	rcall	.-72     	; 0x61a <INITMOTOR>
	INITMOTOR(DDD4, DDD5); //Initialise DCmotor2
     662:	65 e0       	ldi	r22, 0x05	; 5
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	d7 df       	rcall	.-82     	; 0x61a <INITMOTOR>

	TCCR0A |= (1 << COM0A1); //compare output mode bit for non-inverting mode of OC0A
     66c:	84 b5       	in	r24, 0x24	; 36
     66e:	80 68       	ori	r24, 0x80	; 128
     670:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B1); //compare output mode bit for non-inverting mode of OC0B
     672:	84 b5       	in	r24, 0x24	; 36
     674:	80 62       	ori	r24, 0x20	; 32
     676:	84 bd       	out	0x24, r24	; 36
	// set none-inverting mode
	TCCR0A |= (1 << WGM01) | (1 << WGM00); //wave generator bits
     678:	84 b5       	in	r24, 0x24	; 36
     67a:	83 60       	ori	r24, 0x03	; 3
     67c:	84 bd       	out	0x24, r24	; 36
	// set fast PWM Mode
	TCCR0B |= (1 << CS01);
     67e:	85 b5       	in	r24, 0x25	; 37
     680:	82 60       	ori	r24, 0x02	; 2
     682:	85 bd       	out	0x25, r24	; 37
	// set prescaler to 8 and starts PWM

	cli();
     684:	f8 94       	cli
	uart_init();
     686:	37 de       	rcall	.-914    	; 0x2f6 <uart_init>
	sei();
     688:	78 94       	sei

	setServo(pinCameraServo, cameraPosition);
     68a:	6a e5       	ldi	r22, 0x5A	; 90
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	59 df       	rcall	.-334    	; 0x546 <setServo>
	setServo(pinUpperClaw, upperClawPosition);
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	54 df       	rcall	.-344    	; 0x546 <setServo>
	setServo(pinLowerClaw, lowerClawPosition);
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	4f df       	rcall	.-354    	; 0x546 <setServo>
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
			carStatus = 2;
			n = sprintf(buffer,"Car moves backwards with the duty cycle %d\n",
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	8d ab       	std	Y+53, r24	; 0x35
     6ae:	9e ab       	std	Y+54, r25	; 0x36
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
			carStatus = 1;
			n = sprintf(buffer,"Car moves forwards with the duty cycle %d\n",
     6b0:	8b ab       	std	Y+51, r24	; 0x33
     6b2:	9c ab       	std	Y+52, r25	; 0x34

	int cameraPosition = 90; // camera servo motor position in degree

	char previousChar = '\0'; // remember the previous character

	int carStatus = 0; // 0 break, 1 forward, 2 reverse
     6b4:	a1 2c       	mov	r10, r1
     6b6:	b1 2c       	mov	r11, r1
	int upperClawPosition = 0; //position of the upper 3 quarters of the claw in degree
	int lowerClawPosition = 0; //position of the lower quarter of the claw in degree

	int cameraPosition = 90; // camera servo motor position in degree

	char previousChar = '\0'; // remember the previous character
     6b8:	10 e0       	ldi	r17, 0x00	; 0
	int lightState = 0; //State of the light

	int upperClawPosition = 0; //position of the upper 3 quarters of the claw in degree
	int lowerClawPosition = 0; //position of the lower quarter of the claw in degree

	int cameraPosition = 90; // camera servo motor position in degree
     6ba:	0f 2e       	mov	r0, r31
     6bc:	fa e5       	ldi	r31, 0x5A	; 90
     6be:	4f 2e       	mov	r4, r31
     6c0:	51 2c       	mov	r5, r1
     6c2:	f0 2d       	mov	r31, r0
	float turnFactor = 0; // range -1..1 -1 is left, 1 is right

	int lightState = 0; //State of the light

	int upperClawPosition = 0; //position of the upper 3 quarters of the claw in degree
	int lowerClawPosition = 0; //position of the lower quarter of the claw in degree
     6c4:	c1 2c       	mov	r12, r1
     6c6:	d1 2c       	mov	r13, r1

	float turnFactor = 0; // range -1..1 -1 is left, 1 is right

	int lightState = 0; //State of the light

	int upperClawPosition = 0; //position of the upper 3 quarters of the claw in degree
     6c8:	e1 2c       	mov	r14, r1
     6ca:	f1 2c       	mov	r15, r1
	int driveMode = 0; //0 fast (255), 1 medium speed (190), 2 slow (130)
	int speedOfDriveMode = 255; // speed that corresponds to the drive mode

	float turnFactor = 0; // range -1..1 -1 is left, 1 is right

	int lightState = 0; //State of the light
     6cc:	31 2c       	mov	r3, r1
     6ce:	21 2c       	mov	r2, r1
		if ((command != 'J') && (command != 'L') && (command != 'j') && (command != 'l')){
			n = sprintf(buffer, "SysSta: DuR=%d DuL=%d CamPos=%d UpClPos=%d LoClPos=%d Light=%d \n",
			dutyMotorR, dutyMotorL, cameraPosition, upperClawPosition, lowerClawPosition, lightState);
		}
		if (((command == 'J')&&(previousChar != 'J')) || ((command == 'L')&&(previousChar != 'L')) || ((command == 'j')&&(previousChar != 'j')) || ((command == 'l')&&(previousChar != 'l'))){
			n = sprintf(buffer, "SysSta: DuR=%d DuL=%d CamPos=%d UpClPos=%d LoClPos=%d Light=%d \n",
     6d0:	0f 2e       	mov	r0, r31
     6d2:	fb e1       	ldi	r31, 0x1B	; 27
     6d4:	8f 2e       	mov	r8, r31
     6d6:	f3 e0       	ldi	r31, 0x03	; 3
     6d8:	9f 2e       	mov	r9, r31
     6da:	f0 2d       	mov	r31, r0
     6dc:	36 01       	movw	r6, r12
	setServo(pinCameraServo, cameraPosition);
	setServo(pinUpperClaw, upperClawPosition);
	setServo(pinLowerClaw, lowerClawPosition);

	while (1) {
		char command = get_char();
     6de:	06 df       	rcall	.-500    	; 0x4ec <get_char>
     6e0:	08 2f       	mov	r16, r24
		if (((previousChar == 'j') && (command != 'j')) ||
     6e2:	1a 36       	cpi	r17, 0x6A	; 106
     6e4:	19 f4       	brne	.+6      	; 0x6ec <main+0xa8>
     6e6:	8a 36       	cpi	r24, 0x6A	; 106
     6e8:	89 f4       	brne	.+34     	; 0x70c <main+0xc8>
     6ea:	02 c2       	rjmp	.+1028   	; 0xaf0 <__stack+0x1f1>
     6ec:	1c 36       	cpi	r17, 0x6C	; 108
     6ee:	19 f4       	brne	.+6      	; 0x6f6 <main+0xb2>
		((previousChar == 'l') && (command != 'l')) ||
     6f0:	8c 36       	cpi	r24, 0x6C	; 108
     6f2:	61 f4       	brne	.+24     	; 0x70c <main+0xc8>
     6f4:	1b c2       	rjmp	.+1078   	; 0xb2c <__stack+0x22d>
     6f6:	1a 34       	cpi	r17, 0x4A	; 74
     6f8:	19 f4       	brne	.+6      	; 0x700 <main+0xbc>
		((previousChar == 'J') && (command != 'J')) ||
     6fa:	8a 34       	cpi	r24, 0x4A	; 74
     6fc:	39 f4       	brne	.+14     	; 0x70c <main+0xc8>
     6fe:	4a c1       	rjmp	.+660    	; 0x994 <__stack+0x95>
     700:	1c 34       	cpi	r17, 0x4C	; 76
     702:	09 f0       	breq	.+2      	; 0x706 <main+0xc2>
     704:	ba c2       	rjmp	.+1396   	; 0xc7a <__stack+0x37b>
		((previousChar == 'L') && (command != 'L'))) {
     706:	8c 34       	cpi	r24, 0x4C	; 76
     708:	09 f4       	brne	.+2      	; 0x70c <main+0xc8>
     70a:	c5 c2       	rjmp	.+1418   	; 0xc96 <__stack+0x397>
			dutyMotorR = dutyRightWithoutTurning;
			dutyMotorL = dutyLefttWithoutTurning;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	66 e0       	ldi	r22, 0x06	; 6
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	85 e0       	ldi	r24, 0x05	; 5
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	41 df       	rcall	.-382    	; 0x59c <setSpeedDC>
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	68 e0       	ldi	r22, 0x08	; 8
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	87 e0       	ldi	r24, 0x07	; 7
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	3a df       	rcall	.-396    	; 0x59c <setSpeedDC>
		}
		switch (command) {
     728:	80 2f       	mov	r24, r16
     72a:	00 2e       	mov	r0, r16
     72c:	00 0c       	add	r0, r0
     72e:	99 0b       	sbc	r25, r25
     730:	aa 0b       	sbc	r26, r26
     732:	bb 0b       	sbc	r27, r27
     734:	fc 01       	movw	r30, r24
     736:	f1 97       	sbiw	r30, 0x31	; 49
     738:	ea 34       	cpi	r30, 0x4A	; 74
     73a:	f1 05       	cpc	r31, r1
     73c:	08 f0       	brcs	.+2      	; 0x740 <main+0xfc>
     73e:	13 c2       	rjmp	.+1062   	; 0xb66 <__stack+0x267>
     740:	ec 5c       	subi	r30, 0xCC	; 204
     742:	ff 4f       	sbci	r31, 0xFF	; 255
     744:	b7 c2       	rjmp	.+1390   	; 0xcb4 <__tablejump2__>
		case 'z':
			if (cameraPosition > 0) {
     746:	14 14       	cp	r1, r4
     748:	15 04       	cpc	r1, r5
     74a:	1c f4       	brge	.+6      	; 0x752 <main+0x10e>
				cameraPosition -= 5;
     74c:	85 e0       	ldi	r24, 0x05	; 5
     74e:	48 1a       	sub	r4, r24
     750:	51 08       	sbc	r5, r1
			}
			setServo(pinCameraServo, cameraPosition);
     752:	b2 01       	movw	r22, r4
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	f6 de       	rcall	.-532    	; 0x546 <setServo>
			n = sprintf(buffer, "Camera moved to position %d*\n",
     75a:	5f 92       	push	r5
     75c:	4f 92       	push	r4
     75e:	ac e5       	ldi	r26, 0x5C	; 92
     760:	b1 e0       	ldi	r27, 0x01	; 1
     762:	bf 93       	push	r27
     764:	af 93       	push	r26
     766:	a1 e0       	ldi	r26, 0x01	; 1
     768:	b0 e0       	ldi	r27, 0x00	; 0
     76a:	ac 0f       	add	r26, r28
     76c:	bd 1f       	adc	r27, r29
     76e:	bf 93       	push	r27
     770:	af 93       	push	r26
     772:	a6 d2       	rcall	.+1356   	; 0xcc0 <sprintf>
					cameraPosition);
			send_str(buffer);
     774:	ce 01       	movw	r24, r28
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	26 de       	rcall	.-948    	; 0x3c6 <send_str>
			break;
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	1a c2       	rjmp	.+1076   	; 0xbbc <__stack+0x2bd>
		case 'x':
			if (cameraPosition < 180) {
     788:	b4 eb       	ldi	r27, 0xB4	; 180
     78a:	4b 16       	cp	r4, r27
     78c:	51 04       	cpc	r5, r1
     78e:	1c f4       	brge	.+6      	; 0x796 <main+0x152>
				cameraPosition += 5;
     790:	85 e0       	ldi	r24, 0x05	; 5
     792:	48 0e       	add	r4, r24
     794:	51 1c       	adc	r5, r1
			}
			n = sprintf(buffer, "Camera moved to position %d*\n",
     796:	5f 92       	push	r5
     798:	4f 92       	push	r4
     79a:	ac e5       	ldi	r26, 0x5C	; 92
     79c:	b1 e0       	ldi	r27, 0x01	; 1
     79e:	bf 93       	push	r27
     7a0:	af 93       	push	r26
     7a2:	a1 e0       	ldi	r26, 0x01	; 1
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	ac 0f       	add	r26, r28
     7a8:	bd 1f       	adc	r27, r29
     7aa:	bf 93       	push	r27
     7ac:	af 93       	push	r26
     7ae:	88 d2       	rcall	.+1296   	; 0xcc0 <sprintf>
					cameraPosition);
			send_str(buffer);
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	08 de       	rcall	.-1008   	; 0x3c6 <send_str>
			break;
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	fc c1       	rjmp	.+1016   	; 0xbbc <__stack+0x2bd>
		case 'q':
			stepUp();
     7c4:	b8 de       	rcall	.-656    	; 0x536 <stepUp>
			n = sprintf(buffer, "Winch moved one step up\n");
     7c6:	89 e1       	ldi	r24, 0x19	; 25
     7c8:	ea e7       	ldi	r30, 0x7A	; 122
     7ca:	f1 e0       	ldi	r31, 0x01	; 1
     7cc:	de 01       	movw	r26, r28
     7ce:	11 96       	adiw	r26, 0x01	; 1
     7d0:	01 90       	ld	r0, Z+
     7d2:	0d 92       	st	X+, r0
     7d4:	8a 95       	dec	r24
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <main+0x18c>
			send_str(buffer);
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	f4 dd       	rcall	.-1048   	; 0x3c6 <send_str>
			break;
     7de:	ee c1       	rjmp	.+988    	; 0xbbc <__stack+0x2bd>
		case 'a':
			stepDown();
     7e0:	ae de       	rcall	.-676    	; 0x53e <stepDown>
			n = sprintf(buffer, "Winch moved one step down\n");
     7e2:	8b e1       	ldi	r24, 0x1B	; 27
     7e4:	e3 e9       	ldi	r30, 0x93	; 147
     7e6:	f1 e0       	ldi	r31, 0x01	; 1
     7e8:	de 01       	movw	r26, r28
     7ea:	11 96       	adiw	r26, 0x01	; 1
     7ec:	01 90       	ld	r0, Z+
     7ee:	0d 92       	st	X+, r0
     7f0:	8a 95       	dec	r24
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <main+0x1a8>
			send_str(buffer);
     7f4:	ce 01       	movw	r24, r28
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	e6 dd       	rcall	.-1076   	; 0x3c6 <send_str>
			break;
     7fa:	e0 c1       	rjmp	.+960    	; 0xbbc <__stack+0x2bd>

		case 'r':
			if (upperClawPosition < 180) {
     7fc:	b4 eb       	ldi	r27, 0xB4	; 180
     7fe:	eb 16       	cp	r14, r27
     800:	f1 04       	cpc	r15, r1
     802:	1c f4       	brge	.+6      	; 0x80a <main+0x1c6>
				upperClawPosition += 5;
     804:	85 e0       	ldi	r24, 0x05	; 5
     806:	e8 0e       	add	r14, r24
     808:	f1 1c       	adc	r15, r1
			}
			setServo(pinUpperClaw, upperClawPosition);
     80a:	b7 01       	movw	r22, r14
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	9a de       	rcall	.-716    	; 0x546 <setServo>
			n = sprintf(buffer,"Upper claw moved to position %d*\n",
     812:	ff 92       	push	r15
     814:	ef 92       	push	r14
     816:	ae ea       	ldi	r26, 0xAE	; 174
     818:	b1 e0       	ldi	r27, 0x01	; 1
     81a:	bf 93       	push	r27
     81c:	af 93       	push	r26
     81e:	a1 e0       	ldi	r26, 0x01	; 1
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	ac 0f       	add	r26, r28
     824:	bd 1f       	adc	r27, r29
     826:	bf 93       	push	r27
     828:	af 93       	push	r26
     82a:	4a d2       	rcall	.+1172   	; 0xcc0 <sprintf>
					upperClawPosition);
			send_str(buffer);
     82c:	ce 01       	movw	r24, r28
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	ca dd       	rcall	.-1132   	; 0x3c6 <send_str>
			break;
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	be c1       	rjmp	.+892    	; 0xbbc <__stack+0x2bd>
		case 'f':
			if (upperClawPosition > 0) {
     840:	1e 14       	cp	r1, r14
     842:	1f 04       	cpc	r1, r15
     844:	1c f4       	brge	.+6      	; 0x84c <main+0x208>
				upperClawPosition -= 5;
     846:	b5 e0       	ldi	r27, 0x05	; 5
     848:	eb 1a       	sub	r14, r27
     84a:	f1 08       	sbc	r15, r1
			}
			setServo(pinUpperClaw, upperClawPosition);
     84c:	b7 01       	movw	r22, r14
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	79 de       	rcall	.-782    	; 0x546 <setServo>
			n = sprintf(buffer,"Upper claw moved to position %d*\n",
     854:	ff 92       	push	r15
     856:	ef 92       	push	r14
     858:	ae ea       	ldi	r26, 0xAE	; 174
     85a:	b1 e0       	ldi	r27, 0x01	; 1
     85c:	bf 93       	push	r27
     85e:	af 93       	push	r26
     860:	a1 e0       	ldi	r26, 0x01	; 1
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	ac 0f       	add	r26, r28
     866:	bd 1f       	adc	r27, r29
     868:	bf 93       	push	r27
     86a:	af 93       	push	r26
     86c:	29 d2       	rcall	.+1106   	; 0xcc0 <sprintf>
					upperClawPosition);
			send_str(buffer);
     86e:	ce 01       	movw	r24, r28
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	a9 dd       	rcall	.-1198   	; 0x3c6 <send_str>
			break;
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	9d c1       	rjmp	.+826    	; 0xbbc <__stack+0x2bd>
		case 't':
			if (lowerClawPosition < 180) {
     882:	b4 eb       	ldi	r27, 0xB4	; 180
     884:	6b 16       	cp	r6, r27
     886:	71 04       	cpc	r7, r1
     888:	1c f4       	brge	.+6      	; 0x890 <main+0x24c>
				lowerClawPosition += 5;
     88a:	85 e0       	ldi	r24, 0x05	; 5
     88c:	68 0e       	add	r6, r24
     88e:	71 1c       	adc	r7, r1
			}
			setServo(pinLowerClaw, lowerClawPosition);
     890:	b3 01       	movw	r22, r6
     892:	83 e0       	ldi	r24, 0x03	; 3
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	57 de       	rcall	.-850    	; 0x546 <setServo>
			n = sprintf(buffer,"Lower claw moved to position %d*\n",
     898:	7f 92       	push	r7
     89a:	6f 92       	push	r6
     89c:	a0 ed       	ldi	r26, 0xD0	; 208
     89e:	b1 e0       	ldi	r27, 0x01	; 1
     8a0:	bf 93       	push	r27
     8a2:	af 93       	push	r26
     8a4:	a1 e0       	ldi	r26, 0x01	; 1
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	ac 0f       	add	r26, r28
     8aa:	bd 1f       	adc	r27, r29
     8ac:	bf 93       	push	r27
     8ae:	af 93       	push	r26
     8b0:	07 d2       	rcall	.+1038   	; 0xcc0 <sprintf>
					lowerClawPosition);
			send_str(buffer);
     8b2:	ce 01       	movw	r24, r28
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	87 dd       	rcall	.-1266   	; 0x3c6 <send_str>
			break;
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	7b c1       	rjmp	.+758    	; 0xbbc <__stack+0x2bd>
		case 'g':
			if (lowerClawPosition > 0) {
     8c6:	16 14       	cp	r1, r6
     8c8:	17 04       	cpc	r1, r7
     8ca:	1c f4       	brge	.+6      	; 0x8d2 <main+0x28e>
				lowerClawPosition -= 5;
     8cc:	b5 e0       	ldi	r27, 0x05	; 5
     8ce:	6b 1a       	sub	r6, r27
     8d0:	71 08       	sbc	r7, r1
			}
			setServo(pinLowerClaw, lowerClawPosition);
     8d2:	b3 01       	movw	r22, r6
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	36 de       	rcall	.-916    	; 0x546 <setServo>
			n = sprintf(buffer,"Lower claw moved to position %d*\n",
     8da:	7f 92       	push	r7
     8dc:	6f 92       	push	r6
     8de:	a0 ed       	ldi	r26, 0xD0	; 208
     8e0:	b1 e0       	ldi	r27, 0x01	; 1
     8e2:	bf 93       	push	r27
     8e4:	af 93       	push	r26
     8e6:	a1 e0       	ldi	r26, 0x01	; 1
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	ac 0f       	add	r26, r28
     8ec:	bd 1f       	adc	r27, r29
     8ee:	bf 93       	push	r27
     8f0:	af 93       	push	r26
     8f2:	e6 d1       	rcall	.+972    	; 0xcc0 <sprintf>
					lowerClawPosition);
			send_str(buffer);
     8f4:	ce 01       	movw	r24, r28
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	66 dd       	rcall	.-1332   	; 0x3c6 <send_str>
			break;
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	5a c1       	rjmp	.+692    	; 0xbbc <__stack+0x2bd>
		case '1':
			lightState = 0;
			// Set light pin
			n = sprintf(buffer,"Light off \n");
     908:	8c e0       	ldi	r24, 0x0C	; 12
     90a:	e2 ef       	ldi	r30, 0xF2	; 242
     90c:	f1 e0       	ldi	r31, 0x01	; 1
     90e:	de 01       	movw	r26, r28
     910:	11 96       	adiw	r26, 0x01	; 1
     912:	01 90       	ld	r0, Z+
     914:	0d 92       	st	X+, r0
     916:	8a 95       	dec	r24
     918:	e1 f7       	brne	.-8      	; 0x912 <__stack+0x13>
			send_str(buffer);
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	53 dd       	rcall	.-1370   	; 0x3c6 <send_str>
			n = sprintf(buffer,"Lower claw moved to position %d*\n",
					lowerClawPosition);
			send_str(buffer);
			break;
		case '1':
			lightState = 0;
     920:	31 2c       	mov	r3, r1
     922:	21 2c       	mov	r2, r1
			// Set light pin
			n = sprintf(buffer,"Light off \n");
			send_str(buffer);
			break;
     924:	4b c1       	rjmp	.+662    	; 0xbbc <__stack+0x2bd>
		case '2':
			lightState = 1;
			// Set light pin
			n = sprintf(buffer,"Light on \n");
     926:	8b e0       	ldi	r24, 0x0B	; 11
     928:	ee ef       	ldi	r30, 0xFE	; 254
     92a:	f1 e0       	ldi	r31, 0x01	; 1
     92c:	de 01       	movw	r26, r28
     92e:	11 96       	adiw	r26, 0x01	; 1
     930:	01 90       	ld	r0, Z+
     932:	0d 92       	st	X+, r0
     934:	8a 95       	dec	r24
     936:	e1 f7       	brne	.-8      	; 0x930 <__stack+0x31>
			send_str(buffer);
     938:	ce 01       	movw	r24, r28
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	44 dd       	rcall	.-1400   	; 0x3c6 <send_str>
			// Set light pin
			n = sprintf(buffer,"Light off \n");
			send_str(buffer);
			break;
		case '2':
			lightState = 1;
     93e:	33 24       	eor	r3, r3
     940:	33 94       	inc	r3
     942:	21 2c       	mov	r2, r1
			// Set light pin
			n = sprintf(buffer,"Light on \n");
			send_str(buffer);
			break;
     944:	3b c1       	rjmp	.+630    	; 0xbbc <__stack+0x2bd>
		case 'y':
			driveMode = 0;
			speedOfDriveMode = getDutyOfDriveMode(0);
			n = sprintf(buffer,"Drive mode was set to fast\n");
     946:	8c e1       	ldi	r24, 0x1C	; 28
     948:	e9 e0       	ldi	r30, 0x09	; 9
     94a:	f2 e0       	ldi	r31, 0x02	; 2
     94c:	de 01       	movw	r26, r28
     94e:	11 96       	adiw	r26, 0x01	; 1
     950:	01 90       	ld	r0, Z+
     952:	0d 92       	st	X+, r0
     954:	8a 95       	dec	r24
     956:	e1 f7       	brne	.-8      	; 0x950 <__stack+0x51>
			send_str(buffer);
     958:	ce 01       	movw	r24, r28
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	34 dd       	rcall	.-1432   	; 0x3c6 <send_str>
     95e:	09 c1       	rjmp	.+530    	; 0xb72 <__stack+0x273>
			break;
		case 'h':
			driveMode = 1;
			speedOfDriveMode = getDutyOfDriveMode(1);
			n = sprintf(buffer,"Drive mode was set to medium speed\n");
     960:	84 e2       	ldi	r24, 0x24	; 36
     962:	e5 e2       	ldi	r30, 0x25	; 37
     964:	f2 e0       	ldi	r31, 0x02	; 2
     966:	de 01       	movw	r26, r28
     968:	11 96       	adiw	r26, 0x01	; 1
     96a:	01 90       	ld	r0, Z+
     96c:	0d 92       	st	X+, r0
     96e:	8a 95       	dec	r24
     970:	e1 f7       	brne	.-8      	; 0x96a <__stack+0x6b>
			send_str(buffer);
     972:	ce 01       	movw	r24, r28
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	27 dd       	rcall	.-1458   	; 0x3c6 <send_str>
     978:	fc c0       	rjmp	.+504    	; 0xb72 <__stack+0x273>
			break;
		case 'n':
			driveMode = 2;
			speedOfDriveMode = getDutyOfDriveMode(2);
			n = sprintf(buffer,"Drive mode was set to slow\n");
     97a:	8c e1       	ldi	r24, 0x1C	; 28
     97c:	e9 e4       	ldi	r30, 0x49	; 73
     97e:	f2 e0       	ldi	r31, 0x02	; 2
     980:	de 01       	movw	r26, r28
     982:	11 96       	adiw	r26, 0x01	; 1
     984:	01 90       	ld	r0, Z+
     986:	0d 92       	st	X+, r0
     988:	8a 95       	dec	r24
     98a:	e1 f7       	brne	.-8      	; 0x984 <__stack+0x85>
			send_str(buffer);
     98c:	ce 01       	movw	r24, r28
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	1a dd       	rcall	.-1484   	; 0x3c6 <send_str>
     992:	ef c0       	rjmp	.+478    	; 0xb72 <__stack+0x273>
			dutyLefttWithoutTurning = 0;
			dutyMotorR = speedOfDriveMode;
			dutyMotorL = -speedOfDriveMode;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	66 e0       	ldi	r22, 0x06	; 6
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	85 e0       	ldi	r24, 0x05	; 5
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	fd dd       	rcall	.-1030   	; 0x59c <setSpeedDC>
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	68 e0       	ldi	r22, 0x08	; 8
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	87 e0       	ldi	r24, 0x07	; 7
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	f6 dd       	rcall	.-1044   	; 0x59c <setSpeedDC>
			if (previousChar != command){
     9b0:	1a 34       	cpi	r17, 0x4A	; 74
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <__stack+0xb7>
     9b4:	03 c1       	rjmp	.+518    	; 0xbbc <__stack+0x2bd>
				n = sprintf(buffer,"Counterclockwise spinning\n");
     9b6:	8b e1       	ldi	r24, 0x1B	; 27
     9b8:	e5 e6       	ldi	r30, 0x65	; 101
     9ba:	f2 e0       	ldi	r31, 0x02	; 2
     9bc:	de 01       	movw	r26, r28
     9be:	11 96       	adiw	r26, 0x01	; 1
     9c0:	01 90       	ld	r0, Z+
     9c2:	0d 92       	st	X+, r0
     9c4:	8a 95       	dec	r24
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <__stack+0xc1>
				send_str(buffer);
     9c8:	ce 01       	movw	r24, r28
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	fc dc       	rcall	.-1544   	; 0x3c6 <send_str>
     9ce:	f6 c0       	rjmp	.+492    	; 0xbbc <__stack+0x2bd>
			dutyLefttWithoutTurning = 0;
			dutyMotorR = -speedOfDriveMode;
			dutyMotorL = speedOfDriveMode;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	66 e0       	ldi	r22, 0x06	; 6
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	85 e0       	ldi	r24, 0x05	; 5
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	df dd       	rcall	.-1090   	; 0x59c <setSpeedDC>
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	68 e0       	ldi	r22, 0x08	; 8
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	87 e0       	ldi	r24, 0x07	; 7
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	d8 dd       	rcall	.-1104   	; 0x59c <setSpeedDC>
			if (previousChar != command){
     9ec:	1c 34       	cpi	r17, 0x4C	; 76
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	e5 c0       	rjmp	.+458    	; 0xbbc <__stack+0x2bd>
				n = sprintf(buffer,"Clockwise spinning\n");
     9f2:	84 e1       	ldi	r24, 0x14	; 20
     9f4:	e0 e8       	ldi	r30, 0x80	; 128
     9f6:	f2 e0       	ldi	r31, 0x02	; 2
     9f8:	de 01       	movw	r26, r28
     9fa:	11 96       	adiw	r26, 0x01	; 1
     9fc:	01 90       	ld	r0, Z+
     9fe:	0d 92       	st	X+, r0
     a00:	8a 95       	dec	r24
     a02:	e1 f7       	brne	.-8      	; 0x9fc <__stack+0xfd>
				send_str(buffer);			
     a04:	ce 01       	movw	r24, r28
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	de dc       	rcall	.-1604   	; 0x3c6 <send_str>
     a0a:	d8 c0       	rjmp	.+432    	; 0xbbc <__stack+0x2bd>
		case 'i':
			dutyMotorR = speedOfDriveMode;
			dutyMotorL = speedOfDriveMode;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
     a0c:	c1 2c       	mov	r12, r1
     a0e:	d1 2c       	mov	r13, r1
     a10:	a6 01       	movw	r20, r12
     a12:	66 e0       	ldi	r22, 0x06	; 6
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	85 e0       	ldi	r24, 0x05	; 5
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	c0 dd       	rcall	.-1152   	; 0x59c <setSpeedDC>
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
     a1c:	a6 01       	movw	r20, r12
     a1e:	68 e0       	ldi	r22, 0x08	; 8
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	87 e0       	ldi	r24, 0x07	; 7
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	ba dd       	rcall	.-1164   	; 0x59c <setSpeedDC>
			carStatus = 1;
			n = sprintf(buffer,"Car moves forwards with the duty cycle %d\n",
     a28:	bc a9       	ldd	r27, Y+52	; 0x34
     a2a:	bf 93       	push	r27
     a2c:	8b a9       	ldd	r24, Y+51	; 0x33
     a2e:	8f 93       	push	r24
     a30:	a4 e9       	ldi	r26, 0x94	; 148
     a32:	b2 e0       	ldi	r27, 0x02	; 2
     a34:	bf 93       	push	r27
     a36:	af 93       	push	r26
     a38:	a1 e0       	ldi	r26, 0x01	; 1
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	ac 0f       	add	r26, r28
     a3e:	bd 1f       	adc	r27, r29
     a40:	bf 93       	push	r27
     a42:	af 93       	push	r26
     a44:	3d d1       	rcall	.+634    	; 0xcc0 <sprintf>
					((dutyMotorR + dutyMotorL))/2);
			send_str(buffer);
     a46:	ce 01       	movw	r24, r28
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	bd dc       	rcall	.-1670   	; 0x3c6 <send_str>
			break;
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
			dutyMotorL = speedOfDriveMode;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
			carStatus = 1;
     a58:	aa 24       	eor	r10, r10
     a5a:	a3 94       	inc	r10
     a5c:	b1 2c       	mov	r11, r1
			n = sprintf(buffer,"Car moves forwards with the duty cycle %d\n",
					((dutyMotorR + dutyMotorL))/2);
			send_str(buffer);
			break;
     a5e:	ae c0       	rjmp	.+348    	; 0xbbc <__stack+0x2bd>
		case 'm':
			dutyMotorR = -speedOfDriveMode;
			dutyMotorL = -speedOfDriveMode;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
     a60:	c1 2c       	mov	r12, r1
     a62:	d1 2c       	mov	r13, r1
     a64:	a6 01       	movw	r20, r12
     a66:	66 e0       	ldi	r22, 0x06	; 6
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	85 e0       	ldi	r24, 0x05	; 5
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	96 dd       	rcall	.-1236   	; 0x59c <setSpeedDC>
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
     a70:	a6 01       	movw	r20, r12
     a72:	68 e0       	ldi	r22, 0x08	; 8
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	90 dd       	rcall	.-1248   	; 0x59c <setSpeedDC>
			carStatus = 2;
			n = sprintf(buffer,"Car moves backwards with the duty cycle %d\n",
     a7c:	be a9       	ldd	r27, Y+54	; 0x36
     a7e:	bf 93       	push	r27
     a80:	8d a9       	ldd	r24, Y+53	; 0x35
     a82:	8f 93       	push	r24
     a84:	af eb       	ldi	r26, 0xBF	; 191
     a86:	b2 e0       	ldi	r27, 0x02	; 2
     a88:	bf 93       	push	r27
     a8a:	af 93       	push	r26
     a8c:	a1 e0       	ldi	r26, 0x01	; 1
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	ac 0f       	add	r26, r28
     a92:	bd 1f       	adc	r27, r29
     a94:	bf 93       	push	r27
     a96:	af 93       	push	r26
     a98:	13 d1       	rcall	.+550    	; 0xcc0 <sprintf>
					((dutyMotorR + dutyMotorL))/2);
			send_str(buffer);
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	93 dc       	rcall	.-1754   	; 0x3c6 <send_str>
			break;
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
			dutyMotorL = -speedOfDriveMode;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
			carStatus = 2;
     aac:	68 94       	set
     aae:	aa 24       	eor	r10, r10
     ab0:	a1 f8       	bld	r10, 1
     ab2:	b1 2c       	mov	r11, r1
			n = sprintf(buffer,"Car moves backwards with the duty cycle %d\n",
					((dutyMotorR + dutyMotorL))/2);
			send_str(buffer);
			break;
     ab4:	83 c0       	rjmp	.+262    	; 0xbbc <__stack+0x2bd>
		case 'k':
			dutyMotorR = 0;
			dutyMotorL = 0;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
     ab6:	c1 2c       	mov	r12, r1
     ab8:	d1 2c       	mov	r13, r1
     aba:	a6 01       	movw	r20, r12
     abc:	66 e0       	ldi	r22, 0x06	; 6
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	85 e0       	ldi	r24, 0x05	; 5
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	6b dd       	rcall	.-1322   	; 0x59c <setSpeedDC>
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
     ac6:	a6 01       	movw	r20, r12
     ac8:	68 e0       	ldi	r22, 0x08	; 8
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	87 e0       	ldi	r24, 0x07	; 7
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	65 dd       	rcall	.-1334   	; 0x59c <setSpeedDC>
			carStatus = 0;
			n = sprintf(buffer,"Car breaks \n");
     ad2:	eb ee       	ldi	r30, 0xEB	; 235
     ad4:	f2 e0       	ldi	r31, 0x02	; 2
     ad6:	de 01       	movw	r26, r28
     ad8:	11 96       	adiw	r26, 0x01	; 1
     ada:	8d e0       	ldi	r24, 0x0D	; 13
     adc:	01 90       	ld	r0, Z+
     ade:	0d 92       	st	X+, r0
     ae0:	8a 95       	dec	r24
     ae2:	e1 f7       	brne	.-8      	; 0xadc <__stack+0x1dd>
			send_str(buffer);
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	6e dc       	rcall	.-1828   	; 0x3c6 <send_str>
			dutyMotorL = 0;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
			carStatus = 0;
     aea:	a1 2c       	mov	r10, r1
     aec:	b1 2c       	mov	r11, r1
			n = sprintf(buffer,"Car breaks \n");
			send_str(buffer);
			break;
     aee:	66 c0       	rjmp	.+204    	; 0xbbc <__stack+0x2bd>
			dutyLefttWithoutTurning = dutyMotorL;
			dutyMotorR = dutyMotorR * 1.2;
			dutyMotorL = dutyMotorR * 0.8;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
     af0:	40 e0       	ldi	r20, 0x00	; 0
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	66 e0       	ldi	r22, 0x06	; 6
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	85 e0       	ldi	r24, 0x05	; 5
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	4f dd       	rcall	.-1378   	; 0x59c <setSpeedDC>
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	68 e0       	ldi	r22, 0x08	; 8
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	87 e0       	ldi	r24, 0x07	; 7
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	48 dd       	rcall	.-1392   	; 0x59c <setSpeedDC>
			if (previousChar != command){
     b0c:	1a 36       	cpi	r17, 0x6A	; 106
     b0e:	09 f4       	brne	.+2      	; 0xb12 <__stack+0x213>
     b10:	55 c0       	rjmp	.+170    	; 0xbbc <__stack+0x2bd>
				n = sprintf(buffer,"Car turns left \n");
     b12:	e8 ef       	ldi	r30, 0xF8	; 248
     b14:	f2 e0       	ldi	r31, 0x02	; 2
     b16:	de 01       	movw	r26, r28
     b18:	11 96       	adiw	r26, 0x01	; 1
     b1a:	81 e1       	ldi	r24, 0x11	; 17
     b1c:	01 90       	ld	r0, Z+
     b1e:	0d 92       	st	X+, r0
     b20:	8a 95       	dec	r24
     b22:	e1 f7       	brne	.-8      	; 0xb1c <__stack+0x21d>
				send_str(buffer);
     b24:	ce 01       	movw	r24, r28
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	4e dc       	rcall	.-1892   	; 0x3c6 <send_str>
     b2a:	48 c0       	rjmp	.+144    	; 0xbbc <__stack+0x2bd>
			dutyLefttWithoutTurning = dutyMotorL;
			dutyMotorR = dutyMotorR * 0.8;
			dutyMotorL = dutyMotorL * 1.2;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	66 e0       	ldi	r22, 0x06	; 6
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	85 e0       	ldi	r24, 0x05	; 5
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	31 dd       	rcall	.-1438   	; 0x59c <setSpeedDC>
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	68 e0       	ldi	r22, 0x08	; 8
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	87 e0       	ldi	r24, 0x07	; 7
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	2a dd       	rcall	.-1452   	; 0x59c <setSpeedDC>
			if (previousChar != command){
     b48:	1c 36       	cpi	r17, 0x6C	; 108
     b4a:	c1 f1       	breq	.+112    	; 0xbbc <__stack+0x2bd>
				n = sprintf(buffer,"Car turns right \n");
     b4c:	e9 e0       	ldi	r30, 0x09	; 9
     b4e:	f3 e0       	ldi	r31, 0x03	; 3
     b50:	de 01       	movw	r26, r28
     b52:	11 96       	adiw	r26, 0x01	; 1
     b54:	82 e1       	ldi	r24, 0x12	; 18
     b56:	01 90       	ld	r0, Z+
     b58:	0d 92       	st	X+, r0
     b5a:	8a 95       	dec	r24
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <__stack+0x257>
				send_str(buffer);
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	31 dc       	rcall	.-1950   	; 0x3c6 <send_str>
     b64:	2b c0       	rjmp	.+86     	; 0xbbc <__stack+0x2bd>
			}
			break;
		}

		if ((command == 'y' || (command == 'h') || (command == 'n'))){
     b66:	09 37       	cpi	r16, 0x79	; 121
     b68:	21 f0       	breq	.+8      	; 0xb72 <__stack+0x273>
     b6a:	08 36       	cpi	r16, 0x68	; 104
     b6c:	11 f0       	breq	.+4      	; 0xb72 <__stack+0x273>
     b6e:	0e 36       	cpi	r16, 0x6E	; 110
     b70:	29 f5       	brne	.+74     	; 0xbbc <__stack+0x2bd>
			if (carStatus == 1) {
     b72:	b1 e0       	ldi	r27, 0x01	; 1
     b74:	ab 16       	cp	r10, r27
     b76:	b1 04       	cpc	r11, r1
     b78:	79 f4       	brne	.+30     	; 0xb98 <__stack+0x299>
				dutyMotorL = speedOfDriveMode;
				dutyRightWithoutTurning = dutyMotorR;
				dutyLefttWithoutTurning = dutyMotorL;
				dutyMotorR = checkDuty(dutyMotorR);
				dutyMotorL = checkDuty(dutyMotorL);
				setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
     b7a:	c1 2c       	mov	r12, r1
     b7c:	d1 2c       	mov	r13, r1
     b7e:	a6 01       	movw	r20, r12
     b80:	66 e0       	ldi	r22, 0x06	; 6
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	85 e0       	ldi	r24, 0x05	; 5
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	09 dd       	rcall	.-1518   	; 0x59c <setSpeedDC>
				setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
     b8a:	a6 01       	movw	r20, r12
     b8c:	68 e0       	ldi	r22, 0x08	; 8
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	87 e0       	ldi	r24, 0x07	; 7
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	03 dd       	rcall	.-1530   	; 0x59c <setSpeedDC>
     b96:	12 c0       	rjmp	.+36     	; 0xbbc <__stack+0x2bd>
			}
			else if (carStatus == 2) {
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	a8 16       	cp	r10, r24
     b9c:	b1 04       	cpc	r11, r1
     b9e:	71 f4       	brne	.+28     	; 0xbbc <__stack+0x2bd>
				dutyMotorL = -speedOfDriveMode;
				dutyRightWithoutTurning = dutyMotorR;
				dutyLefttWithoutTurning = dutyMotorL;
				dutyMotorR = checkDuty(dutyMotorR);
				dutyMotorL = checkDuty(dutyMotorL);
				setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
     ba0:	c1 2c       	mov	r12, r1
     ba2:	d1 2c       	mov	r13, r1
     ba4:	a6 01       	movw	r20, r12
     ba6:	66 e0       	ldi	r22, 0x06	; 6
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	85 e0       	ldi	r24, 0x05	; 5
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	f6 dc       	rcall	.-1556   	; 0x59c <setSpeedDC>
				setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
     bb0:	a6 01       	movw	r20, r12
     bb2:	68 e0       	ldi	r22, 0x08	; 8
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	87 e0       	ldi	r24, 0x07	; 7
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	f0 dc       	rcall	.-1568   	; 0x59c <setSpeedDC>
			}
		}

		if ((command != 'J') && (command != 'L') && (command != 'j') && (command != 'l')){
     bbc:	0a 34       	cpi	r16, 0x4A	; 74
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__stack+0x2c3>
     bc0:	41 c0       	rjmp	.+130    	; 0xc44 <__stack+0x345>
     bc2:	0c 34       	cpi	r16, 0x4C	; 76
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <__stack+0x2c9>
     bc6:	41 c0       	rjmp	.+130    	; 0xc4a <__stack+0x34b>
     bc8:	0a 36       	cpi	r16, 0x6A	; 106
     bca:	09 f4       	brne	.+2      	; 0xbce <__stack+0x2cf>
     bcc:	41 c0       	rjmp	.+130    	; 0xc50 <__stack+0x351>
     bce:	0c 36       	cpi	r16, 0x6C	; 108
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <__stack+0x2d5>
     bd2:	41 c0       	rjmp	.+130    	; 0xc56 <__stack+0x357>
			n = sprintf(buffer, "SysSta: DuR=%d DuL=%d CamPos=%d UpClPos=%d LoClPos=%d Light=%d \n",
     bd4:	2f 92       	push	r2
     bd6:	3f 92       	push	r3
     bd8:	7f 92       	push	r7
     bda:	6f 92       	push	r6
     bdc:	ff 92       	push	r15
     bde:	ef 92       	push	r14
     be0:	5f 92       	push	r5
     be2:	4f 92       	push	r4
     be4:	1f 92       	push	r1
     be6:	1f 92       	push	r1
     be8:	1f 92       	push	r1
     bea:	1f 92       	push	r1
     bec:	9f 92       	push	r9
     bee:	8f 92       	push	r8
     bf0:	a1 e0       	ldi	r26, 0x01	; 1
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	ac 0f       	add	r26, r28
     bf6:	bd 1f       	adc	r27, r29
     bf8:	bf 93       	push	r27
     bfa:	af 93       	push	r26
     bfc:	61 d0       	rcall	.+194    	; 0xcc0 <sprintf>
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	10 2f       	mov	r17, r16
     c0a:	69 cd       	rjmp	.-1326   	; 0x6de <main+0x9a>
			dutyMotorR, dutyMotorL, cameraPosition, upperClawPosition, lowerClawPosition, lightState);
		}
		if (((command == 'J')&&(previousChar != 'J')) || ((command == 'L')&&(previousChar != 'L')) || ((command == 'j')&&(previousChar != 'j')) || ((command == 'l')&&(previousChar != 'l'))){
			n = sprintf(buffer, "SysSta: DuR=%d DuL=%d CamPos=%d UpClPos=%d LoClPos=%d Light=%d \n",
     c0c:	2f 92       	push	r2
     c0e:	3f 92       	push	r3
     c10:	7f 92       	push	r7
     c12:	6f 92       	push	r6
     c14:	ff 92       	push	r15
     c16:	ef 92       	push	r14
     c18:	5f 92       	push	r5
     c1a:	4f 92       	push	r4
     c1c:	1f 92       	push	r1
     c1e:	1f 92       	push	r1
     c20:	1f 92       	push	r1
     c22:	1f 92       	push	r1
     c24:	9f 92       	push	r9
     c26:	8f 92       	push	r8
     c28:	a1 e0       	ldi	r26, 0x01	; 1
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ac 0f       	add	r26, r28
     c2e:	bd 1f       	adc	r27, r29
     c30:	bf 93       	push	r27
     c32:	af 93       	push	r26
     c34:	45 d0       	rcall	.+138    	; 0xcc0 <sprintf>
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	10 2f       	mov	r17, r16
     c42:	4d cd       	rjmp	.-1382   	; 0x6de <main+0x9a>

		if ((command != 'J') && (command != 'L') && (command != 'j') && (command != 'l')){
			n = sprintf(buffer, "SysSta: DuR=%d DuL=%d CamPos=%d UpClPos=%d LoClPos=%d Light=%d \n",
			dutyMotorR, dutyMotorL, cameraPosition, upperClawPosition, lowerClawPosition, lightState);
		}
		if (((command == 'J')&&(previousChar != 'J')) || ((command == 'L')&&(previousChar != 'L')) || ((command == 'j')&&(previousChar != 'j')) || ((command == 'l')&&(previousChar != 'l'))){
     c44:	1a 34       	cpi	r17, 0x4A	; 74
     c46:	11 f7       	brne	.-60     	; 0xc0c <__stack+0x30d>
     c48:	4a cd       	rjmp	.-1388   	; 0x6de <main+0x9a>
     c4a:	1c 34       	cpi	r17, 0x4C	; 76
     c4c:	f9 f6       	brne	.-66     	; 0xc0c <__stack+0x30d>
     c4e:	47 cd       	rjmp	.-1394   	; 0x6de <main+0x9a>
     c50:	1a 36       	cpi	r17, 0x6A	; 106
     c52:	e1 f6       	brne	.-72     	; 0xc0c <__stack+0x30d>
     c54:	44 cd       	rjmp	.-1400   	; 0x6de <main+0x9a>
     c56:	1c 36       	cpi	r17, 0x6C	; 108
     c58:	c9 f6       	brne	.-78     	; 0xc0c <__stack+0x30d>
     c5a:	41 cd       	rjmp	.-1406   	; 0x6de <main+0x9a>
			dutyLefttWithoutTurning = 0;
			dutyMotorR = speedOfDriveMode;
			dutyMotorL = -speedOfDriveMode;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	66 e0       	ldi	r22, 0x06	; 6
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	85 e0       	ldi	r24, 0x05	; 5
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	99 dc       	rcall	.-1742   	; 0x59c <setSpeedDC>
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	68 e0       	ldi	r22, 0x08	; 8
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	87 e0       	ldi	r24, 0x07	; 7
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	92 dc       	rcall	.-1756   	; 0x59c <setSpeedDC>
     c78:	9e ce       	rjmp	.-708    	; 0x9b6 <__stack+0xb7>
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
		}
		switch (command) {
     c7a:	08 2e       	mov	r0, r24
     c7c:	00 0c       	add	r0, r0
     c7e:	99 0b       	sbc	r25, r25
     c80:	aa 0b       	sbc	r26, r26
     c82:	bb 0b       	sbc	r27, r27
     c84:	fc 01       	movw	r30, r24
     c86:	f1 97       	sbiw	r30, 0x31	; 49
     c88:	ea 34       	cpi	r30, 0x4A	; 74
     c8a:	f1 05       	cpc	r31, r1
     c8c:	08 f0       	brcs	.+2      	; 0xc90 <__stack+0x391>
     c8e:	6b cf       	rjmp	.-298    	; 0xb66 <__stack+0x267>
     c90:	e2 58       	subi	r30, 0x82	; 130
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	0f c0       	rjmp	.+30     	; 0xcb4 <__tablejump2__>
			dutyLefttWithoutTurning = 0;
			dutyMotorR = -speedOfDriveMode;
			dutyMotorL = speedOfDriveMode;
			dutyMotorR = checkDuty(dutyMotorR);
			dutyMotorL = checkDuty(dutyMotorL);
			setSpeedDC(staticPinR, pwmPinR, dutyMotorR);
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	66 e0       	ldi	r22, 0x06	; 6
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	85 e0       	ldi	r24, 0x05	; 5
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	7c dc       	rcall	.-1800   	; 0x59c <setSpeedDC>
			setSpeedDC(staticPinL, pwmPinL, dutyMotorL);
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	68 e0       	ldi	r22, 0x08	; 8
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	87 e0       	ldi	r24, 0x07	; 7
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	75 dc       	rcall	.-1814   	; 0x59c <setSpeedDC>
     cb2:	84 cf       	rjmp	.-248    	; 0xbbc <__stack+0x2bd>

00000cb4 <__tablejump2__>:
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	05 90       	lpm	r0, Z+
     cba:	f4 91       	lpm	r31, Z
     cbc:	e0 2d       	mov	r30, r0
     cbe:	09 94       	ijmp

00000cc0 <sprintf>:
     cc0:	ae e0       	ldi	r26, 0x0E	; 14
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e5 e6       	ldi	r30, 0x65	; 101
     cc6:	f6 e0       	ldi	r31, 0x06	; 6
     cc8:	98 c2       	rjmp	.+1328   	; 0x11fa <__prologue_saves__+0x1c>
     cca:	0d 89       	ldd	r16, Y+21	; 0x15
     ccc:	1e 89       	ldd	r17, Y+22	; 0x16
     cce:	86 e0       	ldi	r24, 0x06	; 6
     cd0:	8c 83       	std	Y+4, r24	; 0x04
     cd2:	1a 83       	std	Y+2, r17	; 0x02
     cd4:	09 83       	std	Y+1, r16	; 0x01
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	9f e7       	ldi	r25, 0x7F	; 127
     cda:	9e 83       	std	Y+6, r25	; 0x06
     cdc:	8d 83       	std	Y+5, r24	; 0x05
     cde:	ae 01       	movw	r20, r28
     ce0:	47 5e       	subi	r20, 0xE7	; 231
     ce2:	5f 4f       	sbci	r21, 0xFF	; 255
     ce4:	6f 89       	ldd	r22, Y+23	; 0x17
     ce6:	78 8d       	ldd	r23, Y+24	; 0x18
     ce8:	ce 01       	movw	r24, r28
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	09 d0       	rcall	.+18     	; 0xd00 <vfprintf>
     cee:	2f 81       	ldd	r18, Y+7	; 0x07
     cf0:	38 85       	ldd	r19, Y+8	; 0x08
     cf2:	f8 01       	movw	r30, r16
     cf4:	e2 0f       	add	r30, r18
     cf6:	f3 1f       	adc	r31, r19
     cf8:	10 82       	st	Z, r1
     cfa:	2e 96       	adiw	r28, 0x0e	; 14
     cfc:	e4 e0       	ldi	r30, 0x04	; 4
     cfe:	99 c2       	rjmp	.+1330   	; 0x1232 <__epilogue_restores__+0x1c>

00000d00 <vfprintf>:
     d00:	ac e0       	ldi	r26, 0x0C	; 12
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e5 e8       	ldi	r30, 0x85	; 133
     d06:	f6 e0       	ldi	r31, 0x06	; 6
     d08:	6a c2       	rjmp	.+1236   	; 0x11de <__prologue_saves__>
     d0a:	7c 01       	movw	r14, r24
     d0c:	6b 01       	movw	r12, r22
     d0e:	8a 01       	movw	r16, r20
     d10:	fc 01       	movw	r30, r24
     d12:	17 82       	std	Z+7, r1	; 0x07
     d14:	16 82       	std	Z+6, r1	; 0x06
     d16:	83 81       	ldd	r24, Z+3	; 0x03
     d18:	81 ff       	sbrs	r24, 1
     d1a:	b0 c1       	rjmp	.+864    	; 0x107c <vfprintf+0x37c>
     d1c:	ce 01       	movw	r24, r28
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	4c 01       	movw	r8, r24
     d22:	f7 01       	movw	r30, r14
     d24:	93 81       	ldd	r25, Z+3	; 0x03
     d26:	f6 01       	movw	r30, r12
     d28:	93 fd       	sbrc	r25, 3
     d2a:	85 91       	lpm	r24, Z+
     d2c:	93 ff       	sbrs	r25, 3
     d2e:	81 91       	ld	r24, Z+
     d30:	6f 01       	movw	r12, r30
     d32:	88 23       	and	r24, r24
     d34:	09 f4       	brne	.+2      	; 0xd38 <vfprintf+0x38>
     d36:	9e c1       	rjmp	.+828    	; 0x1074 <vfprintf+0x374>
     d38:	85 32       	cpi	r24, 0x25	; 37
     d3a:	39 f4       	brne	.+14     	; 0xd4a <vfprintf+0x4a>
     d3c:	93 fd       	sbrc	r25, 3
     d3e:	85 91       	lpm	r24, Z+
     d40:	93 ff       	sbrs	r25, 3
     d42:	81 91       	ld	r24, Z+
     d44:	6f 01       	movw	r12, r30
     d46:	85 32       	cpi	r24, 0x25	; 37
     d48:	21 f4       	brne	.+8      	; 0xd52 <vfprintf+0x52>
     d4a:	b7 01       	movw	r22, r14
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	b1 d1       	rcall	.+866    	; 0x10b2 <fputc>
     d50:	e8 cf       	rjmp	.-48     	; 0xd22 <vfprintf+0x22>
     d52:	51 2c       	mov	r5, r1
     d54:	31 2c       	mov	r3, r1
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	20 32       	cpi	r18, 0x20	; 32
     d5a:	a0 f4       	brcc	.+40     	; 0xd84 <vfprintf+0x84>
     d5c:	8b 32       	cpi	r24, 0x2B	; 43
     d5e:	69 f0       	breq	.+26     	; 0xd7a <vfprintf+0x7a>
     d60:	30 f4       	brcc	.+12     	; 0xd6e <vfprintf+0x6e>
     d62:	80 32       	cpi	r24, 0x20	; 32
     d64:	59 f0       	breq	.+22     	; 0xd7c <vfprintf+0x7c>
     d66:	83 32       	cpi	r24, 0x23	; 35
     d68:	69 f4       	brne	.+26     	; 0xd84 <vfprintf+0x84>
     d6a:	20 61       	ori	r18, 0x10	; 16
     d6c:	2c c0       	rjmp	.+88     	; 0xdc6 <vfprintf+0xc6>
     d6e:	8d 32       	cpi	r24, 0x2D	; 45
     d70:	39 f0       	breq	.+14     	; 0xd80 <vfprintf+0x80>
     d72:	80 33       	cpi	r24, 0x30	; 48
     d74:	39 f4       	brne	.+14     	; 0xd84 <vfprintf+0x84>
     d76:	21 60       	ori	r18, 0x01	; 1
     d78:	26 c0       	rjmp	.+76     	; 0xdc6 <vfprintf+0xc6>
     d7a:	22 60       	ori	r18, 0x02	; 2
     d7c:	24 60       	ori	r18, 0x04	; 4
     d7e:	23 c0       	rjmp	.+70     	; 0xdc6 <vfprintf+0xc6>
     d80:	28 60       	ori	r18, 0x08	; 8
     d82:	21 c0       	rjmp	.+66     	; 0xdc6 <vfprintf+0xc6>
     d84:	27 fd       	sbrc	r18, 7
     d86:	27 c0       	rjmp	.+78     	; 0xdd6 <vfprintf+0xd6>
     d88:	30 ed       	ldi	r19, 0xD0	; 208
     d8a:	38 0f       	add	r19, r24
     d8c:	3a 30       	cpi	r19, 0x0A	; 10
     d8e:	78 f4       	brcc	.+30     	; 0xdae <vfprintf+0xae>
     d90:	26 ff       	sbrs	r18, 6
     d92:	06 c0       	rjmp	.+12     	; 0xda0 <vfprintf+0xa0>
     d94:	fa e0       	ldi	r31, 0x0A	; 10
     d96:	5f 9e       	mul	r5, r31
     d98:	30 0d       	add	r19, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	53 2e       	mov	r5, r19
     d9e:	13 c0       	rjmp	.+38     	; 0xdc6 <vfprintf+0xc6>
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	38 9e       	mul	r3, r24
     da4:	30 0d       	add	r19, r0
     da6:	11 24       	eor	r1, r1
     da8:	33 2e       	mov	r3, r19
     daa:	20 62       	ori	r18, 0x20	; 32
     dac:	0c c0       	rjmp	.+24     	; 0xdc6 <vfprintf+0xc6>
     dae:	8e 32       	cpi	r24, 0x2E	; 46
     db0:	21 f4       	brne	.+8      	; 0xdba <vfprintf+0xba>
     db2:	26 fd       	sbrc	r18, 6
     db4:	5f c1       	rjmp	.+702    	; 0x1074 <vfprintf+0x374>
     db6:	20 64       	ori	r18, 0x40	; 64
     db8:	06 c0       	rjmp	.+12     	; 0xdc6 <vfprintf+0xc6>
     dba:	8c 36       	cpi	r24, 0x6C	; 108
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <vfprintf+0xc2>
     dbe:	20 68       	ori	r18, 0x80	; 128
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <vfprintf+0xc6>
     dc2:	88 36       	cpi	r24, 0x68	; 104
     dc4:	41 f4       	brne	.+16     	; 0xdd6 <vfprintf+0xd6>
     dc6:	f6 01       	movw	r30, r12
     dc8:	93 fd       	sbrc	r25, 3
     dca:	85 91       	lpm	r24, Z+
     dcc:	93 ff       	sbrs	r25, 3
     dce:	81 91       	ld	r24, Z+
     dd0:	6f 01       	movw	r12, r30
     dd2:	81 11       	cpse	r24, r1
     dd4:	c1 cf       	rjmp	.-126    	; 0xd58 <vfprintf+0x58>
     dd6:	98 2f       	mov	r25, r24
     dd8:	9f 7d       	andi	r25, 0xDF	; 223
     dda:	95 54       	subi	r25, 0x45	; 69
     ddc:	93 30       	cpi	r25, 0x03	; 3
     dde:	28 f4       	brcc	.+10     	; 0xdea <vfprintf+0xea>
     de0:	0c 5f       	subi	r16, 0xFC	; 252
     de2:	1f 4f       	sbci	r17, 0xFF	; 255
     de4:	ff e3       	ldi	r31, 0x3F	; 63
     de6:	f9 83       	std	Y+1, r31	; 0x01
     de8:	0d c0       	rjmp	.+26     	; 0xe04 <vfprintf+0x104>
     dea:	83 36       	cpi	r24, 0x63	; 99
     dec:	31 f0       	breq	.+12     	; 0xdfa <vfprintf+0xfa>
     dee:	83 37       	cpi	r24, 0x73	; 115
     df0:	71 f0       	breq	.+28     	; 0xe0e <vfprintf+0x10e>
     df2:	83 35       	cpi	r24, 0x53	; 83
     df4:	09 f0       	breq	.+2      	; 0xdf8 <vfprintf+0xf8>
     df6:	57 c0       	rjmp	.+174    	; 0xea6 <vfprintf+0x1a6>
     df8:	21 c0       	rjmp	.+66     	; 0xe3c <vfprintf+0x13c>
     dfa:	f8 01       	movw	r30, r16
     dfc:	80 81       	ld	r24, Z
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	0e 5f       	subi	r16, 0xFE	; 254
     e02:	1f 4f       	sbci	r17, 0xFF	; 255
     e04:	44 24       	eor	r4, r4
     e06:	43 94       	inc	r4
     e08:	51 2c       	mov	r5, r1
     e0a:	54 01       	movw	r10, r8
     e0c:	14 c0       	rjmp	.+40     	; 0xe36 <vfprintf+0x136>
     e0e:	38 01       	movw	r6, r16
     e10:	f2 e0       	ldi	r31, 0x02	; 2
     e12:	6f 0e       	add	r6, r31
     e14:	71 1c       	adc	r7, r1
     e16:	f8 01       	movw	r30, r16
     e18:	a0 80       	ld	r10, Z
     e1a:	b1 80       	ldd	r11, Z+1	; 0x01
     e1c:	26 ff       	sbrs	r18, 6
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <vfprintf+0x126>
     e20:	65 2d       	mov	r22, r5
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <vfprintf+0x12a>
     e26:	6f ef       	ldi	r22, 0xFF	; 255
     e28:	7f ef       	ldi	r23, 0xFF	; 255
     e2a:	c5 01       	movw	r24, r10
     e2c:	2c 87       	std	Y+12, r18	; 0x0c
     e2e:	36 d1       	rcall	.+620    	; 0x109c <strnlen>
     e30:	2c 01       	movw	r4, r24
     e32:	83 01       	movw	r16, r6
     e34:	2c 85       	ldd	r18, Y+12	; 0x0c
     e36:	2f 77       	andi	r18, 0x7F	; 127
     e38:	22 2e       	mov	r2, r18
     e3a:	16 c0       	rjmp	.+44     	; 0xe68 <vfprintf+0x168>
     e3c:	38 01       	movw	r6, r16
     e3e:	f2 e0       	ldi	r31, 0x02	; 2
     e40:	6f 0e       	add	r6, r31
     e42:	71 1c       	adc	r7, r1
     e44:	f8 01       	movw	r30, r16
     e46:	a0 80       	ld	r10, Z
     e48:	b1 80       	ldd	r11, Z+1	; 0x01
     e4a:	26 ff       	sbrs	r18, 6
     e4c:	03 c0       	rjmp	.+6      	; 0xe54 <vfprintf+0x154>
     e4e:	65 2d       	mov	r22, r5
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <vfprintf+0x158>
     e54:	6f ef       	ldi	r22, 0xFF	; 255
     e56:	7f ef       	ldi	r23, 0xFF	; 255
     e58:	c5 01       	movw	r24, r10
     e5a:	2c 87       	std	Y+12, r18	; 0x0c
     e5c:	14 d1       	rcall	.+552    	; 0x1086 <strnlen_P>
     e5e:	2c 01       	movw	r4, r24
     e60:	2c 85       	ldd	r18, Y+12	; 0x0c
     e62:	20 68       	ori	r18, 0x80	; 128
     e64:	22 2e       	mov	r2, r18
     e66:	83 01       	movw	r16, r6
     e68:	23 fc       	sbrc	r2, 3
     e6a:	19 c0       	rjmp	.+50     	; 0xe9e <vfprintf+0x19e>
     e6c:	83 2d       	mov	r24, r3
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	48 16       	cp	r4, r24
     e72:	59 06       	cpc	r5, r25
     e74:	a0 f4       	brcc	.+40     	; 0xe9e <vfprintf+0x19e>
     e76:	b7 01       	movw	r22, r14
     e78:	80 e2       	ldi	r24, 0x20	; 32
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	1a d1       	rcall	.+564    	; 0x10b2 <fputc>
     e7e:	3a 94       	dec	r3
     e80:	f5 cf       	rjmp	.-22     	; 0xe6c <vfprintf+0x16c>
     e82:	f5 01       	movw	r30, r10
     e84:	27 fc       	sbrc	r2, 7
     e86:	85 91       	lpm	r24, Z+
     e88:	27 fe       	sbrs	r2, 7
     e8a:	81 91       	ld	r24, Z+
     e8c:	5f 01       	movw	r10, r30
     e8e:	b7 01       	movw	r22, r14
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0f d1       	rcall	.+542    	; 0x10b2 <fputc>
     e94:	31 10       	cpse	r3, r1
     e96:	3a 94       	dec	r3
     e98:	f1 e0       	ldi	r31, 0x01	; 1
     e9a:	4f 1a       	sub	r4, r31
     e9c:	51 08       	sbc	r5, r1
     e9e:	41 14       	cp	r4, r1
     ea0:	51 04       	cpc	r5, r1
     ea2:	79 f7       	brne	.-34     	; 0xe82 <vfprintf+0x182>
     ea4:	de c0       	rjmp	.+444    	; 0x1062 <vfprintf+0x362>
     ea6:	84 36       	cpi	r24, 0x64	; 100
     ea8:	11 f0       	breq	.+4      	; 0xeae <vfprintf+0x1ae>
     eaa:	89 36       	cpi	r24, 0x69	; 105
     eac:	31 f5       	brne	.+76     	; 0xefa <vfprintf+0x1fa>
     eae:	f8 01       	movw	r30, r16
     eb0:	27 ff       	sbrs	r18, 7
     eb2:	07 c0       	rjmp	.+14     	; 0xec2 <vfprintf+0x1c2>
     eb4:	60 81       	ld	r22, Z
     eb6:	71 81       	ldd	r23, Z+1	; 0x01
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	93 81       	ldd	r25, Z+3	; 0x03
     ebc:	0c 5f       	subi	r16, 0xFC	; 252
     ebe:	1f 4f       	sbci	r17, 0xFF	; 255
     ec0:	08 c0       	rjmp	.+16     	; 0xed2 <vfprintf+0x1d2>
     ec2:	60 81       	ld	r22, Z
     ec4:	71 81       	ldd	r23, Z+1	; 0x01
     ec6:	07 2e       	mov	r0, r23
     ec8:	00 0c       	add	r0, r0
     eca:	88 0b       	sbc	r24, r24
     ecc:	99 0b       	sbc	r25, r25
     ece:	0e 5f       	subi	r16, 0xFE	; 254
     ed0:	1f 4f       	sbci	r17, 0xFF	; 255
     ed2:	2f 76       	andi	r18, 0x6F	; 111
     ed4:	72 2e       	mov	r7, r18
     ed6:	97 ff       	sbrs	r25, 7
     ed8:	09 c0       	rjmp	.+18     	; 0xeec <vfprintf+0x1ec>
     eda:	90 95       	com	r25
     edc:	80 95       	com	r24
     ede:	70 95       	com	r23
     ee0:	61 95       	neg	r22
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	8f 4f       	sbci	r24, 0xFF	; 255
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	20 68       	ori	r18, 0x80	; 128
     eea:	72 2e       	mov	r7, r18
     eec:	2a e0       	ldi	r18, 0x0A	; 10
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	a4 01       	movw	r20, r8
     ef2:	17 d1       	rcall	.+558    	; 0x1122 <__ultoa_invert>
     ef4:	a8 2e       	mov	r10, r24
     ef6:	a8 18       	sub	r10, r8
     ef8:	43 c0       	rjmp	.+134    	; 0xf80 <vfprintf+0x280>
     efa:	85 37       	cpi	r24, 0x75	; 117
     efc:	29 f4       	brne	.+10     	; 0xf08 <vfprintf+0x208>
     efe:	2f 7e       	andi	r18, 0xEF	; 239
     f00:	b2 2e       	mov	r11, r18
     f02:	2a e0       	ldi	r18, 0x0A	; 10
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	25 c0       	rjmp	.+74     	; 0xf52 <vfprintf+0x252>
     f08:	f2 2f       	mov	r31, r18
     f0a:	f9 7f       	andi	r31, 0xF9	; 249
     f0c:	bf 2e       	mov	r11, r31
     f0e:	8f 36       	cpi	r24, 0x6F	; 111
     f10:	c1 f0       	breq	.+48     	; 0xf42 <vfprintf+0x242>
     f12:	18 f4       	brcc	.+6      	; 0xf1a <vfprintf+0x21a>
     f14:	88 35       	cpi	r24, 0x58	; 88
     f16:	79 f0       	breq	.+30     	; 0xf36 <vfprintf+0x236>
     f18:	ad c0       	rjmp	.+346    	; 0x1074 <vfprintf+0x374>
     f1a:	80 37       	cpi	r24, 0x70	; 112
     f1c:	19 f0       	breq	.+6      	; 0xf24 <vfprintf+0x224>
     f1e:	88 37       	cpi	r24, 0x78	; 120
     f20:	21 f0       	breq	.+8      	; 0xf2a <vfprintf+0x22a>
     f22:	a8 c0       	rjmp	.+336    	; 0x1074 <vfprintf+0x374>
     f24:	2f 2f       	mov	r18, r31
     f26:	20 61       	ori	r18, 0x10	; 16
     f28:	b2 2e       	mov	r11, r18
     f2a:	b4 fe       	sbrs	r11, 4
     f2c:	0d c0       	rjmp	.+26     	; 0xf48 <vfprintf+0x248>
     f2e:	8b 2d       	mov	r24, r11
     f30:	84 60       	ori	r24, 0x04	; 4
     f32:	b8 2e       	mov	r11, r24
     f34:	09 c0       	rjmp	.+18     	; 0xf48 <vfprintf+0x248>
     f36:	24 ff       	sbrs	r18, 4
     f38:	0a c0       	rjmp	.+20     	; 0xf4e <vfprintf+0x24e>
     f3a:	9f 2f       	mov	r25, r31
     f3c:	96 60       	ori	r25, 0x06	; 6
     f3e:	b9 2e       	mov	r11, r25
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <vfprintf+0x24e>
     f42:	28 e0       	ldi	r18, 0x08	; 8
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <vfprintf+0x252>
     f48:	20 e1       	ldi	r18, 0x10	; 16
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <vfprintf+0x252>
     f4e:	20 e1       	ldi	r18, 0x10	; 16
     f50:	32 e0       	ldi	r19, 0x02	; 2
     f52:	f8 01       	movw	r30, r16
     f54:	b7 fe       	sbrs	r11, 7
     f56:	07 c0       	rjmp	.+14     	; 0xf66 <vfprintf+0x266>
     f58:	60 81       	ld	r22, Z
     f5a:	71 81       	ldd	r23, Z+1	; 0x01
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	0c 5f       	subi	r16, 0xFC	; 252
     f62:	1f 4f       	sbci	r17, 0xFF	; 255
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <vfprintf+0x272>
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 5f       	subi	r16, 0xFE	; 254
     f70:	1f 4f       	sbci	r17, 0xFF	; 255
     f72:	a4 01       	movw	r20, r8
     f74:	d6 d0       	rcall	.+428    	; 0x1122 <__ultoa_invert>
     f76:	a8 2e       	mov	r10, r24
     f78:	a8 18       	sub	r10, r8
     f7a:	fb 2d       	mov	r31, r11
     f7c:	ff 77       	andi	r31, 0x7F	; 127
     f7e:	7f 2e       	mov	r7, r31
     f80:	76 fe       	sbrs	r7, 6
     f82:	0b c0       	rjmp	.+22     	; 0xf9a <vfprintf+0x29a>
     f84:	37 2d       	mov	r19, r7
     f86:	3e 7f       	andi	r19, 0xFE	; 254
     f88:	a5 14       	cp	r10, r5
     f8a:	50 f4       	brcc	.+20     	; 0xfa0 <vfprintf+0x2a0>
     f8c:	74 fe       	sbrs	r7, 4
     f8e:	0a c0       	rjmp	.+20     	; 0xfa4 <vfprintf+0x2a4>
     f90:	72 fc       	sbrc	r7, 2
     f92:	08 c0       	rjmp	.+16     	; 0xfa4 <vfprintf+0x2a4>
     f94:	37 2d       	mov	r19, r7
     f96:	3e 7e       	andi	r19, 0xEE	; 238
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <vfprintf+0x2a4>
     f9a:	ba 2c       	mov	r11, r10
     f9c:	37 2d       	mov	r19, r7
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <vfprintf+0x2a6>
     fa0:	ba 2c       	mov	r11, r10
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <vfprintf+0x2a6>
     fa4:	b5 2c       	mov	r11, r5
     fa6:	34 ff       	sbrs	r19, 4
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <vfprintf+0x2c4>
     faa:	fe 01       	movw	r30, r28
     fac:	ea 0d       	add	r30, r10
     fae:	f1 1d       	adc	r31, r1
     fb0:	80 81       	ld	r24, Z
     fb2:	80 33       	cpi	r24, 0x30	; 48
     fb4:	11 f4       	brne	.+4      	; 0xfba <vfprintf+0x2ba>
     fb6:	39 7e       	andi	r19, 0xE9	; 233
     fb8:	09 c0       	rjmp	.+18     	; 0xfcc <vfprintf+0x2cc>
     fba:	32 ff       	sbrs	r19, 2
     fbc:	06 c0       	rjmp	.+12     	; 0xfca <vfprintf+0x2ca>
     fbe:	b3 94       	inc	r11
     fc0:	b3 94       	inc	r11
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <vfprintf+0x2cc>
     fc4:	83 2f       	mov	r24, r19
     fc6:	86 78       	andi	r24, 0x86	; 134
     fc8:	09 f0       	breq	.+2      	; 0xfcc <vfprintf+0x2cc>
     fca:	b3 94       	inc	r11
     fcc:	33 fd       	sbrc	r19, 3
     fce:	12 c0       	rjmp	.+36     	; 0xff4 <vfprintf+0x2f4>
     fd0:	30 ff       	sbrs	r19, 0
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <vfprintf+0x2e0>
     fd4:	5a 2c       	mov	r5, r10
     fd6:	b3 14       	cp	r11, r3
     fd8:	18 f4       	brcc	.+6      	; 0xfe0 <vfprintf+0x2e0>
     fda:	53 0c       	add	r5, r3
     fdc:	5b 18       	sub	r5, r11
     fde:	b3 2c       	mov	r11, r3
     fe0:	b3 14       	cp	r11, r3
     fe2:	60 f4       	brcc	.+24     	; 0xffc <vfprintf+0x2fc>
     fe4:	b7 01       	movw	r22, r14
     fe6:	80 e2       	ldi	r24, 0x20	; 32
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	3c 87       	std	Y+12, r19	; 0x0c
     fec:	62 d0       	rcall	.+196    	; 0x10b2 <fputc>
     fee:	b3 94       	inc	r11
     ff0:	3c 85       	ldd	r19, Y+12	; 0x0c
     ff2:	f6 cf       	rjmp	.-20     	; 0xfe0 <vfprintf+0x2e0>
     ff4:	b3 14       	cp	r11, r3
     ff6:	10 f4       	brcc	.+4      	; 0xffc <vfprintf+0x2fc>
     ff8:	3b 18       	sub	r3, r11
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <vfprintf+0x2fe>
     ffc:	31 2c       	mov	r3, r1
     ffe:	34 ff       	sbrs	r19, 4
    1000:	11 c0       	rjmp	.+34     	; 0x1024 <vfprintf+0x324>
    1002:	b7 01       	movw	r22, r14
    1004:	80 e3       	ldi	r24, 0x30	; 48
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	3c 87       	std	Y+12, r19	; 0x0c
    100a:	53 d0       	rcall	.+166    	; 0x10b2 <fputc>
    100c:	3c 85       	ldd	r19, Y+12	; 0x0c
    100e:	32 ff       	sbrs	r19, 2
    1010:	16 c0       	rjmp	.+44     	; 0x103e <vfprintf+0x33e>
    1012:	31 fd       	sbrc	r19, 1
    1014:	03 c0       	rjmp	.+6      	; 0x101c <vfprintf+0x31c>
    1016:	88 e7       	ldi	r24, 0x78	; 120
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <vfprintf+0x320>
    101c:	88 e5       	ldi	r24, 0x58	; 88
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	b7 01       	movw	r22, r14
    1022:	0c c0       	rjmp	.+24     	; 0x103c <vfprintf+0x33c>
    1024:	83 2f       	mov	r24, r19
    1026:	86 78       	andi	r24, 0x86	; 134
    1028:	51 f0       	breq	.+20     	; 0x103e <vfprintf+0x33e>
    102a:	31 ff       	sbrs	r19, 1
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <vfprintf+0x332>
    102e:	8b e2       	ldi	r24, 0x2B	; 43
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <vfprintf+0x334>
    1032:	80 e2       	ldi	r24, 0x20	; 32
    1034:	37 fd       	sbrc	r19, 7
    1036:	8d e2       	ldi	r24, 0x2D	; 45
    1038:	b7 01       	movw	r22, r14
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	3a d0       	rcall	.+116    	; 0x10b2 <fputc>
    103e:	a5 14       	cp	r10, r5
    1040:	30 f4       	brcc	.+12     	; 0x104e <vfprintf+0x34e>
    1042:	b7 01       	movw	r22, r14
    1044:	80 e3       	ldi	r24, 0x30	; 48
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	34 d0       	rcall	.+104    	; 0x10b2 <fputc>
    104a:	5a 94       	dec	r5
    104c:	f8 cf       	rjmp	.-16     	; 0x103e <vfprintf+0x33e>
    104e:	aa 94       	dec	r10
    1050:	f4 01       	movw	r30, r8
    1052:	ea 0d       	add	r30, r10
    1054:	f1 1d       	adc	r31, r1
    1056:	80 81       	ld	r24, Z
    1058:	b7 01       	movw	r22, r14
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	2a d0       	rcall	.+84     	; 0x10b2 <fputc>
    105e:	a1 10       	cpse	r10, r1
    1060:	f6 cf       	rjmp	.-20     	; 0x104e <vfprintf+0x34e>
    1062:	33 20       	and	r3, r3
    1064:	09 f4       	brne	.+2      	; 0x1068 <vfprintf+0x368>
    1066:	5d ce       	rjmp	.-838    	; 0xd22 <vfprintf+0x22>
    1068:	b7 01       	movw	r22, r14
    106a:	80 e2       	ldi	r24, 0x20	; 32
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	21 d0       	rcall	.+66     	; 0x10b2 <fputc>
    1070:	3a 94       	dec	r3
    1072:	f7 cf       	rjmp	.-18     	; 0x1062 <vfprintf+0x362>
    1074:	f7 01       	movw	r30, r14
    1076:	86 81       	ldd	r24, Z+6	; 0x06
    1078:	97 81       	ldd	r25, Z+7	; 0x07
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <vfprintf+0x380>
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	9f ef       	ldi	r25, 0xFF	; 255
    1080:	2c 96       	adiw	r28, 0x0c	; 12
    1082:	e2 e1       	ldi	r30, 0x12	; 18
    1084:	c8 c0       	rjmp	.+400    	; 0x1216 <__epilogue_restores__>

00001086 <strnlen_P>:
    1086:	fc 01       	movw	r30, r24
    1088:	05 90       	lpm	r0, Z+
    108a:	61 50       	subi	r22, 0x01	; 1
    108c:	70 40       	sbci	r23, 0x00	; 0
    108e:	01 10       	cpse	r0, r1
    1090:	d8 f7       	brcc	.-10     	; 0x1088 <strnlen_P+0x2>
    1092:	80 95       	com	r24
    1094:	90 95       	com	r25
    1096:	8e 0f       	add	r24, r30
    1098:	9f 1f       	adc	r25, r31
    109a:	08 95       	ret

0000109c <strnlen>:
    109c:	fc 01       	movw	r30, r24
    109e:	61 50       	subi	r22, 0x01	; 1
    10a0:	70 40       	sbci	r23, 0x00	; 0
    10a2:	01 90       	ld	r0, Z+
    10a4:	01 10       	cpse	r0, r1
    10a6:	d8 f7       	brcc	.-10     	; 0x109e <strnlen+0x2>
    10a8:	80 95       	com	r24
    10aa:	90 95       	com	r25
    10ac:	8e 0f       	add	r24, r30
    10ae:	9f 1f       	adc	r25, r31
    10b0:	08 95       	ret

000010b2 <fputc>:
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	fb 01       	movw	r30, r22
    10bc:	23 81       	ldd	r18, Z+3	; 0x03
    10be:	21 fd       	sbrc	r18, 1
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <fputc+0x16>
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	28 c0       	rjmp	.+80     	; 0x1118 <fputc+0x66>
    10c8:	22 ff       	sbrs	r18, 2
    10ca:	16 c0       	rjmp	.+44     	; 0x10f8 <fputc+0x46>
    10cc:	46 81       	ldd	r20, Z+6	; 0x06
    10ce:	57 81       	ldd	r21, Z+7	; 0x07
    10d0:	24 81       	ldd	r18, Z+4	; 0x04
    10d2:	35 81       	ldd	r19, Z+5	; 0x05
    10d4:	42 17       	cp	r20, r18
    10d6:	53 07       	cpc	r21, r19
    10d8:	44 f4       	brge	.+16     	; 0x10ea <fputc+0x38>
    10da:	a0 81       	ld	r26, Z
    10dc:	b1 81       	ldd	r27, Z+1	; 0x01
    10de:	9d 01       	movw	r18, r26
    10e0:	2f 5f       	subi	r18, 0xFF	; 255
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
    10e4:	31 83       	std	Z+1, r19	; 0x01
    10e6:	20 83       	st	Z, r18
    10e8:	8c 93       	st	X, r24
    10ea:	26 81       	ldd	r18, Z+6	; 0x06
    10ec:	37 81       	ldd	r19, Z+7	; 0x07
    10ee:	2f 5f       	subi	r18, 0xFF	; 255
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	37 83       	std	Z+7, r19	; 0x07
    10f4:	26 83       	std	Z+6, r18	; 0x06
    10f6:	10 c0       	rjmp	.+32     	; 0x1118 <fputc+0x66>
    10f8:	eb 01       	movw	r28, r22
    10fa:	09 2f       	mov	r16, r25
    10fc:	18 2f       	mov	r17, r24
    10fe:	00 84       	ldd	r0, Z+8	; 0x08
    1100:	f1 85       	ldd	r31, Z+9	; 0x09
    1102:	e0 2d       	mov	r30, r0
    1104:	09 95       	icall
    1106:	89 2b       	or	r24, r25
    1108:	e1 f6       	brne	.-72     	; 0x10c2 <fputc+0x10>
    110a:	8e 81       	ldd	r24, Y+6	; 0x06
    110c:	9f 81       	ldd	r25, Y+7	; 0x07
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	9f 83       	std	Y+7, r25	; 0x07
    1112:	8e 83       	std	Y+6, r24	; 0x06
    1114:	81 2f       	mov	r24, r17
    1116:	90 2f       	mov	r25, r16
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <__ultoa_invert>:
    1122:	fa 01       	movw	r30, r20
    1124:	aa 27       	eor	r26, r26
    1126:	28 30       	cpi	r18, 0x08	; 8
    1128:	51 f1       	breq	.+84     	; 0x117e <__ultoa_invert+0x5c>
    112a:	20 31       	cpi	r18, 0x10	; 16
    112c:	81 f1       	breq	.+96     	; 0x118e <__ultoa_invert+0x6c>
    112e:	e8 94       	clt
    1130:	6f 93       	push	r22
    1132:	6e 7f       	andi	r22, 0xFE	; 254
    1134:	6e 5f       	subi	r22, 0xFE	; 254
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	8f 4f       	sbci	r24, 0xFF	; 255
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	af 4f       	sbci	r26, 0xFF	; 255
    113e:	b1 e0       	ldi	r27, 0x01	; 1
    1140:	3e d0       	rcall	.+124    	; 0x11be <__ultoa_invert+0x9c>
    1142:	b4 e0       	ldi	r27, 0x04	; 4
    1144:	3c d0       	rcall	.+120    	; 0x11be <__ultoa_invert+0x9c>
    1146:	67 0f       	add	r22, r23
    1148:	78 1f       	adc	r23, r24
    114a:	89 1f       	adc	r24, r25
    114c:	9a 1f       	adc	r25, r26
    114e:	a1 1d       	adc	r26, r1
    1150:	68 0f       	add	r22, r24
    1152:	79 1f       	adc	r23, r25
    1154:	8a 1f       	adc	r24, r26
    1156:	91 1d       	adc	r25, r1
    1158:	a1 1d       	adc	r26, r1
    115a:	6a 0f       	add	r22, r26
    115c:	71 1d       	adc	r23, r1
    115e:	81 1d       	adc	r24, r1
    1160:	91 1d       	adc	r25, r1
    1162:	a1 1d       	adc	r26, r1
    1164:	20 d0       	rcall	.+64     	; 0x11a6 <__ultoa_invert+0x84>
    1166:	09 f4       	brne	.+2      	; 0x116a <__ultoa_invert+0x48>
    1168:	68 94       	set
    116a:	3f 91       	pop	r19
    116c:	2a e0       	ldi	r18, 0x0A	; 10
    116e:	26 9f       	mul	r18, r22
    1170:	11 24       	eor	r1, r1
    1172:	30 19       	sub	r19, r0
    1174:	30 5d       	subi	r19, 0xD0	; 208
    1176:	31 93       	st	Z+, r19
    1178:	de f6       	brtc	.-74     	; 0x1130 <__ultoa_invert+0xe>
    117a:	cf 01       	movw	r24, r30
    117c:	08 95       	ret
    117e:	46 2f       	mov	r20, r22
    1180:	47 70       	andi	r20, 0x07	; 7
    1182:	40 5d       	subi	r20, 0xD0	; 208
    1184:	41 93       	st	Z+, r20
    1186:	b3 e0       	ldi	r27, 0x03	; 3
    1188:	0f d0       	rcall	.+30     	; 0x11a8 <__ultoa_invert+0x86>
    118a:	c9 f7       	brne	.-14     	; 0x117e <__ultoa_invert+0x5c>
    118c:	f6 cf       	rjmp	.-20     	; 0x117a <__ultoa_invert+0x58>
    118e:	46 2f       	mov	r20, r22
    1190:	4f 70       	andi	r20, 0x0F	; 15
    1192:	40 5d       	subi	r20, 0xD0	; 208
    1194:	4a 33       	cpi	r20, 0x3A	; 58
    1196:	18 f0       	brcs	.+6      	; 0x119e <__ultoa_invert+0x7c>
    1198:	49 5d       	subi	r20, 0xD9	; 217
    119a:	31 fd       	sbrc	r19, 1
    119c:	40 52       	subi	r20, 0x20	; 32
    119e:	41 93       	st	Z+, r20
    11a0:	02 d0       	rcall	.+4      	; 0x11a6 <__ultoa_invert+0x84>
    11a2:	a9 f7       	brne	.-22     	; 0x118e <__ultoa_invert+0x6c>
    11a4:	ea cf       	rjmp	.-44     	; 0x117a <__ultoa_invert+0x58>
    11a6:	b4 e0       	ldi	r27, 0x04	; 4
    11a8:	a6 95       	lsr	r26
    11aa:	97 95       	ror	r25
    11ac:	87 95       	ror	r24
    11ae:	77 95       	ror	r23
    11b0:	67 95       	ror	r22
    11b2:	ba 95       	dec	r27
    11b4:	c9 f7       	brne	.-14     	; 0x11a8 <__ultoa_invert+0x86>
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	61 05       	cpc	r22, r1
    11ba:	71 05       	cpc	r23, r1
    11bc:	08 95       	ret
    11be:	9b 01       	movw	r18, r22
    11c0:	ac 01       	movw	r20, r24
    11c2:	0a 2e       	mov	r0, r26
    11c4:	06 94       	lsr	r0
    11c6:	57 95       	ror	r21
    11c8:	47 95       	ror	r20
    11ca:	37 95       	ror	r19
    11cc:	27 95       	ror	r18
    11ce:	ba 95       	dec	r27
    11d0:	c9 f7       	brne	.-14     	; 0x11c4 <__ultoa_invert+0xa2>
    11d2:	62 0f       	add	r22, r18
    11d4:	73 1f       	adc	r23, r19
    11d6:	84 1f       	adc	r24, r20
    11d8:	95 1f       	adc	r25, r21
    11da:	a0 1d       	adc	r26, r0
    11dc:	08 95       	ret

000011de <__prologue_saves__>:
    11de:	2f 92       	push	r2
    11e0:	3f 92       	push	r3
    11e2:	4f 92       	push	r4
    11e4:	5f 92       	push	r5
    11e6:	6f 92       	push	r6
    11e8:	7f 92       	push	r7
    11ea:	8f 92       	push	r8
    11ec:	9f 92       	push	r9
    11ee:	af 92       	push	r10
    11f0:	bf 92       	push	r11
    11f2:	cf 92       	push	r12
    11f4:	df 92       	push	r13
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	ca 1b       	sub	r28, r26
    1208:	db 0b       	sbc	r29, r27
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	09 94       	ijmp

00001216 <__epilogue_restores__>:
    1216:	2a 88       	ldd	r2, Y+18	; 0x12
    1218:	39 88       	ldd	r3, Y+17	; 0x11
    121a:	48 88       	ldd	r4, Y+16	; 0x10
    121c:	5f 84       	ldd	r5, Y+15	; 0x0f
    121e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1220:	7d 84       	ldd	r7, Y+13	; 0x0d
    1222:	8c 84       	ldd	r8, Y+12	; 0x0c
    1224:	9b 84       	ldd	r9, Y+11	; 0x0b
    1226:	aa 84       	ldd	r10, Y+10	; 0x0a
    1228:	b9 84       	ldd	r11, Y+9	; 0x09
    122a:	c8 84       	ldd	r12, Y+8	; 0x08
    122c:	df 80       	ldd	r13, Y+7	; 0x07
    122e:	ee 80       	ldd	r14, Y+6	; 0x06
    1230:	fd 80       	ldd	r15, Y+5	; 0x05
    1232:	0c 81       	ldd	r16, Y+4	; 0x04
    1234:	1b 81       	ldd	r17, Y+3	; 0x03
    1236:	aa 81       	ldd	r26, Y+2	; 0x02
    1238:	b9 81       	ldd	r27, Y+1	; 0x01
    123a:	ce 0f       	add	r28, r30
    123c:	d1 1d       	adc	r29, r1
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	ed 01       	movw	r28, r26
    124a:	08 95       	ret

0000124c <_exit>:
    124c:	f8 94       	cli

0000124e <__stop_program>:
    124e:	ff cf       	rjmp	.-2      	; 0x124e <__stop_program>
